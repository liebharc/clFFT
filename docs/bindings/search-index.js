var searchIndex = {};
searchIndex["clfft"] = {"doc":"This module provides access to the `clFFT` lib in a fashion which is more consistent with the `ocl` crate.\nUsers can always use the `ffi` module to directly access `clFFT`.","items":[[3,"FftPlanBuilder","clfft","Builder for a FFT plan.",null,null],[3,"FftInplacePlan","","A plan is a repository of state for calculating FFT&#39;s.  Allows the runtime to pre-calculate kernels, programs\nand buffers and associate them with buffers of specified dimensions.",null,null],[3,"FftOutOfPlacePlan","","A plan is a repository of state for calculating FFT&#39;s.  Allows the runtime to pre-calculate kernels, programs\nand buffers and associate them with buffers of specified dimensions.",null,null],[4,"Precision","","Specify the expected precision of each FFT.",null,null],[13,"Precise","","",0,null],[13,"Fast","","",0,null],[4,"Layout","","Specify the expected layouts of the buffers.",null,null],[13,"ComplexInterleaved","","",1,null],[13,"ComplexPlanar","","",1,null],[13,"HermitianInterleaved","","",1,null],[13,"HermitianPlanar","","",1,null],[13,"Real","","",1,null],[4,"Direction","","Specify the expected direction of each FFT, time or the frequency domains",null,null],[13,"Forward","","",2,null],[13,"Backward","","",2,null],[4,"Location","","pecify wheter the input buffers are overwritten with results",null,null],[13,"Inplace","","",3,null],[13,"OutOfPlace","","",3,null],[5,"teatdown","","Frees all `clFFT` library resources. After calling this function\nno further methods must be called on this lib!",null,{"inputs":[],"output":null}],[5,"builder","","Creates a builder for baking a new FFT plan.",null,{"inputs":[],"output":{"name":"fftplanbuilder"}}],[0,"ffi","","Bindings to `clFFT`. See http://clmathlibraries.github.io/clFFT/ for more information.",null,null],[3,"clfftSetupData","clfft::ffi","",null,null],[12,"major","","",4,null],[12,"minor","","",4,null],[12,"patch","","",4,null],[12,"debugFlags","","",4,null],[4,"clfftStatus","","",null,null],[13,"CLFFT_INVALID_GLOBAL_WORK_SIZE","","",5,null],[13,"CLFFT_INVALID_MIP_LEVEL","","",5,null],[13,"CLFFT_INVALID_BUFFER_SIZE","","",5,null],[13,"CLFFT_INVALID_GL_OBJECT","","",5,null],[13,"CLFFT_INVALID_OPERATION","","",5,null],[13,"CLFFT_INVALID_EVENT","","",5,null],[13,"CLFFT_INVALID_EVENT_WAIT_LIST","","",5,null],[13,"CLFFT_INVALID_GLOBAL_OFFSET","","",5,null],[13,"CLFFT_INVALID_WORK_ITEM_SIZE","","",5,null],[13,"CLFFT_INVALID_WORK_GROUP_SIZE","","",5,null],[13,"CLFFT_INVALID_WORK_DIMENSION","","",5,null],[13,"CLFFT_INVALID_KERNEL_ARGS","","",5,null],[13,"CLFFT_INVALID_ARG_SIZE","","",5,null],[13,"CLFFT_INVALID_ARG_VALUE","","",5,null],[13,"CLFFT_INVALID_ARG_INDEX","","",5,null],[13,"CLFFT_INVALID_KERNEL","","",5,null],[13,"CLFFT_INVALID_KERNEL_DEFINITION","","",5,null],[13,"CLFFT_INVALID_KERNEL_NAME","","",5,null],[13,"CLFFT_INVALID_PROGRAM_EXECUTABLE","","",5,null],[13,"CLFFT_INVALID_PROGRAM","","",5,null],[13,"CLFFT_INVALID_BUILD_OPTIONS","","",5,null],[13,"CLFFT_INVALID_BINARY","","",5,null],[13,"CLFFT_INVALID_SAMPLER","","",5,null],[13,"CLFFT_INVALID_IMAGE_SIZE","","",5,null],[13,"CLFFT_INVALID_IMAGE_FORMAT_DESCRIPTOR","","",5,null],[13,"CLFFT_INVALID_MEM_OBJECT","","",5,null],[13,"CLFFT_INVALID_HOST_PTR","","",5,null],[13,"CLFFT_INVALID_COMMAND_QUEUE","","",5,null],[13,"CLFFT_INVALID_QUEUE_PROPERTIES","","",5,null],[13,"CLFFT_INVALID_CONTEXT","","",5,null],[13,"CLFFT_INVALID_DEVICE","","",5,null],[13,"CLFFT_INVALID_PLATFORM","","",5,null],[13,"CLFFT_INVALID_DEVICE_TYPE","","",5,null],[13,"CLFFT_INVALID_VALUE","","",5,null],[13,"CLFFT_MAP_FAILURE","","",5,null],[13,"CLFFT_BUILD_PROGRAM_FAILURE","","",5,null],[13,"CLFFT_IMAGE_FORMAT_NOT_SUPPORTED","","",5,null],[13,"CLFFT_IMAGE_FORMAT_MISMATCH","","",5,null],[13,"CLFFT_MEM_COPY_OVERLAP","","",5,null],[13,"CLFFT_PROFILING_INFO_NOT_AVAILABLE","","",5,null],[13,"CLFFT_OUT_OF_HOST_MEMORY","","",5,null],[13,"CLFFT_OUT_OF_RESOURCES","","",5,null],[13,"CLFFT_MEM_OBJECT_ALLOCATION_FAILURE","","",5,null],[13,"CLFFT_COMPILER_NOT_AVAILABLE","","",5,null],[13,"CLFFT_DEVICE_NOT_AVAILABLE","","",5,null],[13,"CLFFT_DEVICE_NOT_FOUND","","",5,null],[13,"CLFFT_SUCCESS","","",5,null],[13,"CLFFT_BUGCHECK","","",5,null],[13,"CLFFT_NOTIMPLEMENTED","","",5,null],[13,"CLFFT_TRANSPOSED_NOTIMPLEMENTED","","",5,null],[13,"CLFFT_FILE_NOT_FOUND","","",5,null],[13,"CLFFT_FILE_CREATE_FAILURE","","",5,null],[13,"CLFFT_VERSION_MISMATCH","","",5,null],[13,"CLFFT_INVALID_PLAN","","",5,null],[13,"CLFFT_DEVICE_NO_DOUBLE","","",5,null],[13,"CLFFT_DEVICE_MISMATCH","","",5,null],[13,"CLFFT_ENDSTATUS","","",5,null],[4,"clfftDim","","",null,null],[13,"CLFFT_1D","","",6,null],[13,"CLFFT_2D","","",6,null],[13,"CLFFT_3D","","",6,null],[13,"ENDDIMENSION","","",6,null],[4,"clfftLayout","","",null,null],[13,"CLFFT_COMPLEX_INTERLEAVED","","",7,null],[13,"CLFFT_COMPLEX_PLANAR","","",7,null],[13,"CLFFT_HERMITIAN_INTERLEAVED","","",7,null],[13,"CLFFT_HERMITIAN_PLANAR","","",7,null],[13,"CLFFT_REAL","","",7,null],[13,"ENDLAYOUT","","",7,null],[4,"clfftPrecision","","",null,null],[13,"CLFFT_SINGLE","","",8,null],[13,"CLFFT_DOUBLE","","",8,null],[13,"CLFFT_SINGLE_FAST","","",8,null],[13,"CLFFT_DOUBLE_FAST","","",8,null],[13,"ENDPRECISION","","",8,null],[4,"clfftDirection","","",null,null],[13,"CLFFT_FORWARD","","",9,null],[13,"CLFFT_BACKWARD","","",9,null],[13,"ENDDIRECTION","","",9,null],[4,"clfftResultLocation","","",null,null],[13,"CLFFT_INPLACE","","",10,null],[13,"CLFFT_OUTOFPLACE","","",10,null],[13,"ENDPLACE","","",10,null],[4,"clfftResultTransposed","","",null,null],[13,"CLFFT_NOTRANSPOSE","","",11,null],[13,"CLFFT_TRANSPOSED","","",11,null],[13,"ENDTRANSPOSED","","",11,null],[4,"clfftCallbackType","","",null,null],[13,"PRECALLBACK","","",12,null],[13,"POSTCALLBACK","","",12,null],[5,"clfftSetup","","",null,null],[5,"clfftTeardown","","",null,null],[5,"clfftGetVersion","","",null,null],[5,"clfftCreateDefaultPlan","","",null,null],[5,"clfftCopyPlan","","",null,null],[5,"clfftBakePlan","","",null,null],[5,"clfftDestroyPlan","","",null,null],[5,"clfftGetPlanContext","","",null,null],[5,"clfftGetPlanPrecision","","",null,null],[5,"clfftSetPlanPrecision","","",null,null],[5,"clfftGetPlanScale","","",null,null],[5,"clfftSetPlanScale","","",null,null],[5,"clfftGetPlanBatchSize","","",null,null],[5,"clfftSetPlanBatchSize","","",null,null],[5,"clfftGetPlanDim","","",null,null],[5,"clfftSetPlanDim","","",null,null],[5,"clfftGetPlanLength","","",null,null],[5,"clfftSetPlanLength","","",null,null],[5,"clfftGetPlanInStride","","",null,null],[5,"clfftSetPlanInStride","","",null,null],[5,"clfftGetPlanOutStride","","",null,null],[5,"clfftSetPlanOutStride","","",null,null],[5,"clfftGetPlanDistance","","",null,null],[5,"clfftSetPlanDistance","","",null,null],[5,"clfftGetLayout","","",null,null],[5,"clfftSetLayout","","",null,null],[5,"clfftGetResultLocation","","",null,null],[5,"clfftSetResultLocation","","",null,null],[5,"clfftGetPlanTransposeResult","","",null,null],[5,"clfftSetPlanTransposeResult","","",null,null],[5,"clfftGetTmpBufSize","","",null,null],[5,"clfftSetPlanCallback","","",null,null],[5,"clfftEnqueueTransform","","",null,null],[6,"clfftPlanHandle","","",null,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"hash","","",5,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"hash","","",6,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"hash","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"hash","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"hash","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"hash","","",10,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"eq","","",11,null],[11,"hash","","",11,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"hash","","",12,null],[8,"ClFftPrm","clfft","A trait for all paremeters supported by `clFFT`.",null,null],[10,"is_dbl_precision","","Is the type a double precision type.",13,{"inputs":[],"output":{"name":"bool"}}],[8,"AsClFftPlanHandle","","Gets the native `clFFT` plan handle from a type.",null,null],[10,"as_ptr","","",14,null],[8,"FftPlan","","Getters for a FFT plan.",null,null],[10,"precision","","Gets expected precision of each FFT.",15,null],[10,"dims","","Gets the FFT dimensions.",15,null],[10,"input_layout","","the expected layouts of the input buffers.",15,null],[10,"output_layout","","the expected layouts of the output buffers.",15,null],[10,"forward_scale","","Gets the scaling factors for FFTs.",15,null],[10,"backward_scale","","Gets the scaling factors for IFFTs.",15,null],[10,"batch_size","","Gets the patch size.",15,null],[10,"result_location","","Gets whether the input buffers are overwritten with results.",15,null],[11,"eq","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"precision","","Set the floating point precision of the FFT data.",16,null],[11,"input_layout","","Set the expected layout of the input buffer.",16,null],[11,"output_layout","","Set the expected layout of the output buffer.",16,null],[11,"dims","","Set the dimensionality of the FFT transform; describes how many elements are in the array.",16,null],[11,"forward_scale","","Set the scaling factor that is applied to the FFT data.",16,null],[11,"backward_scale","","Set the scaling factor that is applied to the FFT data.",16,null],[11,"batch_size","","Set the number of discrete arrays that the plan can concurrently handle.",16,null],[11,"bake_inplace_plan","","Creates a plan for an inplace FFT.",16,null],[11,"bake_out_of_place_plan","","Creates a plan for an out of place FFT.",16,null],[11,"enqueue","","Enqueues the FFT so that it gets performed on the device.",17,null],[11,"enqueue","","Enqueues the FFT so that it gets performed on the device.",18,null],[11,"as_ptr","","Returns the native clFFT plan handle.",18,null],[11,"as_ptr","","Returns the native clFFT plan handle.",17,null],[11,"drop","","",17,null],[11,"drop","","",18,null]],"paths":[[4,"Precision"],[4,"Layout"],[4,"Direction"],[4,"Location"],[3,"clfftSetupData"],[4,"clfftStatus"],[4,"clfftDim"],[4,"clfftLayout"],[4,"clfftPrecision"],[4,"clfftDirection"],[4,"clfftResultLocation"],[4,"clfftResultTransposed"],[4,"clfftCallbackType"],[8,"ClFftPrm"],[8,"AsClFftPlanHandle"],[8,"FftPlan"],[3,"FftPlanBuilder"],[3,"FftInplacePlan"],[3,"FftOutOfPlacePlan"]]};
searchIndex["ocl"] = {"doc":"# [![](http://meritbadge.herokuapp.com/ocl)](https://crates.io/crates/ocl) | [GitHub](https://github.com/cogciprocate/ocl)","items":[[17,"CL_DEVICE_VERSION","ocl::ffi","",null,null],[17,"CL_MEM_HOST_WRITE_ONLY","","",null,null],[6,"cl_GLenum","","",null,null],[17,"CL_DEVICE_ADDRESS_BITS","","",null,null],[5,"clEnqueueSVMMemFill","","",null,null],[5,"clRetainKernel","","",null,null],[5,"clGetProgramInfo","","",null,null],[17,"CL_DEVICE_QUEUE_PROPERTIES","","",null,null],[17,"CL_PROFILING_COMMAND_SUBMIT","","",null,null],[6,"CLeglSyncKHR","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_GLOBAL","","",null,null],[17,"CL_QUEUE_DEVICE","","",null,null],[17,"CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE","","",null,null],[5,"clCreateFromGLBuffer","","",null,null],[17,"CL_CONTEXT_ADAPTER_D3D9EX_KHR","","",null,null],[17,"CL_ADDRESS_MIRRORED_REPEAT","","",null,null],[17,"CL_DEVICE_MAX_COMPUTE_UNITS","","",null,null],[17,"CL_DEVICE_IL_VERSION","","",null,null],[17,"CL_EVENT_COMMAND_TYPE","","",null,null],[6,"cl_context_properties","","",null,null],[17,"CL_SAMPLER_LOD_MAX","","",null,null],[6,"cl_sampler_info","","",null,null],[17,"CL_INVALID_GL_OBJECT","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_NONE","","",null,null],[17,"CL_MEM_SIZE","","",null,null],[17,"CL_INVALID_IMAGE_FORMAT_DESCRIPTOR","","",null,null],[17,"CL_DEVICE_HALF_FP_CONFIG","","",null,null],[17,"CL_MEM_SVM_ATOMICS","","",null,null],[6,"cl_sampler","","",null,null],[17,"CL_DEVICE_MAX_CONSTANT_ARGS","","",null,null],[5,"clReleaseKernel","","",null,null],[5,"clEnqueueReadBufferRect","","",null,null],[17,"CL_COMMAND_SVM_UNMAP","","",null,null],[17,"CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE","","",null,null],[5,"clCreateCommandQueueWithProperties","","",null,null],[17,"CL_PLATFORM_HOST_TIMER_RESOLUTION","","",null,null],[17,"CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE","","",null,null],[17,"CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT","","",null,null],[5,"clSVMFree","","",null,null],[5,"clCreateFromGLRenderbuffer","","",null,null],[17,"CL_SAMPLER_CONTEXT","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR","","",null,null],[17,"CL_UNORM_INT8","","",null,null],[17,"CL_COMMAND_RELEASE_GL_OBJECTS","","",null,null],[6,"CLeglDisplayKHR","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT","","",null,null],[3,"cl_image_format","","",null,null],[12,"image_channel_order","","",0,null],[12,"image_channel_data_type","","",0,null],[17,"CL_DEVICE_DOUBLE_FP_CONFIG","","",null,null],[17,"CL_IMAGE_ROW_PITCH","","",null,null],[17,"CL_MEM_WRITE_ONLY","","",null,null],[17,"GL_TEXTURE_1D_ARRAY","","",null,null],[17,"CL_GL_OBJECT_RENDERBUFFER","","",null,null],[17,"CL_DEVICE_REFERENCE_COUNT","","",null,null],[17,"CL_sRGBx","","",null,null],[6,"cl_device_exec_capabilities","","",null,null],[6,"cl_mem_flags","","",null,null],[17,"CL_DEVICE_PROFILING_TIMER_RESOLUTION","","",null,null],[5,"clGetKernelInfo","","",null,null],[5,"clEnqueueCopyBuffer","","",null,null],[5,"clGetHostTimer","","",null,null],[17,"CL_DEVICE_SVM_COARSE_GRAIN_BUFFER","","",null,null],[5,"clEnqueueCopyImageToBuffer","","",null,null],[17,"CL_DEVICE_TYPE_ACCELERATOR","","",null,null],[5,"clGetCommandQueueInfo","","",null,null],[17,"CL_FP_DENORM","","",null,null],[5,"clReleaseSampler","","",null,null],[17,"CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST","","",null,null],[17,"CL_COMMAND_COPY_IMAGE_TO_BUFFER","","",null,null],[17,"CL_INVALID_WORK_ITEM_SIZE","","",null,null],[17,"CL_UNORM_INT_101010","","",null,null],[17,"CL_COMMAND_USER","","",null,null],[17,"CL_BUILD_NONE","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR","","",null,null],[17,"CL_IMAGE_DEPTH","","",null,null],[17,"CL_ARGB","","",null,null],[17,"CL_GL_OBJECT_TEXTURE2D_ARRAY","","",null,null],[17,"CL_DEVICE_MAX_CLOCK_FREQUENCY","","",null,null],[6,"cl_device_affinity_domain","","",null,null],[6,"cl_kernel_arg_access_qualifier","","",null,null],[17,"CL_DEVICE_PARTITION_BY_COUNTS","","",null,null],[5,"clEnqueueCopyBufferRect","","",null,null],[5,"clReleaseContext","","",null,null],[17,"CL_QUEUE_CONTEXT","","",null,null],[5,"clGetExtensionFunctionAddress","","",null,null],[6,"cl_double","","",null,null],[17,"CL_INVALID_KERNEL_NAME","","",null,null],[5,"clGetSamplerInfo","","",null,null],[17,"CL_UNORM_SHORT_555","","",null,null],[17,"CL_BUFFER_CREATE_TYPE_REGION","","",null,null],[17,"CL_DEVICE_PARTITION_FAILED","","",null,null],[17,"CL_COMMAND_UNMAP_MEM_OBJECT","","",null,null],[17,"CL_INVALID_OPERATION","","",null,null],[17,"CL_MEM_FLAGS","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_WRITE_ONLY","","",null,null],[17,"CL_IMAGE_ARRAY_SIZE","","",null,null],[17,"CL_DEVICE_IMAGE_PITCH_ALIGNMENT","","",null,null],[17,"CL_SAMPLER_LOD_MIN","","",null,null],[17,"CL_RGx","","",null,null],[17,"CL_GL_TEXTURE_TARGET","","",null,null],[17,"CL_PROGRAM_CONTEXT","","",null,null],[17,"CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE","","",null,null],[6,"CLeglImageKHR","","",null,null],[6,"cl_event_info","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE","","",null,null],[5,"clGetGLContextInfoKHR","","",null,null],[17,"CL_PLATFORM_EXTENSIONS","","",null,null],[5,"clEnqueueSVMFree","","",null,null],[17,"CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT","","",null,null],[6,"cl_platform_info","","",null,null],[6,"cl_channel_type","","",null,null],[17,"CL_INVALID_ARG_VALUE","","",null,null],[5,"clRetainProgram","","",null,null],[17,"CL_SIGNED_INT32","","",null,null],[17,"CL_PROFILING_COMMAND_END","","",null,null],[17,"CL_KERNEL_ARG_INFO_NOT_AVAILABLE","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_POSITIVE_X","","",null,null],[17,"CL_KERNEL_ARG_TYPE_QUALIFIER","","",null,null],[17,"CL_DEVICE_PLATFORM","","",null,null],[17,"CL_MEM_READ_WRITE","","",null,null],[17,"CL_KERNEL_ARG_TYPE_CONST","","",null,null],[17,"CL_PIPE_PACKET_SIZE","","",null,null],[17,"CL_DEVICE_MAX_WRITE_IMAGE_ARGS","","",null,null],[17,"CL_EVENT_COMMAND_EXECUTION_STATUS","","",null,null],[17,"GL_TEXTURE_1D","","",null,null],[17,"CL_DEVICE_ERROR_CORRECTION_SUPPORT","","",null,null],[17,"CL_PROGRAM_BINARY_SIZES","","",null,null],[17,"CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE","","",null,null],[5,"clGetGLObjectInfo","","",null,null],[17,"CL_DEVICE_TYPE_GPU","","",null,null],[5,"clEnqueueSVMUnmap","","",null,null],[17,"CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS","","",null,null],[5,"clGetEventInfo","","",null,null],[6,"cl_kernel_arg_address_qualifier","","",null,null],[17,"CL_PROFILING_COMMAND_COMPLETE","","",null,null],[17,"CL_INVALID_DEVICE_QUEUE","","",null,null],[17,"CL_MEM_MAP_COUNT","","",null,null],[5,"clReleaseCommandQueue","","",null,null],[17,"CL_INVALID_DEVICE","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_POSITIVE_Z","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_CONSTANT","","",null,null],[17,"CL_DEVICE_HOST_UNIFIED_MEMORY","","",null,null],[17,"CL_BGRA","","",null,null],[5,"clCreateImage","","",null,null],[6,"cl_float","","",null,null],[17,"CL_EVENT_CONTEXT","","",null,null],[17,"CL_DEVICE_LOCAL_MEM_SIZE","","",null,null],[17,"CL_COMMAND_WRITE_BUFFER_RECT","","",null,null],[17,"CL_MAP_WRITE","","",null,null],[17,"CL_DEVICE_PARTITION_EQUALLY","","",null,null],[17,"CL_KERNEL_REFERENCE_COUNT","","",null,null],[17,"CL_DEVICE_TYPE_CPU","","",null,null],[17,"CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE","","",null,null],[5,"clEnqueueReleaseGLObjects","","",null,null],[17,"CL_MEM_OBJECT_ALLOCATION_FAILURE","","",null,null],[17,"CL_INVALID_PROGRAM_EXECUTABLE","","",null,null],[5,"clSetKernelArgSVMPointer","","",null,null],[17,"CL_UNORM_SHORT_565","","",null,null],[5,"clSetUserEventStatus","","",null,null],[6,"cl_kernel_sub_group_info","","",null,null],[5,"clGetDeviceInfo","","",null,null],[17,"CL_DEVICE_VENDOR","","",null,null],[17,"CL_MEM_USE_HOST_PTR","","",null,null],[5,"clEnqueueMapBuffer","","",null,null],[17,"GL_TEXTURE_2D","","",null,null],[17,"CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR","","",null,null],[17,"CL_KERNEL_EXEC_INFO_SVM_PTRS","","",null,null],[17,"CL_DEVICE_PRINTF_BUFFER_SIZE","","",null,null],[17,"CL_Rx","","",null,null],[5,"clGetSupportedImageFormats","","",null,null],[6,"cl_device_type","","",null,null],[17,"CL_COMMAND_READ_BUFFER","","",null,null],[6,"cl_mem_object_type","","",null,null],[17,"CL_DEVICE_AVAILABLE","","",null,null],[17,"CL_COMMAND_MIGRATE_MEM_OBJECTS","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_EXECUTABLE","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_NUMA","","",null,null],[17,"CL_MEM_CONTEXT","","",null,null],[17,"CL_DEVICE_TYPE_ALL","","",null,null],[17,"CL_READ_WRITE_CACHE","","",null,null],[17,"CL_MEM_COPY_OVERLAP","","",null,null],[17,"CL_INVALID_ARG_INDEX","","",null,null],[5,"clGetKernelWorkGroupInfo","","",null,null],[17,"CL_SIGNED_INT16","","",null,null],[6,"cl_command_queue","","",null,null],[17,"CL_DEVICE_IMAGE_MAX_BUFFER_SIZE","","",null,null],[5,"clEnqueueMapImage","","",null,null],[17,"CL_LUMINANCE","","",null,null],[17,"CL_GL_OBJECT_TEXTURE1D_ARRAY","","",null,null],[5,"clCreateSubBuffer","","",null,null],[17,"CL_DEVICE_MAX_READ_IMAGE_ARGS","","",null,null],[5,"clLinkProgram","","",null,null],[6,"cl_kernel_work_group_info","","",null,null],[17,"CL_COMMAND_FILL_BUFFER","","",null,null],[17,"CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_NONE","","",null,null],[17,"CL_BUILD_IN_PROGRESS","","",null,null],[17,"CL_ADDRESS_REPEAT","","",null,null],[17,"CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE","","",null,null],[6,"cl_bitfield","","",null,null],[17,"CL_INVALID_KERNEL","","",null,null],[17,"CL_PROGRAM_DEVICES","","",null,null],[17,"CL_ABGR","","",null,null],[17,"CL_DEVICE_NOT_FOUND","","",null,null],[17,"CL_INVALID_MEM_OBJECT","","",null,null],[17,"CL_INVALID_PIPE_SIZE","","",null,null],[5,"clEnqueueWriteImage","","",null,null],[17,"CL_MEM_HOST_PTR","","",null,null],[17,"CL_DEVICE_PARTITION_PROPERTIES","","",null,null],[5,"clEnqueueTask","","",null,null],[17,"CL_DEPTH","","",null,null],[17,"CL_GL_NUM_SAMPLES","","",null,null],[5,"clCreateProgramWithBinary","","",null,null],[17,"CL_DEVICE_LOCAL_MEM_TYPE","","",null,null],[17,"CL_COMMAND_SVM_MAP","","",null,null],[6,"cl_profiling_info","","",null,null],[17,"CL_KERNEL_ATTRIBUTES","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE","","",null,null],[17,"CL_KERNEL_ARG_TYPE_VOLATILE","","",null,null],[17,"CL_IMAGE_NUM_MIP_LEVELS","","",null,null],[17,"CL_DEVICE_TYPE_DEFAULT","","",null,null],[17,"CL_DEVICE_SVM_CAPABILITIES","","",null,null],[17,"CL_SAMPLER_REFERENCE_COUNT","","",null,null],[6,"cl_device_fp_config","","",null,null],[6,"cl_svm_mem_flags","","",null,null],[17,"CL_INVALID_KERNEL_ARGS","","",null,null],[17,"CL_PROGRAM_NUM_KERNELS","","",null,null],[17,"CL_MEM_OBJECT_IMAGE3D","","",null,null],[17,"CL_INVALID_DEVICE_TYPE","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_POSITIVE_Y","","",null,null],[17,"CL_DEVICE_NAME","","",null,null],[17,"CL_MEM_READ_ONLY","","",null,null],[17,"CL_DEVICE_MEM_BASE_ADDR_ALIGN","","",null,null],[5,"clRetainEvent","","",null,null],[5,"clBuildProgram","","",null,null],[17,"CL_DEVICE_ENDIAN_LITTLE","","",null,null],[5,"clGetDeviceAndHostTimer","","",null,null],[6,"cl_context","","",null,null],[17,"CL_TRUE","","",null,null],[17,"CL_KERNEL_ARG_TYPE_PIPE","","",null,null],[17,"CL_DEVICE_MAX_ON_DEVICE_EVENTS","","",null,null],[5,"clRetainMemObject","","",null,null],[17,"CL_EGL_DISPLAY_KHR","","",null,null],[17,"CL_CONTEXT_D3D10_DEVICE_KHR","","",null,null],[17,"CL_ADDRESS_NONE","","",null,null],[17,"CL_DEVICE_TYPE_CUSTOM","","",null,null],[17,"CL_READ_ONLY_CACHE","","",null,null],[17,"CL_COMMAND_COPY_IMAGE","","",null,null],[17,"CL_PROGRAM_KERNEL_NAMES","","",null,null],[6,"cl_kernel_arg_type_qualifier","","",null,null],[17,"CL_VERSION_1_0","","",null,null],[17,"CL_KERNEL_PROGRAM","","",null,null],[17,"CL_MEM_OBJECT_IMAGE1D_BUFFER","","",null,null],[17,"CL_INVALID_QUEUE_PROPERTIES","","",null,null],[17,"GL_TEXTURE_RECTANGLE","","",null,null],[17,"CL_DEVICE_BUILT_IN_KERNELS","","",null,null],[17,"CL_INTENSITY","","",null,null],[6,"cl_bool","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE","","",null,null],[5,"clCreateKernel","","",null,null],[5,"clGetEventProfilingInfo","","",null,null],[5,"clGetPlatformInfo","","",null,null],[17,"CL_DEVICE_PARTITION_BY_COUNTS_LIST_END","","",null,null],[5,"clRetainContext","","",null,null],[3,"cl_buffer_region","","",null,null],[12,"origin","","",1,null],[12,"size","","",1,null],[17,"CL_PLATFORM_VERSION","","",null,null],[17,"CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE","","",null,null],[17,"CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS","","",null,null],[5,"clGetImageInfo","","",null,null],[17,"CL_OUT_OF_HOST_MEMORY","","",null,null],[17,"CL_COMMAND_TASK","","",null,null],[17,"CL_INVALID_KERNEL_DEFINITION","","",null,null],[17,"CL_sBGRA","","",null,null],[17,"CL_COMMAND_MAP_IMAGE","","",null,null],[17,"CL_PROGRAM_BUILD_LOG","","",null,null],[6,"cl_command_type","","",null,null],[17,"CL_DEVICE_PROFILE","","",null,null],[17,"CL_MEM_OFFSET","","",null,null],[17,"CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED","","",null,null],[17,"CL_GL_CONTEXT_KHR","","",null,null],[17,"CL_DEVICE_PARTITION_MAX_SUB_DEVICES","","",null,null],[17,"CL_RGBx","","",null,null],[6,"cl_device_info","","",null,null],[6,"cl_pipe_info","","",null,null],[17,"CL_QUEUE_ON_DEVICE_DEFAULT","","",null,null],[5,"clFlush","","",null,null],[5,"clRetainDevice","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE","","",null,null],[5,"clEnqueueBarrierWithWaitList","","",null,null],[6,"cl_short","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG","","",null,null],[5,"clGetPipeInfo","","",null,null],[17,"CL_GLOBAL","","",null,null],[5,"clGetProgramBuildInfo","","",null,null],[17,"CL_CONTEXT_ADAPTER_DXVA_KHR","","",null,null],[17,"CL_IMAGE_FORMAT_NOT_SUPPORTED","","",null,null],[17,"CL_COMMAND_COPY_BUFFER","","",null,null],[17,"CL_INVALID_ARG_SIZE","","",null,null],[17,"CL_MEM_OBJECT_IMAGE2D","","",null,null],[17,"CL_KERNEL_ARG_TYPE_NAME","","",null,null],[6,"cl_program","","",null,null],[17,"CL_MEM_USES_SVM_POINTER","","",null,null],[17,"CL_DEVICE_PARENT_DEVICE","","",null,null],[17,"CL_FILTER_NEAREST","","",null,null],[17,"CL_RA","","",null,null],[17,"CL_GL_OBJECT_BUFFER","","",null,null],[17,"CL_DEVICE_MAX_SAMPLERS","","",null,null],[6,"cl_build_status","","",null,null],[17,"CL_CONTEXT_NUM_DEVICES","","",null,null],[5,"clEnqueueWriteBuffer","","",null,null],[5,"clCreateFromGLTexture","","",null,null],[17,"CL_FALSE","","",null,null],[5,"clEnqueueMigrateMemObjects","","",null,null],[17,"CL_DEVICE_MAX_ON_DEVICE_QUEUES","","",null,null],[5,"clEnqueueSVMMap","","",null,null],[6,"cl_long","","",null,null],[17,"CL_INVALID_BINARY","","",null,null],[5,"clCreateSampler","","",null,null],[17,"CL_SNORM_INT16","","",null,null],[17,"CL_COMPLETE","","",null,null],[17,"CL_BUILD_PROGRAM_FAILURE","","",null,null],[17,"CL_INVALID_IMAGE_SIZE","","",null,null],[17,"CL_COMMAND_SVM_FREE","","",null,null],[17,"CL_PLATFORM_NOT_FOUND_KHR","","",null,null],[17,"CL_MEM_OBJECT_IMAGE1D_ARRAY","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_LOCAL","","",null,null],[17,"CL_IMAGE_SLICE_PITCH","","",null,null],[17,"CL_DEVICE_PARTITION_TYPE","","",null,null],[17,"CL_SAMPLER_NORMALIZED_COORDS","","",null,null],[17,"CL_MAP_READ","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_CACHE_TYPE","","",null,null],[17,"CL_QUEUE_PROPERTIES","","",null,null],[5,"clEnqueueAcquireGLObjects","","",null,null],[17,"CL_PLATFORM_PROFILE","","",null,null],[5,"clEnqueueMarker","","",null,null],[17,"CL_DEVICE_MAX_PIPE_ARGS","","",null,null],[5,"clSetKernelArg","","",null,null],[6,"cl_queue_properties","","",null,null],[6,"cl_pipe_properties","","",null,null],[17,"CL_RUNNING","","",null,null],[17,"CL_INVALID_MIP_LEVEL","","",null,null],[17,"CL_MEM_OBJECT_IMAGE1D","","",null,null],[5,"clCreateContext","","",null,null],[17,"CL_COMPILE_PROGRAM_FAILURE","","",null,null],[17,"GL_TEXTURE_BUFFER","","",null,null],[17,"CL_KERNEL_COMPILE_NUM_SUB_GROUPS","","",null,null],[17,"CL_DRIVER_VERSION","","",null,null],[17,"CL_MIGRATE_MEM_OBJECT_HOST","","",null,null],[17,"CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT","","",null,null],[6,"cl_uchar","","",null,null],[17,"CL_SAMPLER_ADDRESSING_MODE","","",null,null],[17,"CL_DEVICE_SINGLE_FP_CONFIG","","",null,null],[17,"CL_COMMAND_COPY_BUFFER_TO_IMAGE","","",null,null],[17,"CL_QUEUE_ON_DEVICE","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_LIBRARY","","",null,null],[6,"cl_mem","","",null,null],[17,"CL_NON_BLOCKING","","",null,null],[17,"CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS","","",null,null],[17,"CL_WGL_HDC_KHR","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT","","",null,null],[17,"CL_LOCAL","","",null,null],[5,"clGetKernelArgInfo","","",null,null],[6,"cl_program_binary_type","","",null,null],[17,"CL_PROFILING_COMMAND_QUEUED","","",null,null],[17,"CL_INVALID_COMPILER_OPTIONS","","",null,null],[17,"CL_MEM_TYPE","","",null,null],[5,"clGetContextInfo","","",null,null],[17,"CL_GL_OBJECT_TEXTURE1D","","",null,null],[17,"CL_KERNEL_COMPILE_WORK_GROUP_SIZE","","",null,null],[17,"CL_DEVICE_IMAGE_MAX_ARRAY_SIZE","","",null,null],[17,"CL_RG","","",null,null],[5,"clCreateBuffer","","",null,null],[6,"cl_uint","","",null,null],[17,"CL_EVENT_COMMAND_QUEUE","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_SIZE","","",null,null],[17,"CL_COMMAND_MARKER","","",null,null],[17,"CL_PROGRAM_BUILD_STATUS","","",null,null],[17,"CL_CONTEXT_PROPERTIES","","",null,null],[17,"CL_BUILD_ERROR","","",null,null],[17,"CL_PLATFORM_VENDOR","","",null,null],[17,"CL_FP_ROUND_TO_NEAREST","","",null,null],[17,"CL_CONTEXT_ADAPTER_D3D9_KHR","","",null,null],[17,"CL_SUCCESS","","",null,null],[17,"CL_INVALID_SAMPLER","","",null,null],[5,"clCloneKernel","","",null,null],[17,"CL_SNORM_INT8","","",null,null],[5,"clEnqueueReadImage","","",null,null],[6,"cl_d3d10_device_set_khr","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_INT","","",null,null],[5,"clCreateCommandQueue","","",null,null],[17,"CL_A","","",null,null],[5,"clEnqueueSVMMemcpy","","",null,null],[17,"CL_GL_MIPMAP_LEVEL","","",null,null],[17,"CL_KERNEL_GLOBAL_WORK_SIZE","","",null,null],[17,"CL_DEVICE_PARTITION_AFFINITY_DOMAIN","","",null,null],[5,"clCreateProgramWithSource","","",null,null],[6,"cl_gl_texture_info","","",null,null],[6,"cl_context_info","","",null,null],[6,"cl_program_build_info","","",null,null],[17,"CL_COMMAND_ACQUIRE_GL_OBJECTS","","",null,null],[17,"CL_CONTEXT_DEVICES","","",null,null],[17,"CL_KERNEL_ARG_NAME","","",null,null],[17,"CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE","","",null,null],[17,"CL_QUEUE_REFERENCE_COUNT","","",null,null],[17,"CL_IMAGE_BUFFER","","",null,null],[6,"cl_int","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE","","",null,null],[17,"CL_FP_SOFT_FLOAT","","",null,null],[17,"CL_INVALID_VALUE","","",null,null],[17,"CL_INVALID_BUFFER_SIZE","","",null,null],[5,"clEnqueueReadBuffer","","",null,null],[17,"CL_MEM_OBJECT_IMAGE2D_ARRAY","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF","","",null,null],[5,"clEnqueueCopyImage","","",null,null],[17,"CL_RGBA","","",null,null],[5,"clEnqueueSVMMigrateMem","","",null,null],[17,"CL_GL_OBJECT_TEXTURE3D","","",null,null],[5,"clSVMAlloc","","",null,null],[17,"CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE","","",null,null],[5,"clReleaseProgram","","",null,null],[6,"cl_kernel_arg_info","","",null,null],[17,"CL_COMMAND_COPY_BUFFER_RECT","","",null,null],[17,"CL_CONTEXT_INTEROP_USER_SYNC","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_PRIVATE","","",null,null],[5,"clGetGLTextureInfo","","",null,null],[17,"CL_IMAGE_ELEMENT_SIZE","","",null,null],[17,"CL_BLOCKING","","",null,null],[17,"CL_PIPE_MAX_PACKETS","","",null,null],[17,"CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT","","",null,null],[6,"cl_half","","",null,null],[17,"CL_INVALID_PROGRAM","","",null,null],[17,"CL_MAP_WRITE_INVALIDATE_REGION","","",null,null],[17,"CL_UNSIGNED_INT16","","",null,null],[17,"CL_MISALIGNED_SUB_BUFFER_OFFSET","","",null,null],[17,"CL_INVALID_CONTEXT","","",null,null],[17,"CL_INVALID_IMAGE_DESCRIPTOR","","",null,null],[5,"clEnqueueFillBuffer","","",null,null],[17,"CL_MEM_OBJECT_PIPE","","",null,null],[17,"CL_DEVICE_IMAGE2D_MAX_WIDTH","","",null,null],[5,"clEnqueueBarrier","","",null,null],[5,"clSetKernelExecInfo","","",null,null],[5,"clRetainSampler","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_CACHE_SIZE","","",null,null],[5,"clGetPlatformIDs","","",null,null],[6,"cl_d3d10_device_source_khr","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_READ_ONLY","","",null,null],[17,"CL_QUEUE_DEVICE_DEFAULT","","",null,null],[17,"CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM","","",null,null],[5,"clCreateFromGLTexture2D","","",null,null],[17,"CL_IMAGE_HEIGHT","","",null,null],[17,"CL_PLATFORM_NAME","","",null,null],[17,"CL_FP_INF_NAN","","",null,null],[17,"CL_COMMAND_NDRANGE_KERNEL","","",null,null],[6,"cl_gl_object_type","","",null,null],[6,"cl_channel_order","","",null,null],[17,"CL_PROGRAM_REFERENCE_COUNT","","",null,null],[6,"cl_program_info","","",null,null],[17,"CL_INVALID_PROPERTY","","",null,null],[17,"CL_BUILD_SUCCESS","","",null,null],[17,"CL_UNORM_INT24","","",null,null],[17,"CL_LINK_PROGRAM_FAILURE","","",null,null],[17,"GL_TEXTURE_2D_ARRAY","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT","","",null,null],[17,"CL_R","","",null,null],[6,"cl_ushort","","",null,null],[17,"CL_DEVICE_IMAGE3D_MAX_DEPTH","","",null,null],[5,"clGetKernelSubGroupInfo","","",null,null],[17,"CL_QUEUED","","",null,null],[17,"CL_CONTEXT_REFERENCE_COUNT","","",null,null],[5,"clCreateSubDevices","","",null,null],[17,"CL_VERSION_1_2","","",null,null],[17,"CL_KERNEL_ARG_TYPE_NONE","","",null,null],[17,"CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES","","",null,null],[5,"clCreateImage2D","","",null,null],[5,"clCreateFromGLTexture3D","","",null,null],[17,"CL_SAMPLER_MIP_FILTER_MODE","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT","","",null,null],[17,"CL_FP_FMA","","",null,null],[17,"CL_COMMAND_WRITE_BUFFER","","",null,null],[17,"CL_PROGRAM_SOURCE","","",null,null],[6,"cl_kernel_info","","",null,null],[17,"CL_INVALID_DEVICE_PARTITION_COUNT","","",null,null],[17,"CL_KERNEL_FUNCTION_NAME","","",null,null],[17,"CL_MEM_COPY_HOST_PTR","","",null,null],[17,"GL_TEXTURE_3D","","",null,null],[17,"CL_GL_OBJECT_TEXTURE_BUFFER","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE","","",null,null],[17,"CL_RGB","","",null,null],[6,"cl_ulong","","",null,null],[6,"cl_mem_migration_flags","","",null,null],[17,"CL_DEVICE_EXECUTION_CAPABILITIES","","",null,null],[5,"clWaitForEvents","","",null,null],[5,"clEnqueueFillImage","","",null,null],[17,"CL_PROFILING_COMMAND_START","","",null,null],[17,"CL_CONTEXT_PLATFORM","","",null,null],[5,"clEnqueueUnmapMemObject","","",null,null],[6,"cl_GLint","","",null,null],[17,"CL_DEVICE_VENDOR_ID","","",null,null],[5,"clCreateImage3D","","",null,null],[17,"CL_FP_ROUND_TO_INF","","",null,null],[5,"clCreateProgramWithBuiltInKernels","","",null,null],[17,"CL_DEVICE_NOT_AVAILABLE","","",null,null],[17,"CL_EVENT_REFERENCE_COUNT","","",null,null],[17,"CL_INVALID_BUILD_OPTIONS","","",null,null],[17,"CL_UNSIGNED_INT8","","",null,null],[17,"CL_COMMAND_FILL_IMAGE","","",null,null],[17,"CL_KERNEL_NUM_ARGS","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT","","",null,null],[17,"CL_IMAGE_NUM_SAMPLES","","",null,null],[17,"CL_MEM_SVM_FINE_GRAIN_BUFFER","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","","",null,null],[17,"CL_KHR_GL_SHARING","","",null,null],[17,"CL_DEVICE_MAX_MEM_ALLOC_SIZE","","",null,null],[6,"cl_gl_context_info","","",null,null],[6,"cl_command_queue_info","","",null,null],[6,"cl_filter_mode","","",null,null],[17,"CL_EXEC_NATIVE_KERNEL","","",null,null],[5,"clReleaseEvent","","",null,null],[5,"clRetainCommandQueue","","",null,null],[17,"CL_QUEUE_SIZE","","",null,null],[5,"clEnqueueNativeKernel","","",null,null],[6,"cl_event","","",null,null],[17,"CL_DEVICE_MAX_WORK_ITEM_SIZES","","",null,null],[5,"clReleaseMemObject","","",null,null],[17,"CL_NONE","","",null,null],[5,"clUnloadCompiler","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"CL_COMPILER_NOT_AVAILABLE","","",null,null],[17,"CL_INVALID_PLATFORM","","",null,null],[17,"CL_COMMAND_READ_BUFFER_RECT","","",null,null],[17,"CL_INVALID_GLOBAL_WORK_SIZE","","",null,null],[17,"CL_FLOAT","","",null,null],[17,"CL_KERNEL_MAX_NUM_SUB_GROUPS","","",null,null],[6,"cl_device_id","","",null,null],[17,"CL_MEM_REFERENCE_COUNT","","",null,null],[17,"CL_DEVICE_LINKER_AVAILABLE","","",null,null],[17,"CL_ADDRESS_CLAMP_TO_EDGE","","",null,null],[17,"CL_sRGB","","",null,null],[17,"CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR","","",null,null],[17,"CL_DEVICE_IMAGE3D_MAX_HEIGHT","","",null,null],[6,"cl_kernel_exec_info","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE","","",null,null],[17,"CL_GLX_DISPLAY_KHR","","",null,null],[17,"CL_VERSION_1_1","","",null,null],[5,"clEnqueueCopyBufferToImage","","",null,null],[17,"CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE","","",null,null],[6,"cl_device_local_mem_type","","",null,null],[6,"cl_mem_info","","",null,null],[17,"CL_INVALID_WORK_GROUP_SIZE","","",null,null],[5,"clCompileProgram","","",null,null],[17,"CL_HALF_FLOAT","","",null,null],[5,"clGetDeviceIDs","","",null,null],[17,"CL_PROFILING_INFO_NOT_AVAILABLE","","",null,null],[17,"CL_INVALID_COMMAND_QUEUE","","",null,null],[17,"CL_COMMAND_BARRIER","","",null,null],[17,"CL_INVALID_LINKER_OPTIONS","","",null,null],[17,"CL_MEM_ALLOC_HOST_PTR","","",null,null],[17,"CL_KERNEL_WORK_GROUP_SIZE","","",null,null],[6,"cl_GLuint","","",null,null],[17,"CL_ADDRESS_CLAMP","","",null,null],[17,"CL_DEVICE_IMAGE3D_MAX_WIDTH","","",null,null],[17,"CL_COMMAND_NATIVE_KERNEL","","",null,null],[17,"CL_DEVICE_COMPILER_AVAILABLE","","",null,null],[17,"CL_PROGRAM_IL","","",null,null],[17,"CL_DEVICE_SVM_ATOMICS","","",null,null],[17,"CL_DEVICE_TYPE","","",null,null],[5,"clGetExtensionFunctionAddressForPlatform","","",null,null],[17,"CL_FP_ROUND_TO_ZERO","","",null,null],[6,"cl_gl_platform_info","","",null,null],[5,"clCreateKernelsInProgram","","",null,null],[6,"cl_device_partition_property","","",null,null],[6,"cl_addressing_mode","","",null,null],[17,"CL_COMMAND_SVM_MEMFILL","","",null,null],[17,"CL_INVALID_EVENT","","",null,null],[17,"CL_MEM_OBJECT_BUFFER","","",null,null],[5,"clReleaseDevice","","",null,null],[17,"CL_INVALID_HOST_PTR","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_READ_WRITE","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG","","",null,null],[17,"CL_MEM_HOST_NO_ACCESS","","",null,null],[17,"CL_KERNEL_PRIVATE_MEM_SIZE","","",null,null],[6,"cl_kernel","","",null,null],[17,"CL_FILTER_LINEAR","","",null,null],[17,"CL_DEVICE_MAX_PARAMETER_SIZE","","",null,null],[17,"CL_COMMAND_READ_IMAGE","","",null,null],[17,"CL_PROGRAM_NUM_DEVICES","","",null,null],[17,"CL_EXEC_KERNEL","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE","","",null,null],[6,"cl_platform_id","","",null,null],[17,"CL_VERSION_2_1","","",null,null],[17,"CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT","","",null,null],[17,"CL_CONTEXT_D3D11_DEVICE_KHR","","",null,null],[17,"CL_DEVICE_MAX_WORK_GROUP_SIZE","","",null,null],[17,"CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT","","",null,null],[5,"clFinish","","",null,null],[6,"cl_sampler_properties","","",null,null],[5,"clSetDefaultDeviceCommandQueue","","",null,null],[17,"CL_DEVICE_EXTENSIONS","","",null,null],[17,"CL_MEM_HOST_READ_ONLY","","",null,null],[5,"clEnqueueNDRangeKernel","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_NEGATIVE_X","","",null,null],[17,"CL_GL_OBJECT_TEXTURE2D","","",null,null],[17,"CL_KERNEL_ARG_TYPE_RESTRICT","","",null,null],[17,"CL_DEVICE_OPENCL_C_VERSION","","",null,null],[17,"CL_DEPTH_STENCIL","","",null,null],[5,"clSetMemObjectDestructorCallback","","",null,null],[6,"cl_device_mem_cache_type","","",null,null],[17,"CL_COMMAND_WRITE_IMAGE","","",null,null],[6,"cl_buffer_create_type","","",null,null],[17,"CL_DEVICE_QUEUE_ON_HOST_PROPERTIES","","",null,null],[17,"CL_COMMAND_SVM_MEMCPY","","",null,null],[17,"CL_PROGRAM_BINARIES","","",null,null],[17,"CL_IMAGE_FORMAT","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE","","",null,null],[17,"CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS","","",null,null],[17,"CL_DEVICE_MAX_NUM_SUB_GROUPS","","",null,null],[17,"CL_CONTEXT_PROPERTY_USE_CGL_SHAREGROUP_APPLE","","",null,null],[17,"CL_MAP_FAILURE","","",null,null],[17,"CL_INVALID_WORK_DIMENSION","","",null,null],[5,"clCreateUserEvent","","",null,null],[17,"CL_UNSIGNED_INT32","","",null,null],[5,"clEnqueueWriteBufferRect","","",null,null],[6,"cl_egl_image_properties_khr","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF","","",null,null],[5,"clCreateContextFromType","","",null,null],[17,"CL_MEM_KERNEL_READ_AND_WRITE","","",null,null],[5,"clEnqueueMarkerWithWaitList","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","","",null,null],[5,"clCreatePipe","","",null,null],[17,"CL_DEVICE_IMAGE2D_MAX_HEIGHT","","",null,null],[5,"clCreateSamplerWithProperties","","",null,null],[6,"cl_command_queue_properties","","",null,null],[17,"CL_COMMAND_MAP_BUFFER","","",null,null],[6,"cl_map_flags","","",null,null],[17,"CL_QUEUE_PROFILING_ENABLE","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_QUALIFIER","","",null,null],[17,"CL_KERNEL_CONTEXT","","",null,null],[17,"CL_DEVICE_SVM_FINE_GRAIN_SYSTEM","","",null,null],[17,"CL_IMAGE_WIDTH","","",null,null],[6,"cl_char","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT","","",null,null],[17,"CL_UNORM_INT16","","",null,null],[17,"CL_OUT_OF_RESOURCES","","",null,null],[17,"CL_LINKER_NOT_AVAILABLE","","",null,null],[17,"CL_INVALID_EVENT_WAIT_LIST","","",null,null],[5,"clSetEventCallback","","",null,null],[17,"CL_UNORM_INT_101010_2","","",null,null],[17,"CL_DEVICE_PREFERRED_INTEROP_USER_SYNC","","",null,null],[5,"clEnqueueWaitForEvents","","",null,null],[17,"CL_sRGBA","","",null,null],[17,"CL_DEVICES_FOR_GL_CONTEXT_KHR","","",null,null],[5,"clGetMemObjectInfo","","",null,null],[17,"CL_DEVICE_IMAGE_SUPPORT","","",null,null],[17,"CL_SUBMITTED","","",null,null],[3,"cl_image_desc","","",null,null],[12,"image_type","","",2,null],[12,"image_width","","",2,null],[12,"image_height","","",2,null],[12,"image_depth","","",2,null],[12,"image_array_size","","",2,null],[12,"image_row_pitch","","",2,null],[12,"image_slice_pitch","","",2,null],[12,"num_mip_levels","","",2,null],[12,"num_samples","","",2,null],[12,"buffer","","",2,null],[17,"CL_KERNEL_ARG_ACCESS_QUALIFIER","","",null,null],[17,"CL_DEVICE_SVM_FINE_GRAIN_BUFFER","","",null,null],[17,"CL_KERNEL_LOCAL_MEM_SIZE","","",null,null],[17,"CL_CGL_SHAREGROUP_KHR","","",null,null],[17,"CL_MEM_ASSOCIATED_MEMOBJECT","","",null,null],[17,"CL_VERSION_2_0","","",null,null],[17,"CL_SAMPLER_FILTER_MODE","","",null,null],[17,"CL_DEVICE_PIPE_MAX_PACKET_SIZE","","",null,null],[6,"cl_device_svm_capabilities","","",null,null],[6,"cl_image_info","","",null,null],[17,"CL_INVALID_GLOBAL_OFFSET","","",null,null],[17,"CL_PROGRAM_BUILD_OPTIONS","","",null,null],[17,"CL_SIGNED_INT8","","",null,null],[17,"CL_IMAGE_FORMAT_MISMATCH","","",null,null],[4,"Error","ocl","An enum containing either a `String` or one of several other error types.",null,null],[13,"Conversion","","",3,null],[13,"Status","","",3,null],[12,"status","ocl::Error","",3,null],[12,"status_string","","",3,null],[12,"fn_name","","",3,null],[12,"fn_info","","",3,null],[12,"desc","","",3,null],[13,"String","ocl","",3,null],[13,"Nul","","",3,null],[13,"Io","","",3,null],[13,"FromUtf8Error","","",3,null],[13,"UnspecifiedDimensions","","",3,null],[13,"IntoStringError","","",3,null],[6,"Result","","`ocl::Error` result type.",null,null],[0,"util","","Utility and debugging functions.",null,null],[0,"colors","ocl::util","ASCII Color Palette",null,null],[7,"TAB","ocl::util::colors","",null,null],[7,"C_DEFAULT","","",null,null],[7,"C_UNDER","","",null,null],[7,"C_RED","","",null,null],[7,"C_BRED","","",null,null],[7,"C_GRN","","",null,null],[7,"C_BGRN","","",null,null],[7,"C_ORA","","",null,null],[7,"C_DBL","","",null,null],[7,"C_PUR","","",null,null],[7,"C_CYA","","",null,null],[7,"C_LGR","","",null,null],[7,"C_DFLT","","",null,null],[7,"C_DGR","","",null,null],[7,"C_LRD","","",null,null],[7,"C_YEL","","",null,null],[7,"C_BLU","","",null,null],[7,"C_LBL","","",null,null],[7,"C_MAG","","",null,null],[7,"BGC_DEFAULT","","",null,null],[7,"BGC_GRN","","",null,null],[7,"BGC_PUR","","",null,null],[7,"BGC_LGR","","",null,null],[7,"BGC_DGR","","",null,null],[5,"bytes_to_u32","ocl::util","Copies a byte slice to a new `u32`.",null,null],[5,"bytes_to","","Copies a slice of bytes to a new value of arbitrary type.",null,null],[5,"bytes_into","","Converts a vector of bytes into a value of arbitrary type.",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[5,"bytes_into_vec","","Converts a vector of bytes into a vector of arbitrary type.",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[5,"bytes_to_vec","","Copies a slice of bytes into a vector of arbitrary type.",null,null],[5,"bytes_into_string","","Converts a byte Vec into a string, removing the trailing null byte if it\nexists.",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[5,"into_bytes","","[UNTESTED] Copies an arbitrary primitive or struct into core bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"vec"}}],[5,"padded_len","","Pads `len` to make it evenly divisible by `incr`.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"vec_remove_rebuild","","Batch removes elements from a vector using a list of indices to remove.",null,null],[5,"wrap_vals","","Wraps (`%`) each value in the list `vals` if it equals or exceeds `val_n`.",null,null],[5,"scrambled_vec","","Returns a vector with length `size` containing random values in the (half-open)\nrange `[vals.0, vals.1)`.",null,null],[5,"shuffled_vec","","Returns a vector with length `size` which is first filled with each integer value\nin the (inclusive) range `[vals.0, vals.1]`. If `size` is greater than the\nnumber of integers in the aforementioned range, the integers will repeat. After\nbeing filled with `size` values, the vector is shuffled and the order of its\nvalues is randomized.",null,null],[5,"shuffle","","Shuffles the values in a vector using a single pass of Fisher-Yates with a\nweak (not cryptographically secure) random number generator.",null,null],[5,"print_bytes_as_hex","","Does what is says it&#39;s gonna.",null,null],[5,"print_slice","","[UNSTABLE]: MAY BE REMOVED AT ANY TIME\nPrints a vector to stdout. Used for debugging.",null,null],[5,"print_simple","","",null,null],[5,"print_val_range","","",null,null],[3,"Platform","ocl","A platform identifier.",null,null],[3,"Device","","An individual device identifier (an OpenCL device_id).",null,null],[3,"Context","","A context for a particular platform and set of device types.",null,null],[3,"Program","","A program from which kernels can be created from.",null,null],[3,"Queue","","A command queue which manages all actions taken on kernels, buffers, and\nimages.",null,null],[3,"Kernel","","A kernel which represents a &#39;procedure&#39;.",null,null],[3,"Buffer","","A chunk of memory physically located on a device, such as a GPU.",null,null],[3,"Image","","A section of device memory which represents one or many images.",null,null],[3,"Event","","An event representing a command or user created event.",null,null],[3,"EventList","","A list of events for coordinating enqueued commands.",null,null],[3,"Sampler","","An image sampler used to process images.",null,null],[3,"ProQue","","An all-in-one chimera of the `Program`, `Queue`, `Context` and\n(optionally) `SpatialDims` types.",null,null],[4,"SpatialDims","","Specifies a size or offset in up to three dimensions.",null,null],[13,"Unspecified","","",4,null],[13,"One","","",4,null],[13,"Two","","",4,null],[13,"Three","","",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"list","","Returns a list of all platforms avaliable on the host machine.",5,{"inputs":[],"output":{"name":"vec"}}],[11,"new","","Creates a new `Platform` from a `PlatformIdCore`.",5,{"inputs":[{"name":"platformidcore"}],"output":{"name":"platform"}}],[11,"list_from_core","","Returns a list of `Platform`s from a list of `PlatformIdCore`s",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"info","","Returns info about the platform.",5,null],[11,"profile","","Returns the platform profile as a string.",5,null],[11,"version","","Returns the platform driver version as a string.",5,null],[11,"name","","Returns the platform name as a string.",5,null],[11,"vendor","","Returns the platform vendor as a string.",5,null],[11,"extensions","","Returns the list of platform extensions as a string.",5,null],[11,"as_core","","Returns a reference to the underlying `PlatformIdCore`.",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"platform"}}],[11,"into","","",5,null],[11,"into","","",5,null],[11,"fmt","","",5,null],[11,"as_ref","","",5,null],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"first","","Returns the first available device on a platform.",6,{"inputs":[{"name":"platform"}],"output":{"name":"device"}}],[11,"specifier","","Returns a `DeviceSpecifier` useful for precisely specifying a set\nof devices.",6,{"inputs":[],"output":{"name":"devicespecifier"}}],[11,"resolve_idxs","","Resolves a list of indices into a list of valid devices.",6,null],[11,"resolve_idxs_wrap","","Resolves a list of indices into a list of valid devices.",6,null],[11,"list","","Returns a list of all devices avaliable for a given platform which\noptionally match the flags set in the bitfield, `device_types`.",6,{"inputs":[{"name":"platform"},{"name":"option"}],"output":{"name":"oclresult"}}],[11,"list_all","","Returns a list of all devices avaliable for a given `platform`.",6,{"inputs":[{"name":"platform"}],"output":{"name":"oclresult"}}],[11,"list_select","","Returns a list of devices filtered by type then selected using a\nlist of indices.",6,null],[11,"list_select_wrap","","Returns a list of devices filtered by type then selected using a\nwrapping list of indices.",6,null],[11,"list_from_core","","Returns a list of `Device`s from a list of `DeviceIdCore`s",6,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"name","","Returns the device name.",6,null],[11,"vendor","","Returns the device vendor as a string.",6,null],[11,"max_wg_size","","Returns the maximum workgroup size.",6,null],[11,"info","","Returns info about the device.",6,null],[11,"to_string","","Returns a string containing a formatted list of device properties.",6,null],[11,"as_core","","Returns the underlying `DeviceIdCore`.",6,null],[11,"into","","",6,null],[11,"into","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"builder","","Returns a [`ContextBuilder`](/ocl/ocl/struct.ContextBuilder.html).",7,{"inputs":[],"output":{"name":"contextbuilder"}}],[11,"new","","Returns a newly created context.",7,{"inputs":[{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[11,"resolve_wrapping_device_idxs","","Resolves a list of zero-based device indices into a list of Devices.",7,null],[11,"get_device_by_wrapping_index","","Returns a device by its ordinal count within this context.",7,null],[11,"platform_info","","Returns info about the platform associated with the context.",7,null],[11,"device_info","","Returns info about the device indexed by `index` associated with this\ncontext.",7,null],[11,"info","","Returns info about the context.",7,null],[11,"core_as_ref","","Returns a reference to the core pointer wrapper, usable by functions in\nthe `core` module.",7,null],[11,"devices","","Returns the list of devices associated with this context.",7,null],[11,"platform","","Returns the platform this context is associated with.",7,null],[11,"fmt","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"builder","","Returns a new `ProgramBuilder`.",8,{"inputs":[],"output":{"name":"programbuilder"}}],[11,"new","","Returns a new program built from pre-created build components and device\nlist.",8,null],[11,"core_as_ref","","Returns a reference to the core pointer wrapper, usable by functions in\nthe `core` module.",8,null],[11,"devices","","Returns the list of devices associated with this program.",8,null],[11,"info","","Returns info about this program.",8,null],[11,"build_info","","Returns info about this program&#39;s build.",8,null],[11,"fmt","","",8,null],[11,"deref","","",8,null],[11,"deref_mut","","",8,null],[11,"fmt","","",9,null],[11,"new","","Returns a new kernel.",9,{"inputs":[{"name":"s"},{"name":"program"},{"name":"queue"}],"output":{"name":"oclresult"}}],[11,"gwo","","Sets the default global work offset (builder-style).",9,null],[11,"gws","","Sets the default global work size (builder-style).",9,null],[11,"lws","","Sets the default local work size (builder-style).",9,null],[11,"arg_buf","","Adds a new argument to the kernel specifying the buffer object represented\nby &#39;buffer&#39; (builder-style). Argument is added to the bottom of the argument\norder.",9,null],[11,"arg_img","","Adds a new argument to the kernel specifying the image object represented\nby &#39;image&#39; (builder-style). Argument is added to the bottom of the argument\norder.",9,null],[11,"arg_smp","","Adds a new argument to the kernel specifying the sampler object represented\nby &#39;sampler&#39; (builder-style). Argument is added to the bottom of the argument\norder.",9,null],[11,"arg_scl","","Adds a new argument specifying the value: `scalar` (builder-style). Argument\nis added to the bottom of the argument order.",9,null],[11,"arg_vec","","Adds a new argument specifying the value: `vector` (builder-style). Argument\nis added to the bottom of the argument order.",9,null],[11,"arg_loc","","Adds a new argument specifying the allocation of a local variable of size\n`length * sizeof(T)` bytes (builder_style).",9,null],[11,"arg_scl_named","","Adds a new named argument (in order) specifying the value: `scalar`\n(builder-style).",9,null],[11,"arg_vec_named","","Adds a new named argument (in order) specifying the value: `vector`\n(builder-style).",9,null],[11,"arg_buf_named","","Adds a new named argument specifying the buffer object represented by\n&#39;buffer&#39; (builder-style). Argument is added to the bottom of the argument order.",9,null],[11,"arg_img_named","","Adds a new named argument specifying the image object represented by\n&#39;image&#39; (builder-style). Argument is added to the bottom of the argument order.",9,null],[11,"arg_smp_named","","Adds a new named argument specifying the sampler object represented by\n&#39;sampler&#39; (builder-style). Argument is added to the bottom of the argument order.",9,null],[11,"set_arg_scl_named","","Modifies the kernel argument named: `name`.",9,null],[11,"set_arg_vec_named","","Modifies the kernel argument named: `name`.",9,null],[11,"set_arg_buf_named","","Modifies the kernel argument named: `name`.",9,null],[11,"set_arg_img_named","","Modifies the kernel argument named: `name`.",9,null],[11,"set_arg_smp_named","","Sets the value of a named sampler argument.",9,null],[11,"cmd","","Returns a command builder which is used to chain parameters of an\n&#39;enqueue&#39; command together.",9,null],[11,"enq","","Enqueues this kernel on the default queue and returns the result.",9,null],[11,"set_default_queue","","Changes the default queue.",9,null],[11,"default_queue","","Returns the default `core::CommandQueue` for this kernel.",9,null],[11,"get_gwo","","Returns the default global work offset.",9,null],[11,"get_gws","","Returns the default global work size.",9,null],[11,"get_lws","","Returns the default local work size.",9,null],[11,"arg_count","","Returns the number of arguments specified for this kernel.",9,null],[11,"core_as_ref","","Returns a reference to the core pointer wrapper, usable by functions in\nthe `core` module.",9,null],[11,"info","","Returns information about this kernel.",9,null],[11,"arg_info","","Returns argument information for this kernel.",9,null],[11,"wg_info","","Returns work group information for this kernel.",9,null],[11,"name","","",9,null],[11,"fmt","","",9,null],[11,"deref","","",9,null],[11,"deref_mut","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"new","","Returns a new Queue on the device specified by `device`.",10,{"inputs":[{"name":"context"},{"name":"device"}],"output":{"name":"oclresult"}}],[11,"finish","","Blocks until all commands in this queue have completed before returning.",10,null],[11,"core_as_ref","","Returns a reference to the core pointer wrapper, usable by functions in\nthe `core` module.",10,null],[11,"context_core_as_ref","","Returns a reference to the core pointer wrapper of the context\nassociated with this queue, usable by functions in the `core` module.",10,null],[11,"device","","Returns the `OpenCL` device associated with this queue.",10,null],[11,"device_version","","Returns the cached device version.",10,null],[11,"info","","Returns info about this queue.",10,null],[11,"fmt","","",10,null],[11,"as_ref","","",10,null],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"new","","Creates a new buffer.",11,{"inputs":[{"name":"queue"},{"name":"option"},{"name":"d"},{"name":"option"}],"output":{"name":"oclresult"}}],[11,"from_gl_buffer","","[UNTESTED]\nCreates a buffer linked to a previously created OpenGL buffer object.",11,{"inputs":[{"name":"queue"},{"name":"option"},{"name":"d"},{"name":"cl_gluint"}],"output":{"name":"oclresult"}}],[11,"cmd","","Returns a buffer command builder used to read, write, copy, etc.",11,null],[11,"read","","Returns a buffer command builder used to read.",11,null],[11,"write","","Returns a buffer command builder used to write.",11,null],[11,"len","","Returns the length of the buffer.",11,null],[11,"dims","","Returns the dimensions of the buffer.",11,null],[11,"is_empty","","Returns if the Buffer is empty.",11,null],[11,"mem_info","","Returns info about the underlying memory object.",11,null],[11,"set_default_queue","","Changes the default queue used by this Buffer for reads and writes, etc.",11,null],[11,"default_queue","","Returns a reference to the default queue.",11,null],[11,"core_as_ref","","Returns a reference to the core pointer wrapper, usable by functions in\nthe `core` module.",11,null],[11,"deref","","",11,null],[11,"deref_mut","","",11,null],[11,"fmt","","",11,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"supported_formats","","Returns a list of supported image formats.",12,{"inputs":[{"name":"context"},{"name":"memflags"},{"name":"memobjecttype"}],"output":{"name":"oclresult"}}],[11,"builder","","Returns an `ImageBuilder`. This is the recommended method to create\na new `Image`.",12,{"inputs":[],"output":{"name":"imagebuilder"}}],[11,"new","","Returns a new `Image`.",12,{"inputs":[{"name":"queue"},{"name":"memflags"},{"name":"imageformat"},{"name":"imagedescriptor"},{"name":"option"}],"output":{"name":"oclresult"}}],[11,"from_gl_texture","","Returns a new `Image` from an existant GL texture2D/3D.",12,{"inputs":[{"name":"queue"},{"name":"memflags"},{"name":"imagedescriptor"},{"name":"gltexturetarget"},{"name":"cl_glint"},{"name":"cl_gluint"}],"output":{"name":"oclresult"}}],[11,"from_gl_renderbuffer","","Returns a new `Image` from an existant renderbuffer.",12,{"inputs":[{"name":"queue"},{"name":"memflags"},{"name":"imagedescriptor"},{"name":"cl_gluint"}],"output":{"name":"oclresult"}}],[11,"cmd","","Returns an image command builder used to read, write, copy, etc.",12,null],[11,"read","","Returns an image command builder set to read.",12,null],[11,"write","","Returns an image command builder set to write.",12,null],[11,"set_default_queue","","Changes the default queue.",12,null],[11,"default_queue","","Returns a reference to the default queue.",12,null],[11,"dims","","Returns this image&#39;s dimensions.",12,null],[11,"pixel_count","","Returns the total number of pixels in this image.",12,null],[11,"pixel_element_len","","Returns the length of each pixel element.",12,null],[11,"element_count","","Returns the total number of pixel elements in this image. Equivalent to its length.",12,null],[11,"info","","Get information about this image.",12,null],[11,"mem_info","","Returns info about this image&#39;s memory.",12,null],[11,"core_as_ref","","Returns a reference to the core pointer wrapper, usable by functions in\nthe `core` module.",12,null],[11,"fmt","","",12,null],[11,"deref","","",12,null],[11,"deref_mut","","",12,null],[11,"new","","Creates and returns a new sampler.",13,{"inputs":[{"name":"context"},{"name":"bool"},{"name":"addressingmode"},{"name":"filtermode"}],"output":{"name":"oclresult"}}],[11,"with_defaults","","Creates and returns a new sampler with some default settings.",13,{"inputs":[{"name":"context"}],"output":{"name":"oclresult"}}],[11,"info","","Returns various kinds of information about the sampler.",13,null],[11,"fmt","","",13,null],[11,"deref","","",13,null],[11,"deref_mut","","",13,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"builder","","Returns a new `ProQueBuilder`.",14,{"inputs":[],"output":{"name":"proquebuilder"}}],[11,"new","","Creates a new ProQue from individual parts.",14,{"inputs":[{"name":"context"},{"name":"queue"},{"name":"program"},{"name":"option"}],"output":{"name":"proque"}}],[11,"create_kernel","","Creates a kernel with pre-assigned dimensions.",14,null],[11,"create_buffer","","Returns a new buffer",14,null],[11,"set_dims","","Sets the default dimensions used when creating buffers and kernels.",14,null],[11,"max_wg_size","","Returns the maximum workgroup size supported by the device associated\nwith this `ProQue`.",14,null],[11,"queue","","Returns a reference to the queue associated with this ProQue.",14,null],[11,"context","","Returns the contained context.",14,null],[11,"program","","Returns the current program build.",14,null],[11,"dims","","Returns the current `dims` or panics.",14,null],[11,"dims_result","","Returns the current `dims` or an error.",14,null],[11,"to_len","","",14,null],[11,"to_len_padded","","",14,null],[11,"to_lens","","",14,null],[11,"dim_count","","",14,null],[11,"to_work_size","","",14,null],[11,"to_work_offset","","",14,null],[11,"deref","","",14,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"empty","","Creates a new, empty event which must be filled by a newly initiated\ncommand, becoming associated with it.",15,{"inputs":[],"output":{"name":"event"}}],[11,"from_core","","Creates a new `Event` from a `EventCore`.",15,{"inputs":[{"name":"eventcore"}],"output":{"name":"event"}}],[11,"wait","","Waits for all events in list to complete before returning.",15,null],[11,"info","","Returns info about the event.",15,null],[11,"profiling_info","","Returns info about the event.",15,null],[11,"core_as_ref","","Returns a reference to the core pointer wrapper, usable by functions in\nthe `core` module.",15,null],[11,"core_as_mut","","Returns a mutable reference to the core pointer wrapper usable by\nfunctions in the `core` module.",15,null],[11,"is_empty","","Returns true if this event is &#39;empty&#39; and has not yet been associated\nwith a command.",15,null],[11,"into","","",15,null],[11,"into","","",15,null],[11,"fmt","","",15,null],[11,"as_ref","","",15,null],[11,"deref","","",15,null],[11,"deref_mut","","",15,null],[11,"ptr_mut_ptr_new","","",15,null],[11,"as_ptr_ptr","","",15,null],[11,"count","","",15,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"new","","Returns a new, empty, `EventList`.",16,{"inputs":[],"output":{"name":"eventlist"}}],[11,"push","","Adds an event to the list.",16,null],[11,"pop","","Removes the last event from the list and returns it.",16,null],[11,"get_clone","","Returns a new copy of an event by index.",16,null],[11,"last_clone","","Returns a copy of the last event in the list.",16,null],[11,"set_callback","","Sets a callback function, `callback_receiver`, to trigger upon completion of\nthe *last event* added to the event list with an optional reference to user\ndata.",16,null],[11,"len","","Returns the number of events in the list.",16,null],[11,"is_empty","","Returns if there is no events.",16,null],[11,"core_as_ref","","",16,null],[11,"core_as_mut","","",16,null],[11,"wait","","Waits for all events in list to complete.",16,null],[11,"as_ref","","",16,null],[11,"deref","","",16,null],[11,"deref_mut","","",16,null],[11,"ptr_mut_ptr_new","","",16,null],[11,"as_ptr_ptr","","",16,null],[11,"count","","",16,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"new","","Returns a new `SpatialDims`.",4,{"inputs":[{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[11,"dim_count","","Returns the number of dimensions defined by this `SpatialDims`.",4,null],[11,"to_lens","","Returns a 3D size or an error if unspecified.",4,null],[11,"to_offset","","Returns a 3D offset or an error if unspecified.",4,null],[11,"to_len","","Returns the product of all contained dimensional values (equivalent to\na length, area, or volume) or zero if unspecified.",4,null],[11,"try_to_padded_len","","Takes the length and rounds it up to the nearest `incr` or an error.",4,null],[11,"is_unspecified","","Returns `true` if this `SpatialDims` is an `Unspecified` variant.",4,null],[11,"to_len_padded","","",4,null],[11,"to_len","","",4,null],[11,"to_lens","","",4,null],[11,"dim_count","","",4,null],[11,"to_work_size","","",4,null],[11,"to_work_offset","","",4,null],[11,"index","","",4,null],[11,"from","","",4,{"inputs":[{"name":"spatialdims"}],"output":{"name":"spatialdims"}}],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",4,null],[0,"aliases","","Type aliases and structs meant to mirror those available within a\nkernel.",null,null],[6,"cl_char","ocl::aliases","",null,null],[6,"cl_uchar","","",null,null],[6,"cl_short","","",null,null],[6,"cl_ushort","","",null,null],[6,"cl_int","","",null,null],[6,"cl_uint","","",null,null],[6,"cl_long","","",null,null],[6,"cl_ulong","","",null,null],[6,"cl_half","","",null,null],[6,"cl_float","","",null,null],[6,"cl_double","","",null,null],[6,"cl_bool","","",null,null],[6,"cl_bitfield","","",null,null],[3,"ClChar2","","",null,null],[12,"0","","",17,null],[12,"1","","",17,null],[3,"ClChar3","","",null,null],[12,"0","","",18,null],[12,"1","","",18,null],[12,"2","","",18,null],[3,"ClChar4","","",null,null],[12,"0","","",19,null],[12,"1","","",19,null],[12,"2","","",19,null],[12,"3","","",19,null],[3,"ClChar8","","",null,null],[12,"0","","",20,null],[12,"1","","",20,null],[12,"2","","",20,null],[12,"3","","",20,null],[12,"4","","",20,null],[12,"5","","",20,null],[12,"6","","",20,null],[12,"7","","",20,null],[3,"ClChar16","","",null,null],[12,"0","","",21,null],[12,"1","","",21,null],[12,"2","","",21,null],[12,"3","","",21,null],[12,"4","","",21,null],[12,"5","","",21,null],[12,"6","","",21,null],[12,"7","","",21,null],[12,"8","","",21,null],[12,"9","","",21,null],[12,"10","","",21,null],[12,"11","","",21,null],[12,"12","","",21,null],[12,"13","","",21,null],[12,"14","","",21,null],[12,"15","","",21,null],[3,"ClUchar2","","",null,null],[12,"0","","",22,null],[12,"1","","",22,null],[3,"ClUchar3","","",null,null],[12,"0","","",23,null],[12,"1","","",23,null],[12,"2","","",23,null],[3,"ClUchar4","","",null,null],[12,"0","","",24,null],[12,"1","","",24,null],[12,"2","","",24,null],[12,"3","","",24,null],[3,"ClUchar8","","",null,null],[12,"0","","",25,null],[12,"1","","",25,null],[12,"2","","",25,null],[12,"3","","",25,null],[12,"4","","",25,null],[12,"5","","",25,null],[12,"6","","",25,null],[12,"7","","",25,null],[3,"ClUchar16","","",null,null],[12,"0","","",26,null],[12,"1","","",26,null],[12,"2","","",26,null],[12,"3","","",26,null],[12,"4","","",26,null],[12,"5","","",26,null],[12,"6","","",26,null],[12,"7","","",26,null],[12,"8","","",26,null],[12,"9","","",26,null],[12,"10","","",26,null],[12,"11","","",26,null],[12,"12","","",26,null],[12,"13","","",26,null],[12,"14","","",26,null],[12,"15","","",26,null],[3,"ClShort2","","",null,null],[12,"0","","",27,null],[12,"1","","",27,null],[3,"ClShort3","","",null,null],[12,"0","","",28,null],[12,"1","","",28,null],[12,"2","","",28,null],[3,"ClShort4","","",null,null],[12,"0","","",29,null],[12,"1","","",29,null],[12,"2","","",29,null],[12,"3","","",29,null],[3,"ClShort8","","",null,null],[12,"0","","",30,null],[12,"1","","",30,null],[12,"2","","",30,null],[12,"3","","",30,null],[12,"4","","",30,null],[12,"5","","",30,null],[12,"6","","",30,null],[12,"7","","",30,null],[3,"ClShort16","","",null,null],[12,"0","","",31,null],[12,"1","","",31,null],[12,"2","","",31,null],[12,"3","","",31,null],[12,"4","","",31,null],[12,"5","","",31,null],[12,"6","","",31,null],[12,"7","","",31,null],[12,"8","","",31,null],[12,"9","","",31,null],[12,"10","","",31,null],[12,"11","","",31,null],[12,"12","","",31,null],[12,"13","","",31,null],[12,"14","","",31,null],[12,"15","","",31,null],[3,"ClUshort2","","",null,null],[12,"0","","",32,null],[12,"1","","",32,null],[3,"ClUshort3","","",null,null],[12,"0","","",33,null],[12,"1","","",33,null],[12,"2","","",33,null],[3,"ClUshort4","","",null,null],[12,"0","","",34,null],[12,"1","","",34,null],[12,"2","","",34,null],[12,"3","","",34,null],[3,"ClUshort8","","",null,null],[12,"0","","",35,null],[12,"1","","",35,null],[12,"2","","",35,null],[12,"3","","",35,null],[12,"4","","",35,null],[12,"5","","",35,null],[12,"6","","",35,null],[12,"7","","",35,null],[3,"ClUshort16","","",null,null],[12,"0","","",36,null],[12,"1","","",36,null],[12,"2","","",36,null],[12,"3","","",36,null],[12,"4","","",36,null],[12,"5","","",36,null],[12,"6","","",36,null],[12,"7","","",36,null],[12,"8","","",36,null],[12,"9","","",36,null],[12,"10","","",36,null],[12,"11","","",36,null],[12,"12","","",36,null],[12,"13","","",36,null],[12,"14","","",36,null],[12,"15","","",36,null],[3,"ClInt2","","",null,null],[12,"0","","",37,null],[12,"1","","",37,null],[3,"ClInt3","","",null,null],[12,"0","","",38,null],[12,"1","","",38,null],[12,"2","","",38,null],[3,"ClInt4","","",null,null],[12,"0","","",39,null],[12,"1","","",39,null],[12,"2","","",39,null],[12,"3","","",39,null],[3,"ClInt8","","",null,null],[12,"0","","",40,null],[12,"1","","",40,null],[12,"2","","",40,null],[12,"3","","",40,null],[12,"4","","",40,null],[12,"5","","",40,null],[12,"6","","",40,null],[12,"7","","",40,null],[3,"ClInt16","","",null,null],[12,"0","","",41,null],[12,"1","","",41,null],[12,"2","","",41,null],[12,"3","","",41,null],[12,"4","","",41,null],[12,"5","","",41,null],[12,"6","","",41,null],[12,"7","","",41,null],[12,"8","","",41,null],[12,"9","","",41,null],[12,"10","","",41,null],[12,"11","","",41,null],[12,"12","","",41,null],[12,"13","","",41,null],[12,"14","","",41,null],[12,"15","","",41,null],[3,"ClUint2","","",null,null],[12,"0","","",42,null],[12,"1","","",42,null],[3,"ClUint3","","",null,null],[12,"0","","",43,null],[12,"1","","",43,null],[12,"2","","",43,null],[3,"ClUint4","","",null,null],[12,"0","","",44,null],[12,"1","","",44,null],[12,"2","","",44,null],[12,"3","","",44,null],[3,"ClUint8","","",null,null],[12,"0","","",45,null],[12,"1","","",45,null],[12,"2","","",45,null],[12,"3","","",45,null],[12,"4","","",45,null],[12,"5","","",45,null],[12,"6","","",45,null],[12,"7","","",45,null],[3,"ClUint16","","",null,null],[12,"0","","",46,null],[12,"1","","",46,null],[12,"2","","",46,null],[12,"3","","",46,null],[12,"4","","",46,null],[12,"5","","",46,null],[12,"6","","",46,null],[12,"7","","",46,null],[12,"8","","",46,null],[12,"9","","",46,null],[12,"10","","",46,null],[12,"11","","",46,null],[12,"12","","",46,null],[12,"13","","",46,null],[12,"14","","",46,null],[12,"15","","",46,null],[3,"ClLong1","","",null,null],[12,"0","","",47,null],[3,"ClLong2","","",null,null],[12,"0","","",48,null],[12,"1","","",48,null],[3,"ClLong3","","",null,null],[12,"0","","",49,null],[12,"1","","",49,null],[12,"2","","",49,null],[3,"ClLong4","","",null,null],[12,"0","","",50,null],[12,"1","","",50,null],[12,"2","","",50,null],[12,"3","","",50,null],[3,"ClLong8","","",null,null],[12,"0","","",51,null],[12,"1","","",51,null],[12,"2","","",51,null],[12,"3","","",51,null],[12,"4","","",51,null],[12,"5","","",51,null],[12,"6","","",51,null],[12,"7","","",51,null],[3,"ClLong16","","",null,null],[12,"0","","",52,null],[12,"1","","",52,null],[12,"2","","",52,null],[12,"3","","",52,null],[12,"4","","",52,null],[12,"5","","",52,null],[12,"6","","",52,null],[12,"7","","",52,null],[12,"8","","",52,null],[12,"9","","",52,null],[12,"10","","",52,null],[12,"11","","",52,null],[12,"12","","",52,null],[12,"13","","",52,null],[12,"14","","",52,null],[12,"15","","",52,null],[3,"ClUlong1","","",null,null],[12,"0","","",53,null],[3,"ClUlong2","","",null,null],[12,"0","","",54,null],[12,"1","","",54,null],[3,"ClUlong3","","",null,null],[12,"0","","",55,null],[12,"1","","",55,null],[12,"2","","",55,null],[3,"ClUlong4","","",null,null],[12,"0","","",56,null],[12,"1","","",56,null],[12,"2","","",56,null],[12,"3","","",56,null],[3,"ClUlong8","","",null,null],[12,"0","","",57,null],[12,"1","","",57,null],[12,"2","","",57,null],[12,"3","","",57,null],[12,"4","","",57,null],[12,"5","","",57,null],[12,"6","","",57,null],[12,"7","","",57,null],[3,"ClUlong16","","",null,null],[12,"0","","",58,null],[12,"1","","",58,null],[12,"2","","",58,null],[12,"3","","",58,null],[12,"4","","",58,null],[12,"5","","",58,null],[12,"6","","",58,null],[12,"7","","",58,null],[12,"8","","",58,null],[12,"9","","",58,null],[12,"10","","",58,null],[12,"11","","",58,null],[12,"12","","",58,null],[12,"13","","",58,null],[12,"14","","",58,null],[12,"15","","",58,null],[3,"ClFloat2","","",null,null],[12,"0","","",59,null],[12,"1","","",59,null],[3,"ClFloat3","","",null,null],[12,"0","","",60,null],[12,"1","","",60,null],[12,"2","","",60,null],[3,"ClFloat4","","",null,null],[12,"0","","",61,null],[12,"1","","",61,null],[12,"2","","",61,null],[12,"3","","",61,null],[3,"ClFloat8","","",null,null],[12,"0","","",62,null],[12,"1","","",62,null],[12,"2","","",62,null],[12,"3","","",62,null],[12,"4","","",62,null],[12,"5","","",62,null],[12,"6","","",62,null],[12,"7","","",62,null],[3,"ClFloat16","","",null,null],[12,"0","","",63,null],[12,"1","","",63,null],[12,"2","","",63,null],[12,"3","","",63,null],[12,"4","","",63,null],[12,"5","","",63,null],[12,"6","","",63,null],[12,"7","","",63,null],[12,"8","","",63,null],[12,"9","","",63,null],[12,"10","","",63,null],[12,"11","","",63,null],[12,"12","","",63,null],[12,"13","","",63,null],[12,"14","","",63,null],[12,"15","","",63,null],[3,"ClDouble2","","",null,null],[12,"0","","",64,null],[12,"1","","",64,null],[3,"ClDouble3","","",null,null],[12,"0","","",65,null],[12,"1","","",65,null],[12,"2","","",65,null],[3,"ClDouble4","","",null,null],[12,"0","","",66,null],[12,"1","","",66,null],[12,"2","","",66,null],[12,"3","","",66,null],[3,"ClDouble8","","",null,null],[12,"0","","",67,null],[12,"1","","",67,null],[12,"2","","",67,null],[12,"3","","",67,null],[12,"4","","",67,null],[12,"5","","",67,null],[12,"6","","",67,null],[12,"7","","",67,null],[3,"ClDouble16","","",null,null],[12,"0","","",68,null],[12,"1","","",68,null],[12,"2","","",68,null],[12,"3","","",68,null],[12,"4","","",68,null],[12,"5","","",68,null],[12,"6","","",68,null],[12,"7","","",68,null],[12,"8","","",68,null],[12,"9","","",68,null],[12,"10","","",68,null],[12,"11","","",68,null],[12,"12","","",68,null],[12,"13","","",68,null],[12,"14","","",68,null],[12,"15","","",68,null],[6,"cl_GLuint","","",null,null],[6,"cl_GLint","","",null,null],[6,"cl_GLenum","","",null,null],[0,"traits","ocl","Commonly used traits.",null,null],[8,"OclPrm","ocl::traits","A type usable within `OpenCL` kernels.",null,null],[8,"OclScl","","A scalar type usable within `OpenCL` kernels.",null,null],[8,"OclVec","","A vector type usable within `OpenCL` kernels.",null,null],[8,"WorkDims","","Types which have properties describing the amount of work to be done\nin multiple dimensions.",null,null],[10,"dim_count","","Returns the number of dimensions defined.",69,null],[10,"to_work_size","","Returns an array representing the amount of work to be done by a kernel.",69,null],[10,"to_work_offset","","Returns an array representing the offset of a work item or memory\nlocation.",69,null],[8,"MemLen","","Types which have properties allowing them to be used to define the size\nof a volume of memory.",null,null],[10,"to_len","","Returns the exact number of elements of a volume of memory\n(equivalent to `Vec::len()`).",70,null],[10,"to_len_padded","","Returns the length of a volumue of memory padded to the next\nmultiple of `incr`.",70,null],[10,"to_lens","","Returns the exact lengths of each dimension of a volume of memory.",70,null],[0,"builders","ocl","Builders and associated settings-related types.",null,null],[3,"ImageFormat","ocl::builders","Image format properties used by `Image`.",null,null],[12,"channel_order","","",71,null],[12,"channel_data_type","","",71,null],[3,"ImageDescriptor","","An image descriptor use in the creation of `Image`.",null,null],[12,"image_type","","",72,null],[12,"image_width","","",72,null],[12,"image_height","","",72,null],[12,"image_depth","","",72,null],[12,"image_array_size","","",72,null],[12,"image_row_pitch","","",72,null],[12,"image_slice_pitch","","",72,null],[12,"buffer","","",72,null],[3,"ContextProperties","","Context properties list.",null,null],[3,"ContextBuilder","","A builder for `Context`.",null,null],[3,"ProgramBuilder","","A builder for `Program`.",null,null],[3,"ImageBuilder","","A builder for `Image`.",null,null],[3,"ProQueBuilder","","A builder for `ProQue`.",null,null],[3,"BufferCmd","","A buffer command builder used to enqueue reads, writes, fills, and copies.",null,null],[3,"ImageCmd","","An image command builder for enqueuing reads, writes, fills, and copies.",null,null],[3,"KernelCmd","","A kernel command builder used to queue a kernel with a mix of default\nand optionally specified arguments.",null,null],[4,"BuildOpt","","A build option used by ProgramBuilder.",null,null],[13,"CmplrDefine","","",73,null],[12,"ident","ocl::builders::BuildOpt","",73,null],[12,"val","","",73,null],[13,"CmplrInclDir","ocl::builders","",73,null],[12,"path","ocl::builders::BuildOpt","",73,null],[13,"CmplrOther","ocl::builders","",73,null],[13,"IncludeDefine","","",73,null],[12,"ident","ocl::builders::BuildOpt","",73,null],[12,"val","","",73,null],[13,"IncludeRaw","ocl::builders","",73,null],[13,"IncludeRawEof","","",73,null],[4,"DeviceSpecifier","","Specifies [what boils down to] a list of devices.",null,null],[13,"All","","",74,null],[13,"First","","",74,null],[13,"Single","","",74,null],[13,"List","","",74,null],[13,"Indices","","",74,null],[13,"WrappingIndices","","",74,null],[13,"TypeFlags","","",74,null],[4,"BufferCmdKind","","The type of operation to be performed by a command.",null,null],[13,"Unspecified","","",75,null],[13,"Read","","",75,null],[12,"data","ocl::builders::BufferCmdKind","",75,null],[13,"Write","ocl::builders","",75,null],[12,"data","ocl::builders::BufferCmdKind","",75,null],[13,"Copy","ocl::builders","",75,null],[12,"dst_buffer","ocl::builders::BufferCmdKind","",75,null],[12,"dst_offset","","",75,null],[12,"len","","",75,null],[13,"Fill","ocl::builders","",75,null],[12,"pattern","ocl::builders::BufferCmdKind","",75,null],[12,"len","","",75,null],[13,"CopyToImage","ocl::builders","",75,null],[12,"image","ocl::builders::BufferCmdKind","",75,null],[12,"dst_origin","","",75,null],[12,"region","","",75,null],[13,"GLAcquire","ocl::builders","",75,null],[13,"GLRelease","","",75,null],[4,"BufferCmdDataShape","","The &#39;shape&#39; of the data to be processed, whether one or multi-dimensional.",null,null],[13,"Lin","","",76,null],[12,"offset","ocl::builders::BufferCmdDataShape","",76,null],[13,"Rect","ocl::builders","",76,null],[12,"src_origin","ocl::builders::BufferCmdDataShape","",76,null],[12,"dst_origin","","",76,null],[12,"region","","",76,null],[12,"src_row_pitch","","",76,null],[12,"src_slc_pitch","","",76,null],[12,"dst_row_pitch","","",76,null],[12,"dst_slc_pitch","","",76,null],[4,"ImageCmdKind","ocl::builders","The type of operation to be performed by a command.",null,null],[13,"Unspecified","","",77,null],[13,"Read","","",77,null],[12,"data","ocl::builders::ImageCmdKind","",77,null],[13,"Write","ocl::builders","",77,null],[12,"data","ocl::builders::ImageCmdKind","",77,null],[13,"Fill","ocl::builders","",77,null],[12,"color","ocl::builders::ImageCmdKind","",77,null],[13,"Copy","ocl::builders","",77,null],[12,"dst_image","ocl::builders::ImageCmdKind","",77,null],[12,"dst_origin","","",77,null],[13,"CopyToBuffer","ocl::builders","",77,null],[12,"buffer","ocl::builders::ImageCmdKind","",77,null],[12,"dst_origin","","",77,null],[13,"GLAcquire","ocl::builders","",77,null],[13,"GLRelease","","",77,null],[0,"flags","ocl","Bitflags for various parameter types.",null,null],[3,"DeviceType","ocl::flags","cl_device_type - bitfield",null,null],[17,"DEVICE_TYPE_DEFAULT","","",null,null],[17,"DEVICE_TYPE_CPU","","",null,null],[17,"DEVICE_TYPE_GPU","","",null,null],[17,"DEVICE_TYPE_ACCELERATOR","","",null,null],[17,"DEVICE_TYPE_CUSTOM","","",null,null],[17,"DEVICE_TYPE_ALL","","",null,null],[3,"DeviceFpConfig","","cl_device_fp_config - bitfield",null,null],[17,"FP_DENORM","","",null,null],[17,"FP_INF_NAN","","",null,null],[17,"FP_ROUND_TO_NEAREST","","",null,null],[17,"FP_ROUND_TO_ZERO","","",null,null],[17,"FP_ROUND_TO_INF","","",null,null],[17,"FP_FMA","","",null,null],[17,"FP_SOFT_FLOAT","","",null,null],[17,"FP_CORRECTLY_ROUNDED_DIVIDE_SQRT","","",null,null],[3,"DeviceExecCapabilities","","cl_device_exec_capabilities - bitfield",null,null],[17,"EXEC_KERNEL","","",null,null],[17,"EXEC_NATIVE_KERNEL","","",null,null],[3,"CommandQueueProperties","","cl_command_queue_properties - bitfield",null,null],[17,"QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE","","",null,null],[17,"QUEUE_PROFILING_ENABLE","","",null,null],[3,"DeviceAffinityDomain","","cl_device_affinity_domain",null,null],[17,"DEVICE_AFFINITY_DOMAIN_NUMA","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L4_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L3_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L2_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L1_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE","","",null,null],[3,"MemFlags","","cl_mem_flags - bitfield",null,null],[17,"MEM_READ_WRITE","","",null,null],[17,"MEM_WRITE_ONLY","","",null,null],[17,"MEM_READ_ONLY","","",null,null],[17,"MEM_USE_HOST_PTR","","",null,null],[17,"MEM_ALLOC_HOST_PTR","","",null,null],[17,"MEM_COPY_HOST_PTR","","",null,null],[17,"MEM_HOST_WRITE_ONLY","","",null,null],[17,"MEM_HOST_READ_ONLY","","",null,null],[17,"MEM_HOST_NO_ACCESS","","",null,null],[3,"MemMigrationFlags","","cl_mem_migration_flags - bitfield",null,null],[17,"MIGRATE_MEM_OBJECT_HOST","","",null,null],[17,"MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED","","",null,null],[3,"MapFlags","","cl_map_flags - bitfield",null,null],[17,"MAP_READ","","",null,null],[17,"MAP_WRITE","","",null,null],[17,"MAP_WRITE_INVALIDATE_REGION","","",null,null],[3,"ProgramBinaryType","","cl_program_binary_type",null,null],[17,"PROGRAM_BINARY_TYPE_NONE","","",null,null],[17,"PROGRAM_BINARY_TYPE_COMPILED_OBJECT","","",null,null],[17,"PROGRAM_BINARY_TYPE_LIBRARY","","",null,null],[17,"PROGRAM_BINARY_TYPE_EXECUTABLE","","",null,null],[3,"KernelArgTypeQualifier","","cl_kernel_arg_type_qualifer",null,null],[17,"KERNEL_ARG_TYPE_NONE","","",null,null],[17,"KERNEL_ARG_TYPE_CONST","","",null,null],[17,"KERNEL_ARG_TYPE_RESTRICT","","",null,null],[17,"KERNEL_ARG_TYPE_VOLATILE","","",null,null],[0,"enums","ocl","Enumerators for settings and information requests.",null,null],[4,"ImageChannelOrder","ocl::enums","Specifies the number of channels and the channel layout i.e. the memory layout in which channels are stored in the image. Valid values are described in the table below. (from SDK)",null,null],[13,"R","","",78,null],[13,"A","","",78,null],[13,"Rg","","",78,null],[13,"Ra","","",78,null],[13,"Rgb","","",78,null],[13,"Rgba","","",78,null],[13,"Bgra","","",78,null],[13,"Argb","","",78,null],[13,"Intensity","","",78,null],[13,"Luminance","","",78,null],[13,"Rx","","",78,null],[13,"Rgx","","",78,null],[13,"Rgbx","","",78,null],[13,"Depth","","",78,null],[13,"DepthStencil","","",78,null],[4,"ImageChannelDataType","","Describes the size of the channel data type. The number of bits per element determined by the image_channel_data_type and image_channel_order must be a power of two. The list of supported values is described in the table below. (from SDK)",null,null],[13,"SnormInt8","","",79,null],[13,"SnormInt16","","",79,null],[13,"UnormInt8","","",79,null],[13,"UnormInt16","","",79,null],[13,"UnormShort565","","",79,null],[13,"UnormShort555","","",79,null],[13,"UnormInt101010","","",79,null],[13,"SignedInt8","","",79,null],[13,"SignedInt16","","",79,null],[13,"SignedInt32","","",79,null],[13,"UnsignedInt8","","",79,null],[13,"UnsignedInt16","","",79,null],[13,"UnsignedInt32","","",79,null],[13,"HalfFloat","","",79,null],[13,"Float","","",79,null],[13,"UnormInt24","","",79,null],[4,"Cbool","","cl_bool",null,null],[13,"False","","",80,null],[13,"True","","",80,null],[4,"Polling","","cl_bool: Polling",null,null],[13,"Blocking","","",81,null],[13,"NonBlocking","","",81,null],[4,"PlatformInfo","","cl_platform_info",null,null],[13,"Profile","","",82,null],[13,"Version","","",82,null],[13,"Name","","",82,null],[13,"Vendor","","",82,null],[13,"Extensions","","",82,null],[4,"DeviceInfo","","cl_device_info",null,null],[13,"Type","","",83,null],[13,"VendorId","","",83,null],[13,"MaxComputeUnits","","",83,null],[13,"MaxWorkItemDimensions","","",83,null],[13,"MaxWorkGroupSize","","",83,null],[13,"MaxWorkItemSizes","","",83,null],[13,"PreferredVectorWidthChar","","",83,null],[13,"PreferredVectorWidthShort","","",83,null],[13,"PreferredVectorWidthInt","","",83,null],[13,"PreferredVectorWidthLong","","",83,null],[13,"PreferredVectorWidthFloat","","",83,null],[13,"PreferredVectorWidthDouble","","",83,null],[13,"MaxClockFrequency","","",83,null],[13,"AddressBits","","",83,null],[13,"MaxReadImageArgs","","",83,null],[13,"MaxWriteImageArgs","","",83,null],[13,"MaxMemAllocSize","","",83,null],[13,"Image2dMaxWidth","","",83,null],[13,"Image2dMaxHeight","","",83,null],[13,"Image3dMaxWidth","","",83,null],[13,"Image3dMaxHeight","","",83,null],[13,"Image3dMaxDepth","","",83,null],[13,"ImageSupport","","",83,null],[13,"MaxParameterSize","","",83,null],[13,"MaxSamplers","","",83,null],[13,"MemBaseAddrAlign","","",83,null],[13,"MinDataTypeAlignSize","","",83,null],[13,"SingleFpConfig","","",83,null],[13,"GlobalMemCacheType","","",83,null],[13,"GlobalMemCachelineSize","","",83,null],[13,"GlobalMemCacheSize","","",83,null],[13,"GlobalMemSize","","",83,null],[13,"MaxConstantBufferSize","","",83,null],[13,"MaxConstantArgs","","",83,null],[13,"LocalMemType","","",83,null],[13,"LocalMemSize","","",83,null],[13,"ErrorCorrectionSupport","","",83,null],[13,"ProfilingTimerResolution","","",83,null],[13,"EndianLittle","","",83,null],[13,"Available","","",83,null],[13,"CompilerAvailable","","",83,null],[13,"ExecutionCapabilities","","",83,null],[13,"QueueProperties","","",83,null],[13,"Name","","",83,null],[13,"Vendor","","",83,null],[13,"DriverVersion","","",83,null],[13,"Profile","","",83,null],[13,"Version","","",83,null],[13,"Extensions","","",83,null],[13,"Platform","","",83,null],[13,"DoubleFpConfig","","",83,null],[13,"HalfFpConfig","","",83,null],[13,"PreferredVectorWidthHalf","","",83,null],[13,"HostUnifiedMemory","","",83,null],[13,"NativeVectorWidthChar","","",83,null],[13,"NativeVectorWidthShort","","",83,null],[13,"NativeVectorWidthInt","","",83,null],[13,"NativeVectorWidthLong","","",83,null],[13,"NativeVectorWidthFloat","","",83,null],[13,"NativeVectorWidthDouble","","",83,null],[13,"NativeVectorWidthHalf","","",83,null],[13,"OpenclCVersion","","",83,null],[13,"LinkerAvailable","","",83,null],[13,"BuiltInKernels","","",83,null],[13,"ImageMaxBufferSize","","",83,null],[13,"ImageMaxArraySize","","",83,null],[13,"ParentDevice","","",83,null],[13,"PartitionMaxSubDevices","","",83,null],[13,"PartitionProperties","","",83,null],[13,"PartitionAffinityDomain","","",83,null],[13,"PartitionType","","",83,null],[13,"ReferenceCount","","",83,null],[13,"PreferredInteropUserSync","","",83,null],[13,"PrintfBufferSize","","",83,null],[13,"ImagePitchAlignment","","",83,null],[13,"ImageBaseAddressAlignment","","",83,null],[4,"DeviceMemCacheType","","cl_mem_cache_type",null,null],[13,"None","","",84,null],[13,"ReadOnlyCache","","",84,null],[13,"ReadWriteCache","","",84,null],[4,"DeviceLocalMemType","","cl_device_local_mem_type",null,null],[13,"None","","",85,null],[13,"Local","","",85,null],[13,"Global","","",85,null],[4,"ContextInfo","","cl_context_info",null,null],[13,"ReferenceCount","","",86,null],[13,"Devices","","",86,null],[13,"Properties","","",86,null],[13,"NumDevices","","",86,null],[4,"ContextProperty","","cl_context_info + cl_context_properties",null,null],[13,"Platform","","",87,null],[13,"InteropUserSync","","",87,null],[13,"D3d10DeviceKhr","","",87,null],[13,"GlContextKhr","","",87,null],[13,"EglDisplayKhr","","",87,null],[13,"GlxDisplayKhr","","",87,null],[13,"CglSharegroupKhr","","",87,null],[13,"WglHdcKhr","","",87,null],[13,"AdapterD3d9Khr","","",87,null],[13,"AdapterD3d9exKhr","","",87,null],[13,"AdapterDxvaKhr","","",87,null],[13,"D3d11DeviceKhr","","",87,null],[4,"ContextInfoOrPropertiesPointerType","","cl_context_info + cl_context_properties",null,null],[13,"Platform","","",88,null],[13,"InteropUserSync","","",88,null],[4,"DevicePartitionProperty","","[INCOMPLETE] cl_device_partition_property",null,null],[13,"Equally","","",89,null],[13,"ByCounts","","",89,null],[13,"ByCountsListEnd","","",89,null],[13,"ByAffinityDomain","","",89,null],[4,"CommandQueueInfo","","cl_command_queue_info",null,null],[13,"Context","","",90,null],[13,"Device","","",90,null],[13,"ReferenceCount","","",90,null],[13,"Properties","","",90,null],[4,"ChannelType","","cl_channel_type",null,null],[13,"SnormInt8","","",91,null],[13,"SnormInt16","","",91,null],[13,"UnormInt8","","",91,null],[13,"UnormInt16","","",91,null],[13,"UnormShort_565","","",91,null],[13,"UnormShort_555","","",91,null],[13,"UnormInt_101010","","",91,null],[13,"SignedInt8","","",91,null],[13,"SignedInt16","","",91,null],[13,"SignedInt32","","",91,null],[13,"UnsignedInt8","","",91,null],[13,"UnsignedInt16","","",91,null],[13,"UnsignedInt32","","",91,null],[13,"HalfFloat","","",91,null],[13,"Float","","",91,null],[13,"UnormInt24","","",91,null],[4,"MemObjectType","","cl_mem_object_type",null,null],[13,"Buffer","","",92,null],[13,"Image2d","","",92,null],[13,"Image3d","","",92,null],[13,"Image2dArray","","",92,null],[13,"Image1d","","",92,null],[13,"Image1dArray","","",92,null],[13,"Image1dBuffer","","",92,null],[4,"MemInfo","","cl_mem_info",null,null],[13,"Type","","",93,null],[13,"Flags","","",93,null],[13,"Size","","",93,null],[13,"HostPtr","","",93,null],[13,"MapCount","","",93,null],[13,"ReferenceCount","","",93,null],[13,"Context","","",93,null],[13,"AssociatedMemobject","","",93,null],[13,"Offset","","",93,null],[4,"ImageInfo","","cl_image_info",null,null],[13,"Format","","",94,null],[13,"ElementSize","","",94,null],[13,"RowPitch","","",94,null],[13,"SlicePitch","","",94,null],[13,"Width","","",94,null],[13,"Height","","",94,null],[13,"Depth","","",94,null],[13,"ArraySize","","",94,null],[13,"Buffer","","",94,null],[13,"NumMipLevels","","",94,null],[13,"NumSamples","","",94,null],[4,"AddressingMode","","cl_addressing_mode",null,null],[13,"None","","",95,null],[13,"ClampToEdge","","",95,null],[13,"Clamp","","",95,null],[13,"Repeat","","",95,null],[13,"MirroredRepeat","","",95,null],[4,"FilterMode","","cl_filter_mode",null,null],[13,"Nearest","","",96,null],[13,"Linear","","",96,null],[4,"SamplerInfo","","cl_sampler_info",null,null],[13,"ReferenceCount","","",97,null],[13,"Context","","",97,null],[13,"NormalizedCoords","","",97,null],[13,"AddressingMode","","",97,null],[13,"FilterMode","","",97,null],[4,"ProgramInfo","","cl_program_info",null,null],[13,"ReferenceCount","","",98,null],[13,"Context","","",98,null],[13,"NumDevices","","",98,null],[13,"Devices","","",98,null],[13,"Source","","",98,null],[13,"BinarySizes","","",98,null],[13,"Binaries","","",98,null],[13,"NumKernels","","",98,null],[13,"KernelNames","","",98,null],[4,"ProgramBuildInfo","","cl_program_build_info",null,null],[13,"BuildStatus","","",99,null],[13,"BuildOptions","","",99,null],[13,"BuildLog","","",99,null],[13,"BinaryType","","",99,null],[4,"ProgramBuildStatus","","cl_build_status",null,null],[13,"Success","","",100,null],[13,"None","","",100,null],[13,"Error","","",100,null],[13,"InProgress","","",100,null],[4,"KernelInfo","","cl_kernel_info",null,null],[13,"FunctionName","","",101,null],[13,"NumArgs","","",101,null],[13,"ReferenceCount","","",101,null],[13,"Context","","",101,null],[13,"Program","","",101,null],[13,"Attributes","","",101,null],[4,"KernelArgInfo","","cl_kernel_arg_info",null,null],[13,"AddressQualifier","","",102,null],[13,"AccessQualifier","","",102,null],[13,"TypeName","","",102,null],[13,"TypeQualifier","","",102,null],[13,"Name","","",102,null],[4,"KernelArgAddressQualifier","","cl_kernel_arg_address_qualifier",null,null],[13,"Global","","",103,null],[13,"Local","","",103,null],[13,"Constant","","",103,null],[13,"Private","","",103,null],[4,"KernelArgAccessQualifier","","cl_kernel_arg_access_qualifier",null,null],[13,"ReadOnly","","",104,null],[13,"WriteOnly","","",104,null],[13,"ReadWrite","","",104,null],[13,"None","","",104,null],[4,"KernelWorkGroupInfo","","cl_kernel_work_group_info",null,null],[13,"WorkGroupSize","","",105,null],[13,"CompileWorkGroupSize","","",105,null],[13,"LocalMemSize","","",105,null],[13,"PreferredWorkGroupSizeMultiple","","",105,null],[13,"PrivateMemSize","","",105,null],[13,"GlobalWorkSize","","",105,null],[4,"EventInfo","","cl_event_info",null,null],[13,"CommandQueue","","",106,null],[13,"CommandType","","",106,null],[13,"ReferenceCount","","",106,null],[13,"CommandExecutionStatus","","",106,null],[13,"Context","","",106,null],[4,"CommandType","","cl_command_type",null,null],[13,"NdrangeKernel","","",107,null],[13,"Task","","",107,null],[13,"NativeKernel","","",107,null],[13,"ReadBuffer","","",107,null],[13,"WriteBuffer","","",107,null],[13,"CopyBuffer","","",107,null],[13,"ReadImage","","",107,null],[13,"WriteImage","","",107,null],[13,"CopyImage","","",107,null],[13,"CopyImageToBuffer","","",107,null],[13,"CopyBufferToImage","","",107,null],[13,"MapBuffer","","",107,null],[13,"MapImage","","",107,null],[13,"UnmapMemObject","","",107,null],[13,"Marker","","",107,null],[13,"AcquireGlObjects","","",107,null],[13,"ReleaseGlObjects","","",107,null],[13,"ReadBufferRect","","",107,null],[13,"WriteBufferRect","","",107,null],[13,"CopyBufferRect","","",107,null],[13,"User","","",107,null],[13,"Barrier","","",107,null],[13,"MigrateMemObjects","","",107,null],[13,"FillBuffer","","",107,null],[13,"FillImage","","",107,null],[4,"CommandExecutionStatus","","command execution status",null,null],[13,"Complete","","",108,null],[13,"Running","","",108,null],[13,"Submitted","","",108,null],[13,"Queued","","",108,null],[4,"BufferCreateType","","cl_buffer_create_type",null,null],[13,"Region","","",109,null],[13,"__DUMMY","","",109,null],[4,"ProfilingInfo","","cl_profiling_info",null,null],[13,"Queued","","",110,null],[13,"Submit","","",110,null],[13,"Start","","",110,null],[13,"End","","",110,null],[4,"KernelArg","","[UNSAFE] Kernel argument option type.",null,null],[13,"Mem","","Type `T` is ignored.",111,null],[13,"MemNull","","Type `T` is ignored.",111,null],[13,"Sampler","","Type `T` is ignored.",111,null],[13,"SamplerNull","","Type `T` is ignored.",111,null],[13,"Scalar","","",111,null],[13,"Vector","","",111,null],[13,"Local","","Length in multiples of T (not bytes).",111,null],[13,"UnsafePointer","","`size`: size in bytes. Type `T` is ignored.",111,null],[12,"size","ocl::enums::KernelArg","",111,null],[12,"value","","",111,null],[4,"ContextPropertyValue","ocl::enums","",null,null],[13,"Platform","","",112,null],[13,"InteropUserSync","","",112,null],[13,"D3d10DeviceKhr","","",112,null],[13,"GlContextKhr","","",112,null],[13,"EglDisplayKhr","","",112,null],[13,"GlxDisplayKhr","","",112,null],[13,"CglSharegroupKhr","","",112,null],[13,"WglHdcKhr","","",112,null],[13,"AdapterD3d9Khr","","",112,null],[13,"AdapterD3d9exKhr","","",112,null],[13,"AdapterDxvaKhr","","",112,null],[13,"D3d11DeviceKhr","","",112,null],[4,"PlatformInfoResult","","Platform info result.",null,null],[13,"Profile","","",113,null],[13,"Version","","",113,null],[13,"Name","","",113,null],[13,"Vendor","","",113,null],[13,"Extensions","","",113,null],[13,"Error","","",113,null],[4,"DeviceInfoResult","","[UNSTABLE][INCOMPLETE] A device info result.",null,null],[13,"Type","","",114,null],[13,"VendorId","","",114,null],[13,"MaxComputeUnits","","",114,null],[13,"MaxWorkItemDimensions","","",114,null],[13,"MaxWorkGroupSize","","",114,null],[13,"MaxWorkItemSizes","","",114,null],[13,"PreferredVectorWidthChar","","",114,null],[13,"PreferredVectorWidthShort","","",114,null],[13,"PreferredVectorWidthInt","","",114,null],[13,"PreferredVectorWidthLong","","",114,null],[13,"PreferredVectorWidthFloat","","",114,null],[13,"PreferredVectorWidthDouble","","",114,null],[13,"MaxClockFrequency","","",114,null],[13,"AddressBits","","",114,null],[13,"MaxReadImageArgs","","",114,null],[13,"MaxWriteImageArgs","","",114,null],[13,"MaxMemAllocSize","","",114,null],[13,"Image2dMaxWidth","","",114,null],[13,"Image2dMaxHeight","","",114,null],[13,"Image3dMaxWidth","","",114,null],[13,"Image3dMaxHeight","","",114,null],[13,"Image3dMaxDepth","","",114,null],[13,"ImageSupport","","",114,null],[13,"MaxParameterSize","","",114,null],[13,"MaxSamplers","","",114,null],[13,"MemBaseAddrAlign","","",114,null],[13,"MinDataTypeAlignSize","","",114,null],[13,"SingleFpConfig","","",114,null],[13,"GlobalMemCacheType","","",114,null],[13,"GlobalMemCachelineSize","","",114,null],[13,"GlobalMemCacheSize","","",114,null],[13,"GlobalMemSize","","",114,null],[13,"MaxConstantBufferSize","","",114,null],[13,"MaxConstantArgs","","",114,null],[13,"LocalMemType","","",114,null],[13,"LocalMemSize","","",114,null],[13,"ErrorCorrectionSupport","","",114,null],[13,"ProfilingTimerResolution","","",114,null],[13,"EndianLittle","","",114,null],[13,"Available","","",114,null],[13,"CompilerAvailable","","",114,null],[13,"ExecutionCapabilities","","",114,null],[13,"QueueProperties","","",114,null],[13,"Name","","",114,null],[13,"Vendor","","",114,null],[13,"DriverVersion","","",114,null],[13,"Profile","","",114,null],[13,"Version","","",114,null],[13,"Extensions","","",114,null],[13,"Platform","","",114,null],[13,"DoubleFpConfig","","",114,null],[13,"HalfFpConfig","","",114,null],[13,"PreferredVectorWidthHalf","","",114,null],[13,"HostUnifiedMemory","","",114,null],[13,"NativeVectorWidthChar","","",114,null],[13,"NativeVectorWidthShort","","",114,null],[13,"NativeVectorWidthInt","","",114,null],[13,"NativeVectorWidthLong","","",114,null],[13,"NativeVectorWidthFloat","","",114,null],[13,"NativeVectorWidthDouble","","",114,null],[13,"NativeVectorWidthHalf","","",114,null],[13,"OpenclCVersion","","",114,null],[13,"LinkerAvailable","","",114,null],[13,"BuiltInKernels","","",114,null],[13,"ImageMaxBufferSize","","",114,null],[13,"ImageMaxArraySize","","",114,null],[13,"ParentDevice","","",114,null],[13,"PartitionMaxSubDevices","","",114,null],[13,"PartitionProperties","","",114,null],[13,"PartitionAffinityDomain","","",114,null],[13,"PartitionType","","",114,null],[13,"ReferenceCount","","",114,null],[13,"PreferredInteropUserSync","","",114,null],[13,"PrintfBufferSize","","",114,null],[13,"ImagePitchAlignment","","",114,null],[13,"ImageBaseAddressAlignment","","",114,null],[13,"Error","","",114,null],[4,"ContextInfoResult","","[UNSTABLE][INCOMPLETE] A context info result.",null,null],[13,"ReferenceCount","","",115,null],[13,"Devices","","",115,null],[13,"Properties","","",115,null],[13,"NumDevices","","",115,null],[13,"Error","","",115,null],[4,"CommandQueueInfoResult","","A command queue info result.",null,null],[13,"Context","","",116,null],[13,"Device","","",116,null],[13,"ReferenceCount","","",116,null],[13,"Properties","","",116,null],[13,"Error","","",116,null],[4,"MemInfoResult","","[UNSTABLE][INCOMPLETE] A mem info result. /",null,null],[13,"Type","","",117,null],[13,"Flags","","",117,null],[13,"Size","","",117,null],[13,"HostPtr","","",117,null],[13,"MapCount","","",117,null],[13,"ReferenceCount","","",117,null],[13,"Context","","",117,null],[13,"AssociatedMemobject","","",117,null],[13,"Offset","","",117,null],[13,"Error","","",117,null],[4,"ImageInfoResult","","An image info result.",null,null],[13,"Format","","",118,null],[13,"ElementSize","","",118,null],[13,"RowPitch","","",118,null],[13,"SlicePitch","","",118,null],[13,"Width","","",118,null],[13,"Height","","",118,null],[13,"Depth","","",118,null],[13,"ArraySize","","",118,null],[13,"Buffer","","",118,null],[13,"NumMipLevels","","",118,null],[13,"NumSamples","","",118,null],[13,"Error","","",118,null],[4,"SamplerInfoResult","","A sampler info result.",null,null],[13,"ReferenceCount","","",119,null],[13,"Context","","",119,null],[13,"NormalizedCoords","","",119,null],[13,"AddressingMode","","",119,null],[13,"FilterMode","","",119,null],[13,"Error","","",119,null],[4,"ProgramInfoResult","","A program info result.",null,null],[13,"ReferenceCount","","",120,null],[13,"Context","","",120,null],[13,"NumDevices","","",120,null],[13,"Devices","","",120,null],[13,"Source","","",120,null],[13,"BinarySizes","","",120,null],[13,"Binaries","","",120,null],[13,"NumKernels","","",120,null],[13,"KernelNames","","",120,null],[13,"Error","","",120,null],[4,"ProgramBuildInfoResult","","A program build info result.",null,null],[13,"BuildStatus","","",121,null],[13,"BuildOptions","","",121,null],[13,"BuildLog","","",121,null],[13,"BinaryType","","",121,null],[13,"Error","","",121,null],[4,"KernelInfoResult","","A kernel info result.",null,null],[13,"FunctionName","","",122,null],[13,"NumArgs","","",122,null],[13,"ReferenceCount","","",122,null],[13,"Context","","",122,null],[13,"Program","","",122,null],[13,"Attributes","","",122,null],[13,"Error","","",122,null],[4,"KernelArgInfoResult","","A kernel arg info result.",null,null],[13,"AddressQualifier","","",123,null],[13,"AccessQualifier","","",123,null],[13,"TypeName","","",123,null],[13,"TypeQualifier","","",123,null],[13,"Name","","",123,null],[13,"Error","","",123,null],[4,"KernelWorkGroupInfoResult","","A kernel work group info result.",null,null],[13,"WorkGroupSize","","",124,null],[13,"CompileWorkGroupSize","","",124,null],[13,"LocalMemSize","","",124,null],[13,"PreferredWorkGroupSizeMultiple","","",124,null],[13,"PrivateMemSize","","",124,null],[13,"GlobalWorkSize","","",124,null],[13,"Error","","",124,null],[4,"EventInfoResult","","An event info result.",null,null],[13,"CommandQueue","","",125,null],[13,"CommandType","","",125,null],[13,"ReferenceCount","","",125,null],[13,"CommandExecutionStatus","","",125,null],[13,"Context","","",125,null],[13,"Error","","",125,null],[4,"ProfilingInfoResult","","A profiling info result.",null,null],[13,"Queued","","",126,null],[13,"Submit","","",126,null],[13,"Start","","",126,null],[13,"End","","",126,null],[13,"Error","","",126,null],[4,"Status","","TODO: MOVE ME AND LEAVE CONSTS AS THEY WERE.\nThe status of an OpenCL API call. Used for returning success/error codes.",null,null],[13,"CL_SUCCESS","","",127,null],[13,"CL_DEVICE_NOT_FOUND","","",127,null],[13,"CL_DEVICE_NOT_AVAILABLE","","",127,null],[13,"CL_COMPILER_NOT_AVAILABLE","","",127,null],[13,"CL_MEM_OBJECT_ALLOCATION_FAILURE","","",127,null],[13,"CL_OUT_OF_RESOURCES","","",127,null],[13,"CL_OUT_OF_HOST_MEMORY","","",127,null],[13,"CL_PROFILING_INFO_NOT_AVAILABLE","","",127,null],[13,"CL_MEM_COPY_OVERLAP","","",127,null],[13,"CL_IMAGE_FORMAT_MISMATCH","","",127,null],[13,"CL_IMAGE_FORMAT_NOT_SUPPORTED","","",127,null],[13,"CL_BUILD_PROGRAM_FAILURE","","",127,null],[13,"CL_MAP_FAILURE","","",127,null],[13,"CL_MISALIGNED_SUB_BUFFER_OFFSET","","",127,null],[13,"CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST","","",127,null],[13,"CL_COMPILE_PROGRAM_FAILURE","","",127,null],[13,"CL_LINKER_NOT_AVAILABLE","","",127,null],[13,"CL_LINK_PROGRAM_FAILURE","","",127,null],[13,"CL_DEVICE_PARTITION_FAILED","","",127,null],[13,"CL_KERNEL_ARG_INFO_NOT_AVAILABLE","","",127,null],[13,"CL_INVALID_VALUE","","",127,null],[13,"CL_INVALID_DEVICE_TYPE","","",127,null],[13,"CL_INVALID_PLATFORM","","",127,null],[13,"CL_INVALID_DEVICE","","",127,null],[13,"CL_INVALID_CONTEXT","","",127,null],[13,"CL_INVALID_QUEUE_PROPERTIES","","",127,null],[13,"CL_INVALID_COMMAND_QUEUE","","",127,null],[13,"CL_INVALID_HOST_PTR","","",127,null],[13,"CL_INVALID_MEM_OBJECT","","",127,null],[13,"CL_INVALID_IMAGE_FORMAT_DESCRIPTOR","","",127,null],[13,"CL_INVALID_IMAGE_SIZE","","",127,null],[13,"CL_INVALID_SAMPLER","","",127,null],[13,"CL_INVALID_BINARY","","",127,null],[13,"CL_INVALID_BUILD_OPTIONS","","",127,null],[13,"CL_INVALID_PROGRAM","","",127,null],[13,"CL_INVALID_PROGRAM_EXECUTABLE","","",127,null],[13,"CL_INVALID_KERNEL_NAME","","",127,null],[13,"CL_INVALID_KERNEL_DEFINITION","","",127,null],[13,"CL_INVALID_KERNEL","","",127,null],[13,"CL_INVALID_ARG_INDEX","","",127,null],[13,"CL_INVALID_ARG_VALUE","","",127,null],[13,"CL_INVALID_ARG_SIZE","","",127,null],[13,"CL_INVALID_KERNEL_ARGS","","",127,null],[13,"CL_INVALID_WORK_DIMENSION","","",127,null],[13,"CL_INVALID_WORK_GROUP_SIZE","","",127,null],[13,"CL_INVALID_WORK_ITEM_SIZE","","",127,null],[13,"CL_INVALID_GLOBAL_OFFSET","","",127,null],[13,"CL_INVALID_EVENT_WAIT_LIST","","",127,null],[13,"CL_INVALID_EVENT","","",127,null],[13,"CL_INVALID_OPERATION","","",127,null],[13,"CL_INVALID_GL_OBJECT","","",127,null],[13,"CL_INVALID_BUFFER_SIZE","","",127,null],[13,"CL_INVALID_MIP_LEVEL","","",127,null],[13,"CL_INVALID_GLOBAL_WORK_SIZE","","",127,null],[13,"CL_INVALID_PROPERTY","","",127,null],[13,"CL_INVALID_IMAGE_DESCRIPTOR","","",127,null],[13,"CL_INVALID_COMPILER_OPTIONS","","",127,null],[13,"CL_INVALID_LINKER_OPTIONS","","",127,null],[13,"CL_INVALID_DEVICE_PARTITION_COUNT","","",127,null],[13,"CL_INVALID_PIPE_SIZE","","",127,null],[13,"CL_INVALID_DEVICE_QUEUE","","",127,null],[13,"CL_PLATFORM_NOT_FOUND_KHR","","",127,null],[4,"DeviceSpecifier","","Specifies [what boils down to] a list of devices.",null,null],[13,"All","","",74,null],[13,"First","","",74,null],[13,"Single","","",74,null],[13,"List","","",74,null],[13,"Indices","","",74,null],[13,"WrappingIndices","","",74,null],[13,"TypeFlags","","",74,null],[4,"BufferCmdKind","","The type of operation to be performed by a command.",null,null],[13,"Unspecified","","",75,null],[13,"Read","","",75,null],[12,"data","ocl::enums::BufferCmdKind","",75,null],[13,"Write","ocl::enums","",75,null],[12,"data","ocl::enums::BufferCmdKind","",75,null],[13,"Copy","ocl::enums","",75,null],[12,"dst_buffer","ocl::enums::BufferCmdKind","",75,null],[12,"dst_offset","","",75,null],[12,"len","","",75,null],[13,"Fill","ocl::enums","",75,null],[12,"pattern","ocl::enums::BufferCmdKind","",75,null],[12,"len","","",75,null],[13,"CopyToImage","ocl::enums","",75,null],[12,"image","ocl::enums::BufferCmdKind","",75,null],[12,"dst_origin","","",75,null],[12,"region","","",75,null],[13,"GLAcquire","ocl::enums","",75,null],[13,"GLRelease","","",75,null],[4,"BufferCmdDataShape","","The &#39;shape&#39; of the data to be processed, whether one or multi-dimensional.",null,null],[13,"Lin","","",76,null],[12,"offset","ocl::enums::BufferCmdDataShape","",76,null],[13,"Rect","ocl::enums","",76,null],[12,"src_origin","ocl::enums::BufferCmdDataShape","",76,null],[12,"dst_origin","","",76,null],[12,"region","","",76,null],[12,"src_row_pitch","","",76,null],[12,"src_slc_pitch","","",76,null],[12,"dst_row_pitch","","",76,null],[12,"dst_slc_pitch","","",76,null],[11,"bitxor","ocl::flags","Returns the left flags, but with all the right flags toggled.",128,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",129,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",130,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",131,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",132,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",133,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",134,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",135,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",136,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",137,null],[11,"from","ocl::enums","",113,{"inputs":[{"name":"error"}],"output":{"name":"platforminforesult"}}],[11,"from","","",113,{"inputs":[{"name":"intostringerror"}],"output":{"name":"platforminforesult"}}],[11,"from","","",113,{"inputs":[{"name":"nulerror"}],"output":{"name":"platforminforesult"}}],[11,"from","","",114,{"inputs":[{"name":"error"}],"output":{"name":"deviceinforesult"}}],[11,"from","","",115,{"inputs":[{"name":"error"}],"output":{"name":"contextinforesult"}}],[11,"from","","",116,{"inputs":[{"name":"error"}],"output":{"name":"commandqueueinforesult"}}],[11,"from","","",117,{"inputs":[{"name":"error"}],"output":{"name":"meminforesult"}}],[11,"from","","",118,{"inputs":[{"name":"error"}],"output":{"name":"imageinforesult"}}],[11,"from","","",119,{"inputs":[{"name":"error"}],"output":{"name":"samplerinforesult"}}],[11,"from","","",120,{"inputs":[{"name":"error"}],"output":{"name":"programinforesult"}}],[11,"from","","",121,{"inputs":[{"name":"error"}],"output":{"name":"programbuildinforesult"}}],[11,"from","","",122,{"inputs":[{"name":"error"}],"output":{"name":"kernelinforesult"}}],[11,"from","","",123,{"inputs":[{"name":"error"}],"output":{"name":"kernelarginforesult"}}],[11,"from","","",124,{"inputs":[{"name":"error"}],"output":{"name":"kernelworkgroupinforesult"}}],[11,"from","","",125,{"inputs":[{"name":"error"}],"output":{"name":"eventinforesult"}}],[11,"from","","",126,{"inputs":[{"name":"error"}],"output":{"name":"profilinginforesult"}}],[11,"from","ocl::aliases","",60,null],[11,"from","","",60,null],[11,"from","ocl","",3,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"intostringerror"}],"output":{"name":"error"}}],[11,"cmp","ocl::flags","",128,null],[11,"cmp","","",129,null],[11,"cmp","","",130,null],[11,"cmp","","",131,null],[11,"cmp","","",132,null],[11,"cmp","","",133,null],[11,"cmp","","",134,null],[11,"cmp","","",135,null],[11,"cmp","","",136,null],[11,"cmp","","",137,null],[11,"not","","Returns the complement of this set of flags.",128,null],[11,"not","","Returns the complement of this set of flags.",129,null],[11,"not","","Returns the complement of this set of flags.",130,null],[11,"not","","Returns the complement of this set of flags.",131,null],[11,"not","","Returns the complement of this set of flags.",132,null],[11,"not","","Returns the complement of this set of flags.",133,null],[11,"not","","Returns the complement of this set of flags.",134,null],[11,"not","","Returns the complement of this set of flags.",135,null],[11,"not","","Returns the complement of this set of flags.",136,null],[11,"not","","Returns the complement of this set of flags.",137,null],[11,"add","ocl::aliases","",60,null],[11,"add","","",61,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"eq","ocl::flags","",128,null],[11,"ne","","",128,null],[11,"eq","","",129,null],[11,"ne","","",129,null],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",135,null],[11,"ne","","",135,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","ocl::enums","",127,null],[11,"eq","","",78,null],[11,"eq","","",79,null],[11,"eq","","",80,null],[11,"eq","","",81,null],[11,"eq","","",82,null],[11,"eq","","",83,null],[11,"eq","","",84,null],[11,"eq","","",85,null],[11,"eq","","",86,null],[11,"eq","","",87,null],[11,"eq","","",88,null],[11,"eq","","",89,null],[11,"eq","","",90,null],[11,"eq","","",91,null],[11,"eq","","",92,null],[11,"eq","","",93,null],[11,"eq","","",94,null],[11,"eq","","",95,null],[11,"eq","","",96,null],[11,"eq","","",97,null],[11,"eq","","",98,null],[11,"eq","","",99,null],[11,"eq","","",100,null],[11,"eq","","",101,null],[11,"eq","","",102,null],[11,"eq","","",103,null],[11,"eq","","",104,null],[11,"eq","","",105,null],[11,"eq","","",106,null],[11,"eq","","",107,null],[11,"eq","","",108,null],[11,"eq","","",109,null],[11,"eq","","",110,null],[11,"default","ocl::flags","",128,{"inputs":[],"output":{"name":"devicetype"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"memflags"}}],[11,"default","ocl::aliases","",17,{"inputs":[],"output":{"name":"clchar2"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"clchar3"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"clchar4"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"clchar8"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"clchar16"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"cluchar2"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"cluchar3"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"cluchar4"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"cluchar8"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"cluchar16"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"clshort2"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"clshort3"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"clshort4"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"clshort8"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"clshort16"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"clushort2"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"clushort3"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"clushort4"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"clushort8"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"clushort16"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"clint2"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"clint3"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"clint4"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"clint8"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"clint16"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"cluint2"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"cluint3"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"cluint4"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"cluint8"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"cluint16"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"cllong1"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"cllong2"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"cllong3"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"cllong4"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"cllong8"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"cllong16"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"clulong1"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"clulong2"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"clulong3"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"clulong4"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"clulong8"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"clulong16"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"clfloat2"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"clfloat3"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"clfloat4"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"clfloat8"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"clfloat16"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"cldouble2"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"cldouble3"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"cldouble4"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"cldouble8"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"cldouble16"}}],[11,"from_iter","ocl::flags","",128,{"inputs":[{"name":"t"}],"output":{"name":"devicetype"}}],[11,"from_iter","","",129,{"inputs":[{"name":"t"}],"output":{"name":"devicefpconfig"}}],[11,"from_iter","","",130,{"inputs":[{"name":"t"}],"output":{"name":"deviceexeccapabilities"}}],[11,"from_iter","","",131,{"inputs":[{"name":"t"}],"output":{"name":"commandqueueproperties"}}],[11,"from_iter","","",132,{"inputs":[{"name":"t"}],"output":{"name":"deviceaffinitydomain"}}],[11,"from_iter","","",133,{"inputs":[{"name":"t"}],"output":{"name":"memflags"}}],[11,"from_iter","","",134,{"inputs":[{"name":"t"}],"output":{"name":"memmigrationflags"}}],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"from_iter","","",136,{"inputs":[{"name":"t"}],"output":{"name":"programbinarytype"}}],[11,"from_iter","","",137,{"inputs":[{"name":"t"}],"output":{"name":"kernelargtypequalifier"}}],[11,"sub","","Returns the set difference of the two sets of flags.",128,null],[11,"sub","","Returns the set difference of the two sets of flags.",129,null],[11,"sub","","Returns the set difference of the two sets of flags.",130,null],[11,"sub","","Returns the set difference of the two sets of flags.",131,null],[11,"sub","","Returns the set difference of the two sets of flags.",132,null],[11,"sub","","Returns the set difference of the two sets of flags.",133,null],[11,"sub","","Returns the set difference of the two sets of flags.",134,null],[11,"sub","","Returns the set difference of the two sets of flags.",135,null],[11,"sub","","Returns the set difference of the two sets of flags.",136,null],[11,"sub","","Returns the set difference of the two sets of flags.",137,null],[11,"hash","","",128,null],[11,"hash","","",129,null],[11,"hash","","",130,null],[11,"hash","","",131,null],[11,"hash","","",132,null],[11,"hash","","",133,null],[11,"hash","","",134,null],[11,"hash","","",135,null],[11,"hash","","",136,null],[11,"hash","","",137,null],[11,"hash","ocl::enums","",87,null],[11,"description","","",113,null],[11,"description","","",114,null],[11,"description","","",115,null],[11,"description","","",116,null],[11,"description","","",117,null],[11,"description","","",118,null],[11,"description","","",119,null],[11,"description","","",120,null],[11,"description","","",121,null],[11,"description","","",122,null],[11,"description","","",123,null],[11,"description","","",124,null],[11,"description","","",125,null],[11,"description","","",126,null],[11,"description","ocl","",3,null],[11,"clone","ocl::enums","",112,null],[11,"clone","ocl::builders","",138,null],[11,"clone","","",71,null],[11,"clone","","",72,null],[11,"clone","ocl::aliases","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",62,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"clone","","",68,null],[11,"clone","ocl::flags","",128,null],[11,"clone","","",129,null],[11,"clone","","",130,null],[11,"clone","","",131,null],[11,"clone","","",132,null],[11,"clone","","",133,null],[11,"clone","","",134,null],[11,"clone","","",135,null],[11,"clone","","",136,null],[11,"clone","","",137,null],[11,"clone","ocl::enums","",127,null],[11,"clone","","",78,null],[11,"clone","","",79,null],[11,"clone","","",80,null],[11,"clone","","",81,null],[11,"clone","","",82,null],[11,"clone","","",83,null],[11,"clone","","",84,null],[11,"clone","","",85,null],[11,"clone","","",86,null],[11,"clone","","",87,null],[11,"clone","","",88,null],[11,"clone","","",89,null],[11,"clone","","",90,null],[11,"clone","","",91,null],[11,"clone","","",92,null],[11,"clone","","",93,null],[11,"clone","","",94,null],[11,"clone","","",95,null],[11,"clone","","",96,null],[11,"clone","","",97,null],[11,"clone","","",98,null],[11,"clone","","",99,null],[11,"clone","","",100,null],[11,"clone","","",101,null],[11,"clone","","",102,null],[11,"clone","","",103,null],[11,"clone","","",104,null],[11,"clone","","",105,null],[11,"clone","","",106,null],[11,"clone","","",107,null],[11,"clone","","",108,null],[11,"clone","","",109,null],[11,"clone","","",110,null],[11,"fmt","","",113,null],[11,"fmt","","",114,null],[11,"fmt","","",115,null],[11,"fmt","","",116,null],[11,"fmt","","",117,null],[11,"fmt","","",118,null],[11,"fmt","","",119,null],[11,"fmt","","",120,null],[11,"fmt","","",121,null],[11,"fmt","","",122,null],[11,"fmt","","",123,null],[11,"fmt","","",124,null],[11,"fmt","","",125,null],[11,"fmt","","",126,null],[11,"fmt","ocl","",3,null],[11,"fmt","ocl::enums","",111,null],[11,"fmt","","",112,null],[11,"fmt","ocl::builders","",138,null],[11,"fmt","","",71,null],[11,"fmt","","",72,null],[11,"fmt","ocl::aliases","",17,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"fmt","","",20,null],[11,"fmt","","",21,null],[11,"fmt","","",22,null],[11,"fmt","","",23,null],[11,"fmt","","",24,null],[11,"fmt","","",25,null],[11,"fmt","","",26,null],[11,"fmt","","",27,null],[11,"fmt","","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",30,null],[11,"fmt","","",31,null],[11,"fmt","","",32,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"fmt","","",37,null],[11,"fmt","","",38,null],[11,"fmt","","",39,null],[11,"fmt","","",40,null],[11,"fmt","","",41,null],[11,"fmt","","",42,null],[11,"fmt","","",43,null],[11,"fmt","","",44,null],[11,"fmt","","",45,null],[11,"fmt","","",46,null],[11,"fmt","","",47,null],[11,"fmt","","",48,null],[11,"fmt","","",49,null],[11,"fmt","","",50,null],[11,"fmt","","",51,null],[11,"fmt","","",52,null],[11,"fmt","","",53,null],[11,"fmt","","",54,null],[11,"fmt","","",55,null],[11,"fmt","","",56,null],[11,"fmt","","",57,null],[11,"fmt","","",58,null],[11,"fmt","","",59,null],[11,"fmt","","",60,null],[11,"fmt","","",61,null],[11,"fmt","","",62,null],[11,"fmt","","",63,null],[11,"fmt","","",64,null],[11,"fmt","","",65,null],[11,"fmt","","",66,null],[11,"fmt","","",67,null],[11,"fmt","","",68,null],[11,"fmt","ocl::flags","",128,null],[11,"fmt","","",129,null],[11,"fmt","","",130,null],[11,"fmt","","",131,null],[11,"fmt","","",132,null],[11,"fmt","","",133,null],[11,"fmt","","",134,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",137,null],[11,"fmt","ocl::enums","",127,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"fmt","","",81,null],[11,"fmt","","",82,null],[11,"fmt","","",83,null],[11,"fmt","","",84,null],[11,"fmt","","",85,null],[11,"fmt","","",86,null],[11,"fmt","","",87,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"fmt","","",92,null],[11,"fmt","","",93,null],[11,"fmt","","",94,null],[11,"fmt","","",95,null],[11,"fmt","","",96,null],[11,"fmt","","",97,null],[11,"fmt","","",98,null],[11,"fmt","","",99,null],[11,"fmt","","",100,null],[11,"fmt","","",101,null],[11,"fmt","","",102,null],[11,"fmt","","",103,null],[11,"fmt","","",104,null],[11,"fmt","","",105,null],[11,"fmt","","",106,null],[11,"fmt","","",107,null],[11,"fmt","","",108,null],[11,"fmt","","",109,null],[11,"fmt","","",110,null],[11,"bitor","ocl::flags","Returns the union of the two sets of flags.",128,null],[11,"bitor","","Returns the union of the two sets of flags.",129,null],[11,"bitor","","Returns the union of the two sets of flags.",130,null],[11,"bitor","","Returns the union of the two sets of flags.",131,null],[11,"bitor","","Returns the union of the two sets of flags.",132,null],[11,"bitor","","Returns the union of the two sets of flags.",133,null],[11,"bitor","","Returns the union of the two sets of flags.",134,null],[11,"bitor","","Returns the union of the two sets of flags.",135,null],[11,"bitor","","Returns the union of the two sets of flags.",136,null],[11,"bitor","","Returns the union of the two sets of flags.",137,null],[11,"fmt","ocl::enums","",113,null],[11,"fmt","","",114,null],[11,"fmt","","",115,null],[11,"fmt","","",116,null],[11,"fmt","","",117,null],[11,"fmt","","",118,null],[11,"fmt","","",119,null],[11,"fmt","","",120,null],[11,"fmt","","",121,null],[11,"fmt","","",122,null],[11,"fmt","","",123,null],[11,"fmt","","",124,null],[11,"fmt","","",125,null],[11,"fmt","","",126,null],[11,"fmt","ocl","",3,null],[11,"fmt","ocl::enums","",127,null],[11,"into","","",113,null],[11,"into","","",114,null],[11,"into","","",115,null],[11,"into","","",116,null],[11,"into","","",117,null],[11,"into","","",118,null],[11,"into","","",119,null],[11,"into","","",120,null],[11,"into","","",121,null],[11,"into","","",122,null],[11,"into","","",123,null],[11,"into","","",124,null],[11,"into","","",125,null],[11,"into","","",126,null],[11,"into","ocl::builders","",138,null],[11,"into","ocl","",3,null],[11,"partial_cmp","ocl::flags","",128,null],[11,"lt","","",128,null],[11,"le","","",128,null],[11,"gt","","",128,null],[11,"ge","","",128,null],[11,"partial_cmp","","",129,null],[11,"lt","","",129,null],[11,"le","","",129,null],[11,"gt","","",129,null],[11,"ge","","",129,null],[11,"partial_cmp","","",130,null],[11,"lt","","",130,null],[11,"le","","",130,null],[11,"gt","","",130,null],[11,"ge","","",130,null],[11,"partial_cmp","","",131,null],[11,"lt","","",131,null],[11,"le","","",131,null],[11,"gt","","",131,null],[11,"ge","","",131,null],[11,"partial_cmp","","",132,null],[11,"lt","","",132,null],[11,"le","","",132,null],[11,"gt","","",132,null],[11,"ge","","",132,null],[11,"partial_cmp","","",133,null],[11,"lt","","",133,null],[11,"le","","",133,null],[11,"gt","","",133,null],[11,"ge","","",133,null],[11,"partial_cmp","","",134,null],[11,"lt","","",134,null],[11,"le","","",134,null],[11,"gt","","",134,null],[11,"ge","","",134,null],[11,"partial_cmp","","",135,null],[11,"lt","","",135,null],[11,"le","","",135,null],[11,"gt","","",135,null],[11,"ge","","",135,null],[11,"partial_cmp","","",136,null],[11,"lt","","",136,null],[11,"le","","",136,null],[11,"gt","","",136,null],[11,"ge","","",136,null],[11,"partial_cmp","","",137,null],[11,"lt","","",137,null],[11,"le","","",137,null],[11,"gt","","",137,null],[11,"ge","","",137,null],[11,"from_i64","ocl::enums","",127,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",127,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",78,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",78,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",79,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",79,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",80,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",80,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",81,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",81,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",82,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",82,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",83,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",83,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",84,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",84,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",85,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",86,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",86,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",87,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",87,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",88,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",88,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",89,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",89,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",90,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",90,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",91,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",91,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",92,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",92,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",93,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",93,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",94,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",94,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",95,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",95,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",96,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",96,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",97,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",97,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",98,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",98,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",99,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",99,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",100,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",100,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",101,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",101,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",102,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",102,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",103,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",103,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",104,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",104,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",105,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",105,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",106,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",106,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",107,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",107,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",108,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",108,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",109,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",109,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",110,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",110,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"bitand","ocl::flags","Returns the intersection between the two sets of flags.",128,null],[11,"bitand","","Returns the intersection between the two sets of flags.",129,null],[11,"bitand","","Returns the intersection between the two sets of flags.",130,null],[11,"bitand","","Returns the intersection between the two sets of flags.",131,null],[11,"bitand","","Returns the intersection between the two sets of flags.",132,null],[11,"bitand","","Returns the intersection between the two sets of flags.",133,null],[11,"bitand","","Returns the intersection between the two sets of flags.",134,null],[11,"bitand","","Returns the intersection between the two sets of flags.",135,null],[11,"bitand","","Returns the intersection between the two sets of flags.",136,null],[11,"bitand","","Returns the intersection between the two sets of flags.",137,null],[11,"new","ocl","Returns a new `Error` with the description string: `desc`.",3,{"inputs":[{"name":"s"}],"output":{"name":"error"}}],[11,"err","","Returns a new `ocl::Result::Err` containing an `ocl::Error::String`\nvariant with the given description.",3,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"err_status","","Returns a new `ocl::Result::Err` containing an `ocl::Error` with the\ngiven error code and description.",3,{"inputs":[{"name":"i32"},{"name":"str"},{"name":"s"}],"output":{"name":"result"}}],[11,"err_conversion","","Returns a new `ocl::Result::Err` containing an\n`ocl::Error::Conversion` variant with the given description.",3,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"prepend","","If this is a `String` variant, concatenate `txt` to the front of the\ncontained string. Otherwise, do nothing at all.",3,null],[11,"status","","Returns the error status code for `Status` variants.",3,null],[11,"fmt","ocl::builders","",74,null],[11,"clone","","",74,null],[11,"all","","Returns a `DeviceSpecifier::All` variant which specifies all\ndevices on a platform.",74,null],[11,"first","","Returns a `DeviceSpecifier::First` variant which specifies only\nthe first device on a platform.",74,null],[11,"single","","Returns a `DeviceSpecifier::Single` variant which specifies a single\ndevice.",74,null],[11,"list","","Returns a `DeviceSpecifier::List` variant which specifies a list of\ndevices.",74,null],[11,"indices","","Returns a `DeviceSpecifier::Indices` variant which specifies a list of\ndevices by index.",74,null],[11,"wrapping_indices","","Returns a `DeviceSpecifier::WrappingIndices` variant, specifying a\nlist of devices by indices which are wrapped around (simply using the\nmodulo operator) so that every index is always valid.",74,null],[11,"type_flags","","Returns a `DeviceSpecifier::TypeFlags` variant which specifies a list\nof devices using a conventional bitfield.",74,null],[11,"to_device_list","","Returns the list of devices matching the parameters specified by this\n`DeviceSpecifier`",74,null],[11,"default","","",74,{"inputs":[],"output":{"name":"devicespecifier"}}],[11,"from","","",74,{"inputs":[{"name":"usize"}],"output":{"name":"devicespecifier"}}],[11,"from","","",74,null],[11,"from","","",74,{"inputs":[{"name":"vec"}],"output":{"name":"devicespecifier"}}],[11,"from","","",74,null],[11,"from","","",74,{"inputs":[{"name":"vec"}],"output":{"name":"devicespecifier"}}],[11,"from","","",74,{"inputs":[{"name":"device"}],"output":{"name":"devicespecifier"}}],[11,"from","","",74,{"inputs":[{"name":"device"}],"output":{"name":"devicespecifier"}}],[11,"from","","",74,{"inputs":[{"name":"devicetype"}],"output":{"name":"devicespecifier"}}],[11,"new","","Creates a new `ContextBuilder`",139,{"inputs":[],"output":{"name":"contextbuilder"}}],[11,"build","","Returns a new `Context` with the parameters hitherinforthto specified (say what?).",139,null],[11,"properties","","Specify context properties directly.",139,null],[11,"property","","Specify a context property.",139,null],[11,"platform","","Specifies a platform.",139,null],[11,"gl_context","","Specifies an OpenGL context to associate with.",139,null],[11,"devices","","Specifies a `DeviceSpecifer` which specifies how specifically\nthe relevant devices shall be specified.",139,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"cmplr_def","","Returns a `BuildOpt::CmplrDefine`.",73,{"inputs":[{"name":"s"},{"name":"i32"}],"output":{"name":"buildopt"}}],[11,"include_def","","Returns a `BuildOpt::IncludeDefine`.",73,{"inputs":[{"name":"s"},{"name":"string"}],"output":{"name":"buildopt"}}],[11,"clone","","",140,null],[11,"fmt","","",140,null],[11,"new","","Returns a new, empty, build configuration object.",140,{"inputs":[],"output":{"name":"programbuilder"}}],[11,"build","","Returns a newly built Program.",140,null],[11,"cmplr_def","","Adds a build option containing a compiler command line definition.\nFormatted as `-D {name}={val}`.",140,null],[11,"cmplr_opt","","Adds a build option containing a raw compiler command line parameter.\nFormatted as `{}` (exact text).",140,null],[11,"bo","","Pushes pre-created build option to the list of options.",140,null],[11,"src_file","","Adds the contents of a file to the program.",140,null],[11,"src","","Adds raw text to the program source.",140,null],[11,"devices","","Specify a list of devices to build this program on. The devices must\nalso be associated with the context passed to `::build` later on.",140,null],[11,"get_device_spec","","Returns the devices specified to be associated the program.",140,null],[11,"get_compiler_options","","Returns a contatenated string of command line options to be passed to\nthe compiler when building this program.",140,null],[11,"get_src_strings","","Returns the final program source code as a list of strings.",140,null],[11,"queue","","Specifies a queue to use for this call only.",141,null],[11,"gwo","","Specifies a global work offset for this call only.",141,null],[11,"gws","","Specifies a global work size for this call only.",141,null],[11,"lws","","Specifies a local work size for this call only.",141,null],[11,"ewait","","Specifies the list of events to wait on before the command will run.",141,null],[11,"ewait_opt","","Specifies a list of events to wait on before the command will run.",141,null],[11,"enew","","Specifies the destination list or empty event for a new, optionally\ncreated event associated with this command.",141,null],[11,"enew_opt","","Specifies a destination list for a new, optionally created event\nassociated with this command.",141,null],[11,"enq","","Enqueues this kernel command.",141,null],[11,"new","","Returns a new buffer command builder associated with with the\nmemory object `obj_core` along with a default `queue` and `mem_len`\n(the length of the device side buffer).",142,{"inputs":[{"name":"queue"},{"name":"memcore"},{"name":"usize"}],"output":{"name":"buffercmd"}}],[11,"queue","","Specifies a queue to use for this call only.",142,null],[11,"block","","Specifies whether or not to block thread until completion.",142,null],[11,"offset","","Sets the linear offset for an operation.",142,null],[11,"read","","Specifies that this command will be a blocking read operation.",142,null],[11,"read_async","","Specifies that this command will be a non-blocking, asynchronous read\noperation.",142,null],[11,"write","","Specifies that this command will be a write operation.",142,null],[11,"copy","","Specifies that this command will be a copy operation.",142,null],[11,"copy_to_image","","Specifies that this command will be a copy to image.",142,null],[11,"gl_acquire","","Specifies that this command will acquire a GL buffer.",142,null],[11,"gl_release","","Specifies that this command will release a GL buffer.",142,null],[11,"fill","","Specifies that this command will be a fill.",142,null],[11,"rect","","Specifies that this will be a rectangularly shaped operation\n(the default being linear).",142,null],[11,"ewait","","Specifies a list of events to wait on before the command will run.",142,null],[11,"ewait_opt","","Specifies a list of events to wait on before the command will run or\nresets it to `None`.",142,null],[11,"enew","","Specifies the destination for a new, optionally created event\nassociated with this command.",142,null],[11,"enew_opt","","Specifies a destination for a new, optionally created event\nassociated with this command or resets it to `None`.",142,null],[11,"enq","","Enqueues this command.",142,null],[11,"new","","Returns a new `ImageBuilder` with very basic defaults.",143,{"inputs":[],"output":{"name":"imagebuilder"}}],[11,"build","","Builds with no host side image data memory specified and returns a\nnew `Image`.",143,null],[11,"build_with_data","","Builds with the host side image data specified by `image_data`\nand returns a new `Image`.",143,null],[11,"channel_order","","",143,null],[11,"channel_data_type","","",143,null],[11,"image_type","","Sets the type of image (technically the type of memory buffer).",143,null],[11,"dims","","The width, height, and depth of an image or image array:",143,null],[11,"array_size","","Image array size.",143,null],[11,"row_pitch_bytes","","Image row pitch.",143,null],[11,"slc_pitch_bytes","","Image slice pitch.",143,null],[11,"buffer_sync","","Buffer synchronization.",143,null],[11,"flags","","Sets the flags for the memory to be created.",143,null],[11,"image_format","","Specifies the image pixel format.",143,null],[11,"image_desc","","Specifies the image descriptor containing a number of important settings.",143,null],[11,"fmt","","",77,null],[11,"new","","Returns a new image command builder associated with with the\nmemory object `obj_core` along with a default `queue` and `to_len`\n(the length of the device side image).",144,null],[11,"queue","","Specifies a queue to use for this call only.",144,null],[11,"block","","Specifies whether or not to block thread until completion.",144,null],[11,"origin","","Sets the three dimensional offset, the origin point, for an operation.",144,null],[11,"region","","Sets the region size for an operation.",144,null],[11,"pitch","","[UNSTABLE] Sets the row and slice pitch for a read or write operation.",144,null],[11,"read","","Specifies that this command will be a blocking read operation.",144,null],[11,"read_async","","Specifies that this command will be a non-blocking, asynchronous read\noperation.",144,null],[11,"write","","Specifies that this command will be a write operation.",144,null],[11,"copy","","Specifies that this command will be a copy operation.",144,null],[11,"copy_to_buffer","","Specifies that this command will be a copy to image.",144,null],[11,"gl_acquire","","Specifies that this command will acquire a GL buffer.",144,null],[11,"gl_release","","Specifies that this command will release a GL buffer.",144,null],[11,"fill","","Specifies that this command will be a fill.",144,null],[11,"ewait","","Specifies a list of events to wait on before the command will run.",144,null],[11,"ewait_opt","","Specifies a list of events to wait on before the command will run or\nresets it to `None`.",144,null],[11,"enew","","Specifies the destination for a new, optionally created event\nassociated with this command.",144,null],[11,"enew_opt","","Specifies a destination for a new, optionally created event\nassociated with this command or resets it to `None`.",144,null],[11,"enq","","Enqueues this command.",144,null],[11,"new","","Returns a new `ProQueBuilder` with an empty / default configuration.",145,{"inputs":[],"output":{"name":"proquebuilder"}}],[11,"build","","Returns a new `ProQue`.",145,null],[11,"platform","","Sets the platform to be used and returns the builder.",145,null],[11,"context","","Sets the context and returns the `ProQueBuilder`.",145,null],[11,"device","","Sets a device or devices to be used and returns a `ProQueBuilder`\nreference.",145,null],[11,"src","","Adds some source code to be compiled and returns the `ProQueBuilder`.",145,null],[11,"prog_bldr","","Adds a pre-configured `ProgramBuilder` and returns the `ProQueBuilder`.",145,null],[11,"dims","","Sets the built-in dimensions.",145,null],[11,"new","ocl::aliases","",18,{"inputs":[{"name":"i8"},{"name":"i8"},{"name":"i8"}],"output":{"name":"clchar3"}}],[11,"new","","",23,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"cluchar3"}}],[11,"new","","",28,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"clshort3"}}],[11,"new","","",33,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"clushort3"}}],[11,"new","","",38,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"clint3"}}],[11,"new","","",43,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"cluint3"}}],[11,"new","","",49,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"cllong3"}}],[11,"new","","",55,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"clulong3"}}],[11,"new","","",60,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"clfloat3"}}],[11,"new","","",61,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"clfloat4"}}],[11,"new","","",65,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"cldouble3"}}],[11,"new","ocl::builders","",71,{"inputs":[{"name":"imagechannelorder"},{"name":"imagechanneldatatype"}],"output":{"name":"imageformat"}}],[11,"new_rgba","","",71,{"inputs":[],"output":{"name":"imageformat"}}],[11,"from_raw","","",71,{"inputs":[{"name":"cl_image_format"}],"output":{"name":"result"}}],[11,"list_from_raw","","",71,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"to_raw","","",71,null],[11,"new_raw","","",71,{"inputs":[],"output":{"name":"cl_image_format"}}],[11,"pixel_bytes","","Returns the size in bytes of a pixel using the format specified by this\n`ImageFormat`.",71,null],[11,"new","","",72,{"inputs":[{"name":"memobjecttype"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"option"}],"output":{"name":"imagedescriptor"}}],[11,"to_raw","","",72,null],[11,"new","","Returns an empty new list of context properties",138,{"inputs":[],"output":{"name":"contextproperties"}}],[11,"platform","","Specifies a platform (builder-style).",138,null],[11,"interop_user_sync","","Specifies whether the user is responsible for synchronization between\nOpenCL and other APIs (builder-style).",138,null],[11,"gl_context","","Specifies an OpenGL context handle (builder-style).",138,null],[11,"cgl_sharegroup","","Specifies an OpenGL context CGL share group to\nassociate the OpenCL context with (builder-style).",138,null],[11,"property_value","","Pushes a `ContextPropertyValue` onto this list of properties\n(builder-style).",138,null],[11,"set_platform","","Specifies a platform.",138,null],[11,"set_interop_user_sync","","Specifies whether the user is responsible for synchronization between\nOpenCL and other APIs.",138,null],[11,"set_gl_context","","Specifies an OpenGL context handle.",138,null],[11,"set_cgl_sharegroup","","Specifies an OpenGL context CGL share group to\nassociate the OpenCL context with.",138,null],[11,"set_property_value","","Pushes a `ContextPropertyValue` onto this list of properties.",138,null],[11,"get_platform","","Returns a platform id or none.",138,null],[11,"get_cgl_sharegroup","","Returns a cgl_sharegroup id or none.",138,null],[11,"to_raw","","Converts this list into a packed-word representation as specified\n[here](https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/clCreateContext.html).",138,null],[11,"empty","ocl::flags","Returns an empty set of flags.",128,{"inputs":[],"output":{"name":"devicetype"}}],[11,"all","","Returns the set containing all flags.",128,{"inputs":[],"output":{"name":"devicetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",128,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",128,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",128,{"inputs":[{"name":"u64"}],"output":{"name":"devicetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",128,null],[11,"is_all","","Returns `true` if all flags are currently set.",128,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",128,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",128,null],[11,"insert","","Inserts the specified flags in-place.",128,null],[11,"remove","","Removes the specified flags in-place.",128,null],[11,"toggle","","Toggles the specified flags in-place.",128,null],[11,"empty","","Returns an empty set of flags.",129,{"inputs":[],"output":{"name":"devicefpconfig"}}],[11,"all","","Returns the set containing all flags.",129,{"inputs":[],"output":{"name":"devicefpconfig"}}],[11,"bits","","Returns the raw value of the flags currently stored.",129,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",129,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",129,{"inputs":[{"name":"u64"}],"output":{"name":"devicefpconfig"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",129,null],[11,"is_all","","Returns `true` if all flags are currently set.",129,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",129,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",129,null],[11,"insert","","Inserts the specified flags in-place.",129,null],[11,"remove","","Removes the specified flags in-place.",129,null],[11,"toggle","","Toggles the specified flags in-place.",129,null],[11,"empty","","Returns an empty set of flags.",130,{"inputs":[],"output":{"name":"deviceexeccapabilities"}}],[11,"all","","Returns the set containing all flags.",130,{"inputs":[],"output":{"name":"deviceexeccapabilities"}}],[11,"bits","","Returns the raw value of the flags currently stored.",130,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",130,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",130,{"inputs":[{"name":"u64"}],"output":{"name":"deviceexeccapabilities"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",130,null],[11,"is_all","","Returns `true` if all flags are currently set.",130,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",130,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",130,null],[11,"insert","","Inserts the specified flags in-place.",130,null],[11,"remove","","Removes the specified flags in-place.",130,null],[11,"toggle","","Toggles the specified flags in-place.",130,null],[11,"empty","","Returns an empty set of flags.",131,{"inputs":[],"output":{"name":"commandqueueproperties"}}],[11,"all","","Returns the set containing all flags.",131,{"inputs":[],"output":{"name":"commandqueueproperties"}}],[11,"bits","","Returns the raw value of the flags currently stored.",131,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",131,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",131,{"inputs":[{"name":"u64"}],"output":{"name":"commandqueueproperties"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",131,null],[11,"is_all","","Returns `true` if all flags are currently set.",131,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",131,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",131,null],[11,"insert","","Inserts the specified flags in-place.",131,null],[11,"remove","","Removes the specified flags in-place.",131,null],[11,"toggle","","Toggles the specified flags in-place.",131,null],[11,"empty","","Returns an empty set of flags.",132,{"inputs":[],"output":{"name":"deviceaffinitydomain"}}],[11,"all","","Returns the set containing all flags.",132,{"inputs":[],"output":{"name":"deviceaffinitydomain"}}],[11,"bits","","Returns the raw value of the flags currently stored.",132,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",132,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",132,{"inputs":[{"name":"u64"}],"output":{"name":"deviceaffinitydomain"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,null],[11,"is_all","","Returns `true` if all flags are currently set.",132,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,null],[11,"insert","","Inserts the specified flags in-place.",132,null],[11,"remove","","Removes the specified flags in-place.",132,null],[11,"toggle","","Toggles the specified flags in-place.",132,null],[11,"empty","","Returns an empty set of flags.",133,{"inputs":[],"output":{"name":"memflags"}}],[11,"all","","Returns the set containing all flags.",133,{"inputs":[],"output":{"name":"memflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",133,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",133,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",133,{"inputs":[{"name":"u64"}],"output":{"name":"memflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",133,null],[11,"is_all","","Returns `true` if all flags are currently set.",133,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",133,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",133,null],[11,"insert","","Inserts the specified flags in-place.",133,null],[11,"remove","","Removes the specified flags in-place.",133,null],[11,"toggle","","Toggles the specified flags in-place.",133,null],[11,"empty","","Returns an empty set of flags.",134,{"inputs":[],"output":{"name":"memmigrationflags"}}],[11,"all","","Returns the set containing all flags.",134,{"inputs":[],"output":{"name":"memmigrationflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",134,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",134,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",134,{"inputs":[{"name":"u64"}],"output":{"name":"memmigrationflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",134,null],[11,"is_all","","Returns `true` if all flags are currently set.",134,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",134,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",134,null],[11,"insert","","Inserts the specified flags in-place.",134,null],[11,"remove","","Removes the specified flags in-place.",134,null],[11,"toggle","","Toggles the specified flags in-place.",134,null],[11,"empty","","Returns an empty set of flags.",135,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",135,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",135,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",135,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",135,{"inputs":[{"name":"u64"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",135,null],[11,"is_all","","Returns `true` if all flags are currently set.",135,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",135,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",135,null],[11,"insert","","Inserts the specified flags in-place.",135,null],[11,"remove","","Removes the specified flags in-place.",135,null],[11,"toggle","","Toggles the specified flags in-place.",135,null],[11,"empty","","Returns an empty set of flags.",136,{"inputs":[],"output":{"name":"programbinarytype"}}],[11,"all","","Returns the set containing all flags.",136,{"inputs":[],"output":{"name":"programbinarytype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",136,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",136,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",136,{"inputs":[{"name":"u32"}],"output":{"name":"programbinarytype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",136,null],[11,"is_all","","Returns `true` if all flags are currently set.",136,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",136,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",136,null],[11,"insert","","Inserts the specified flags in-place.",136,null],[11,"remove","","Removes the specified flags in-place.",136,null],[11,"toggle","","Toggles the specified flags in-place.",136,null],[11,"empty","","Returns an empty set of flags.",137,{"inputs":[],"output":{"name":"kernelargtypequalifier"}}],[11,"all","","Returns the set containing all flags.",137,{"inputs":[],"output":{"name":"kernelargtypequalifier"}}],[11,"bits","","Returns the raw value of the flags currently stored.",137,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",137,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",137,{"inputs":[{"name":"u64"}],"output":{"name":"kernelargtypequalifier"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",137,null],[11,"is_all","","Returns `true` if all flags are currently set.",137,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",137,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",137,null],[11,"insert","","Inserts the specified flags in-place.",137,null],[11,"remove","","Removes the specified flags in-place.",137,null],[11,"toggle","","Toggles the specified flags in-place.",137,null],[11,"from_bytes","ocl::enums","",113,{"inputs":[{"name":"platforminfo"},{"name":"result"}],"output":{"name":"platforminforesult"}}],[11,"as_opencl_version","","Parse the `Version` string and get a numeric result as `OpenclVersion`.",113,null],[11,"from_bytes_max_work_item_sizes","","Returns a new `DeviceInfoResult::MaxWorkItemSizes` variant.",114,{"inputs":[{"name":"deviceinfo"},{"name":"result"},{"name":"u32"}],"output":{"name":"deviceinforesult"}}],[11,"from_bytes","","Returns a new `DeviceInfoResult` for all variants except `MaxWorkItemSizes`.",114,{"inputs":[{"name":"deviceinfo"},{"name":"result"}],"output":{"name":"deviceinforesult"}}],[11,"as_opencl_version","","Parse the `Version` string and get a numeric result as `OpenclVersion`.",114,null],[11,"from_bytes","","",115,{"inputs":[{"name":"contextinfo"},{"name":"result"}],"output":{"name":"contextinforesult"}}],[11,"from_bytes","","",116,{"inputs":[{"name":"commandqueueinfo"},{"name":"result"}],"output":{"name":"commandqueueinforesult"}}],[11,"from_bytes","","",117,{"inputs":[{"name":"meminfo"},{"name":"result"}],"output":{"name":"meminforesult"}}],[11,"from_bytes","","",118,{"inputs":[{"name":"imageinfo"},{"name":"result"}],"output":{"name":"imageinforesult"}}],[11,"from_bytes","","",119,{"inputs":[{"name":"samplerinfo"},{"name":"result"}],"output":{"name":"samplerinforesult"}}],[11,"from_bytes","","",120,{"inputs":[{"name":"programinfo"},{"name":"result"}],"output":{"name":"programinforesult"}}],[11,"from_bytes","","",121,{"inputs":[{"name":"programbuildinfo"},{"name":"result"}],"output":{"name":"programbuildinforesult"}}],[11,"from_bytes","","",122,{"inputs":[{"name":"kernelinfo"},{"name":"result"}],"output":{"name":"kernelinforesult"}}],[11,"from_bytes","","",123,{"inputs":[{"name":"kernelarginfo"},{"name":"result"}],"output":{"name":"kernelarginforesult"}}],[11,"from_bytes","","",124,{"inputs":[{"name":"kernelworkgroupinfo"},{"name":"result"}],"output":{"name":"kernelworkgroupinforesult"}}],[11,"from_bytes","","",125,{"inputs":[{"name":"eventinfo"},{"name":"result"}],"output":{"name":"eventinforesult"}}],[11,"from_bytes","","",126,{"inputs":[{"name":"profilinginfo"},{"name":"result"}],"output":{"name":"profilinginforesult"}}]],"paths":[[3,"cl_image_format"],[3,"cl_buffer_region"],[3,"cl_image_desc"],[4,"Error"],[4,"SpatialDims"],[3,"Platform"],[3,"Device"],[3,"Context"],[3,"Program"],[3,"Kernel"],[3,"Queue"],[3,"Buffer"],[3,"Image"],[3,"Sampler"],[3,"ProQue"],[3,"Event"],[3,"EventList"],[3,"ClChar2"],[3,"ClChar3"],[3,"ClChar4"],[3,"ClChar8"],[3,"ClChar16"],[3,"ClUchar2"],[3,"ClUchar3"],[3,"ClUchar4"],[3,"ClUchar8"],[3,"ClUchar16"],[3,"ClShort2"],[3,"ClShort3"],[3,"ClShort4"],[3,"ClShort8"],[3,"ClShort16"],[3,"ClUshort2"],[3,"ClUshort3"],[3,"ClUshort4"],[3,"ClUshort8"],[3,"ClUshort16"],[3,"ClInt2"],[3,"ClInt3"],[3,"ClInt4"],[3,"ClInt8"],[3,"ClInt16"],[3,"ClUint2"],[3,"ClUint3"],[3,"ClUint4"],[3,"ClUint8"],[3,"ClUint16"],[3,"ClLong1"],[3,"ClLong2"],[3,"ClLong3"],[3,"ClLong4"],[3,"ClLong8"],[3,"ClLong16"],[3,"ClUlong1"],[3,"ClUlong2"],[3,"ClUlong3"],[3,"ClUlong4"],[3,"ClUlong8"],[3,"ClUlong16"],[3,"ClFloat2"],[3,"ClFloat3"],[3,"ClFloat4"],[3,"ClFloat8"],[3,"ClFloat16"],[3,"ClDouble2"],[3,"ClDouble3"],[3,"ClDouble4"],[3,"ClDouble8"],[3,"ClDouble16"],[8,"WorkDims"],[8,"MemLen"],[3,"ImageFormat"],[3,"ImageDescriptor"],[4,"BuildOpt"],[4,"DeviceSpecifier"],[4,"BufferCmdKind"],[4,"BufferCmdDataShape"],[4,"ImageCmdKind"],[4,"ImageChannelOrder"],[4,"ImageChannelDataType"],[4,"Cbool"],[4,"Polling"],[4,"PlatformInfo"],[4,"DeviceInfo"],[4,"DeviceMemCacheType"],[4,"DeviceLocalMemType"],[4,"ContextInfo"],[4,"ContextProperty"],[4,"ContextInfoOrPropertiesPointerType"],[4,"DevicePartitionProperty"],[4,"CommandQueueInfo"],[4,"ChannelType"],[4,"MemObjectType"],[4,"MemInfo"],[4,"ImageInfo"],[4,"AddressingMode"],[4,"FilterMode"],[4,"SamplerInfo"],[4,"ProgramInfo"],[4,"ProgramBuildInfo"],[4,"ProgramBuildStatus"],[4,"KernelInfo"],[4,"KernelArgInfo"],[4,"KernelArgAddressQualifier"],[4,"KernelArgAccessQualifier"],[4,"KernelWorkGroupInfo"],[4,"EventInfo"],[4,"CommandType"],[4,"CommandExecutionStatus"],[4,"BufferCreateType"],[4,"ProfilingInfo"],[4,"KernelArg"],[4,"ContextPropertyValue"],[4,"PlatformInfoResult"],[4,"DeviceInfoResult"],[4,"ContextInfoResult"],[4,"CommandQueueInfoResult"],[4,"MemInfoResult"],[4,"ImageInfoResult"],[4,"SamplerInfoResult"],[4,"ProgramInfoResult"],[4,"ProgramBuildInfoResult"],[4,"KernelInfoResult"],[4,"KernelArgInfoResult"],[4,"KernelWorkGroupInfoResult"],[4,"EventInfoResult"],[4,"ProfilingInfoResult"],[4,"Status"],[3,"DeviceType"],[3,"DeviceFpConfig"],[3,"DeviceExecCapabilities"],[3,"CommandQueueProperties"],[3,"DeviceAffinityDomain"],[3,"MemFlags"],[3,"MemMigrationFlags"],[3,"MapFlags"],[3,"ProgramBinaryType"],[3,"KernelArgTypeQualifier"],[3,"ContextProperties"],[3,"ContextBuilder"],[3,"ProgramBuilder"],[3,"KernelCmd"],[3,"BufferCmd"],[3,"ImageBuilder"],[3,"ImageCmd"],[3,"ProQueBuilder"]]};
searchIndex["ocl_core"] = {"doc":"Thin wrappers for the `OpenCL` FFI functions and types.","items":[[3,"DeviceType","ocl_core","cl_device_type - bitfield",null,null],[3,"DeviceFpConfig","","cl_device_fp_config - bitfield",null,null],[3,"DeviceExecCapabilities","","cl_device_exec_capabilities - bitfield",null,null],[3,"CommandQueueProperties","","cl_command_queue_properties - bitfield",null,null],[3,"DeviceAffinityDomain","","cl_device_affinity_domain",null,null],[3,"MemFlags","","cl_mem_flags - bitfield",null,null],[3,"MemMigrationFlags","","cl_mem_migration_flags - bitfield",null,null],[3,"MapFlags","","cl_map_flags - bitfield",null,null],[3,"ProgramBinaryType","","cl_program_binary_type",null,null],[3,"KernelArgTypeQualifier","","cl_kernel_arg_type_qualifer",null,null],[4,"Status","","TODO: MOVE ME AND LEAVE CONSTS AS THEY WERE.\nThe status of an OpenCL API call. Used for returning success/error codes.",null,null],[13,"CL_SUCCESS","","",0,null],[13,"CL_DEVICE_NOT_FOUND","","",0,null],[13,"CL_DEVICE_NOT_AVAILABLE","","",0,null],[13,"CL_COMPILER_NOT_AVAILABLE","","",0,null],[13,"CL_MEM_OBJECT_ALLOCATION_FAILURE","","",0,null],[13,"CL_OUT_OF_RESOURCES","","",0,null],[13,"CL_OUT_OF_HOST_MEMORY","","",0,null],[13,"CL_PROFILING_INFO_NOT_AVAILABLE","","",0,null],[13,"CL_MEM_COPY_OVERLAP","","",0,null],[13,"CL_IMAGE_FORMAT_MISMATCH","","",0,null],[13,"CL_IMAGE_FORMAT_NOT_SUPPORTED","","",0,null],[13,"CL_BUILD_PROGRAM_FAILURE","","",0,null],[13,"CL_MAP_FAILURE","","",0,null],[13,"CL_MISALIGNED_SUB_BUFFER_OFFSET","","",0,null],[13,"CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST","","",0,null],[13,"CL_COMPILE_PROGRAM_FAILURE","","",0,null],[13,"CL_LINKER_NOT_AVAILABLE","","",0,null],[13,"CL_LINK_PROGRAM_FAILURE","","",0,null],[13,"CL_DEVICE_PARTITION_FAILED","","",0,null],[13,"CL_KERNEL_ARG_INFO_NOT_AVAILABLE","","",0,null],[13,"CL_INVALID_VALUE","","",0,null],[13,"CL_INVALID_DEVICE_TYPE","","",0,null],[13,"CL_INVALID_PLATFORM","","",0,null],[13,"CL_INVALID_DEVICE","","",0,null],[13,"CL_INVALID_CONTEXT","","",0,null],[13,"CL_INVALID_QUEUE_PROPERTIES","","",0,null],[13,"CL_INVALID_COMMAND_QUEUE","","",0,null],[13,"CL_INVALID_HOST_PTR","","",0,null],[13,"CL_INVALID_MEM_OBJECT","","",0,null],[13,"CL_INVALID_IMAGE_FORMAT_DESCRIPTOR","","",0,null],[13,"CL_INVALID_IMAGE_SIZE","","",0,null],[13,"CL_INVALID_SAMPLER","","",0,null],[13,"CL_INVALID_BINARY","","",0,null],[13,"CL_INVALID_BUILD_OPTIONS","","",0,null],[13,"CL_INVALID_PROGRAM","","",0,null],[13,"CL_INVALID_PROGRAM_EXECUTABLE","","",0,null],[13,"CL_INVALID_KERNEL_NAME","","",0,null],[13,"CL_INVALID_KERNEL_DEFINITION","","",0,null],[13,"CL_INVALID_KERNEL","","",0,null],[13,"CL_INVALID_ARG_INDEX","","",0,null],[13,"CL_INVALID_ARG_VALUE","","",0,null],[13,"CL_INVALID_ARG_SIZE","","",0,null],[13,"CL_INVALID_KERNEL_ARGS","","",0,null],[13,"CL_INVALID_WORK_DIMENSION","","",0,null],[13,"CL_INVALID_WORK_GROUP_SIZE","","",0,null],[13,"CL_INVALID_WORK_ITEM_SIZE","","",0,null],[13,"CL_INVALID_GLOBAL_OFFSET","","",0,null],[13,"CL_INVALID_EVENT_WAIT_LIST","","",0,null],[13,"CL_INVALID_EVENT","","",0,null],[13,"CL_INVALID_OPERATION","","",0,null],[13,"CL_INVALID_GL_OBJECT","","",0,null],[13,"CL_INVALID_BUFFER_SIZE","","",0,null],[13,"CL_INVALID_MIP_LEVEL","","",0,null],[13,"CL_INVALID_GLOBAL_WORK_SIZE","","",0,null],[13,"CL_INVALID_PROPERTY","","",0,null],[13,"CL_INVALID_IMAGE_DESCRIPTOR","","",0,null],[13,"CL_INVALID_COMPILER_OPTIONS","","",0,null],[13,"CL_INVALID_LINKER_OPTIONS","","",0,null],[13,"CL_INVALID_DEVICE_PARTITION_COUNT","","",0,null],[13,"CL_INVALID_PIPE_SIZE","","",0,null],[13,"CL_INVALID_DEVICE_QUEUE","","",0,null],[13,"CL_PLATFORM_NOT_FOUND_KHR","","",0,null],[4,"GlTextureTarget","","specify the texture target type",null,null],[13,"GlTexture1d","","",1,null],[13,"GlTexture1dArray","","",1,null],[13,"GlTextureBuffer","","",1,null],[13,"GlTexture2d","","",1,null],[13,"GlTexture2dArray","","",1,null],[13,"GlTexture3d","","",1,null],[13,"GlTextureCubeMapPositiveX","","",1,null],[13,"GlTextureCubeMapPositiveY","","",1,null],[13,"GlTextureCubeMapPositiveZ","","",1,null],[13,"GlTextureCubeMapNegativeX","","",1,null],[13,"GlTextureCubeMapNegativeY","","",1,null],[13,"GlTextureCubeMapNegativeZ","","",1,null],[13,"GlTextureRectangle","","",1,null],[4,"ClGlObjectType","","",null,null],[13,"ClGlObjectBuffer","","",2,null],[13,"ClGlObjectTexture2D","","",2,null],[13,"ClGlObjectTexture3D","","",2,null],[13,"ClGlObjectRenderbuffer","","",2,null],[13,"ClGlObjectTexture2DArray","","",2,null],[13,"ClGlObjectTexture1D","","",2,null],[13,"ClGlObjectTexture1DArray","","",2,null],[13,"ClGlObjectTextureBuffer","","",2,null],[4,"ImageChannelOrder","","Specifies the number of channels and the channel layout i.e. the memory layout in which channels are stored in the image. Valid values are described in the table below. (from SDK)",null,null],[13,"R","","",3,null],[13,"A","","",3,null],[13,"Rg","","",3,null],[13,"Ra","","",3,null],[13,"Rgb","","",3,null],[13,"Rgba","","",3,null],[13,"Bgra","","",3,null],[13,"Argb","","",3,null],[13,"Intensity","","",3,null],[13,"Luminance","","",3,null],[13,"Rx","","",3,null],[13,"Rgx","","",3,null],[13,"Rgbx","","",3,null],[13,"Depth","","",3,null],[13,"DepthStencil","","",3,null],[4,"ImageChannelDataType","","Describes the size of the channel data type. The number of bits per element determined by the image_channel_data_type and image_channel_order must be a power of two. The list of supported values is described in the table below. (from SDK)",null,null],[13,"SnormInt8","","",4,null],[13,"SnormInt16","","",4,null],[13,"UnormInt8","","",4,null],[13,"UnormInt16","","",4,null],[13,"UnormShort565","","",4,null],[13,"UnormShort555","","",4,null],[13,"UnormInt101010","","",4,null],[13,"SignedInt8","","",4,null],[13,"SignedInt16","","",4,null],[13,"SignedInt32","","",4,null],[13,"UnsignedInt8","","",4,null],[13,"UnsignedInt16","","",4,null],[13,"UnsignedInt32","","",4,null],[13,"HalfFloat","","",4,null],[13,"Float","","",4,null],[13,"UnormInt24","","",4,null],[4,"Cbool","","cl_bool",null,null],[13,"False","","",5,null],[13,"True","","",5,null],[4,"Polling","","cl_bool: Polling",null,null],[13,"Blocking","","",6,null],[13,"NonBlocking","","",6,null],[4,"PlatformInfo","","cl_platform_info",null,null],[13,"Profile","","",7,null],[13,"Version","","",7,null],[13,"Name","","",7,null],[13,"Vendor","","",7,null],[13,"Extensions","","",7,null],[4,"DeviceInfo","","cl_device_info",null,null],[13,"Type","","",8,null],[13,"VendorId","","",8,null],[13,"MaxComputeUnits","","",8,null],[13,"MaxWorkItemDimensions","","",8,null],[13,"MaxWorkGroupSize","","",8,null],[13,"MaxWorkItemSizes","","",8,null],[13,"PreferredVectorWidthChar","","",8,null],[13,"PreferredVectorWidthShort","","",8,null],[13,"PreferredVectorWidthInt","","",8,null],[13,"PreferredVectorWidthLong","","",8,null],[13,"PreferredVectorWidthFloat","","",8,null],[13,"PreferredVectorWidthDouble","","",8,null],[13,"MaxClockFrequency","","",8,null],[13,"AddressBits","","",8,null],[13,"MaxReadImageArgs","","",8,null],[13,"MaxWriteImageArgs","","",8,null],[13,"MaxMemAllocSize","","",8,null],[13,"Image2dMaxWidth","","",8,null],[13,"Image2dMaxHeight","","",8,null],[13,"Image3dMaxWidth","","",8,null],[13,"Image3dMaxHeight","","",8,null],[13,"Image3dMaxDepth","","",8,null],[13,"ImageSupport","","",8,null],[13,"MaxParameterSize","","",8,null],[13,"MaxSamplers","","",8,null],[13,"MemBaseAddrAlign","","",8,null],[13,"MinDataTypeAlignSize","","",8,null],[13,"SingleFpConfig","","",8,null],[13,"GlobalMemCacheType","","",8,null],[13,"GlobalMemCachelineSize","","",8,null],[13,"GlobalMemCacheSize","","",8,null],[13,"GlobalMemSize","","",8,null],[13,"MaxConstantBufferSize","","",8,null],[13,"MaxConstantArgs","","",8,null],[13,"LocalMemType","","",8,null],[13,"LocalMemSize","","",8,null],[13,"ErrorCorrectionSupport","","",8,null],[13,"ProfilingTimerResolution","","",8,null],[13,"EndianLittle","","",8,null],[13,"Available","","",8,null],[13,"CompilerAvailable","","",8,null],[13,"ExecutionCapabilities","","",8,null],[13,"QueueProperties","","",8,null],[13,"Name","","",8,null],[13,"Vendor","","",8,null],[13,"DriverVersion","","",8,null],[13,"Profile","","",8,null],[13,"Version","","",8,null],[13,"Extensions","","",8,null],[13,"Platform","","",8,null],[13,"DoubleFpConfig","","",8,null],[13,"HalfFpConfig","","",8,null],[13,"PreferredVectorWidthHalf","","",8,null],[13,"HostUnifiedMemory","","",8,null],[13,"NativeVectorWidthChar","","",8,null],[13,"NativeVectorWidthShort","","",8,null],[13,"NativeVectorWidthInt","","",8,null],[13,"NativeVectorWidthLong","","",8,null],[13,"NativeVectorWidthFloat","","",8,null],[13,"NativeVectorWidthDouble","","",8,null],[13,"NativeVectorWidthHalf","","",8,null],[13,"OpenclCVersion","","",8,null],[13,"LinkerAvailable","","",8,null],[13,"BuiltInKernels","","",8,null],[13,"ImageMaxBufferSize","","",8,null],[13,"ImageMaxArraySize","","",8,null],[13,"ParentDevice","","",8,null],[13,"PartitionMaxSubDevices","","",8,null],[13,"PartitionProperties","","",8,null],[13,"PartitionAffinityDomain","","",8,null],[13,"PartitionType","","",8,null],[13,"ReferenceCount","","",8,null],[13,"PreferredInteropUserSync","","",8,null],[13,"PrintfBufferSize","","",8,null],[13,"ImagePitchAlignment","","",8,null],[13,"ImageBaseAddressAlignment","","",8,null],[4,"DeviceMemCacheType","","cl_mem_cache_type",null,null],[13,"None","","",9,null],[13,"ReadOnlyCache","","",9,null],[13,"ReadWriteCache","","",9,null],[4,"DeviceLocalMemType","","cl_device_local_mem_type",null,null],[13,"None","","",10,null],[13,"Local","","",10,null],[13,"Global","","",10,null],[4,"ContextInfo","","cl_context_info",null,null],[13,"ReferenceCount","","",11,null],[13,"Devices","","",11,null],[13,"Properties","","",11,null],[13,"NumDevices","","",11,null],[4,"ContextProperty","","cl_context_info + cl_context_properties",null,null],[13,"Platform","","",12,null],[13,"InteropUserSync","","",12,null],[13,"D3d10DeviceKhr","","",12,null],[13,"GlContextKhr","","",12,null],[13,"EglDisplayKhr","","",12,null],[13,"GlxDisplayKhr","","",12,null],[13,"CglSharegroupKhr","","",12,null],[13,"WglHdcKhr","","",12,null],[13,"AdapterD3d9Khr","","",12,null],[13,"AdapterD3d9exKhr","","",12,null],[13,"AdapterDxvaKhr","","",12,null],[13,"D3d11DeviceKhr","","",12,null],[4,"ContextInfoOrPropertiesPointerType","","cl_context_info + cl_context_properties",null,null],[13,"Platform","","",13,null],[13,"InteropUserSync","","",13,null],[4,"DevicePartitionProperty","","[INCOMPLETE] cl_device_partition_property",null,null],[13,"Equally","","",14,null],[13,"ByCounts","","",14,null],[13,"ByCountsListEnd","","",14,null],[13,"ByAffinityDomain","","",14,null],[4,"CommandQueueInfo","","cl_command_queue_info",null,null],[13,"Context","","",15,null],[13,"Device","","",15,null],[13,"ReferenceCount","","",15,null],[13,"Properties","","",15,null],[4,"ChannelType","","cl_channel_type",null,null],[13,"SnormInt8","","",16,null],[13,"SnormInt16","","",16,null],[13,"UnormInt8","","",16,null],[13,"UnormInt16","","",16,null],[13,"UnormShort_565","","",16,null],[13,"UnormShort_555","","",16,null],[13,"UnormInt_101010","","",16,null],[13,"SignedInt8","","",16,null],[13,"SignedInt16","","",16,null],[13,"SignedInt32","","",16,null],[13,"UnsignedInt8","","",16,null],[13,"UnsignedInt16","","",16,null],[13,"UnsignedInt32","","",16,null],[13,"HalfFloat","","",16,null],[13,"Float","","",16,null],[13,"UnormInt24","","",16,null],[4,"MemObjectType","","cl_mem_object_type",null,null],[13,"Buffer","","",17,null],[13,"Image2d","","",17,null],[13,"Image3d","","",17,null],[13,"Image2dArray","","",17,null],[13,"Image1d","","",17,null],[13,"Image1dArray","","",17,null],[13,"Image1dBuffer","","",17,null],[4,"MemInfo","","cl_mem_info",null,null],[13,"Type","","",18,null],[13,"Flags","","",18,null],[13,"Size","","",18,null],[13,"HostPtr","","",18,null],[13,"MapCount","","",18,null],[13,"ReferenceCount","","",18,null],[13,"Context","","",18,null],[13,"AssociatedMemobject","","",18,null],[13,"Offset","","",18,null],[4,"ImageInfo","","cl_image_info",null,null],[13,"Format","","",19,null],[13,"ElementSize","","",19,null],[13,"RowPitch","","",19,null],[13,"SlicePitch","","",19,null],[13,"Width","","",19,null],[13,"Height","","",19,null],[13,"Depth","","",19,null],[13,"ArraySize","","",19,null],[13,"Buffer","","",19,null],[13,"NumMipLevels","","",19,null],[13,"NumSamples","","",19,null],[4,"AddressingMode","","cl_addressing_mode",null,null],[13,"None","","",20,null],[13,"ClampToEdge","","",20,null],[13,"Clamp","","",20,null],[13,"Repeat","","",20,null],[13,"MirroredRepeat","","",20,null],[4,"FilterMode","","cl_filter_mode",null,null],[13,"Nearest","","",21,null],[13,"Linear","","",21,null],[4,"SamplerInfo","","cl_sampler_info",null,null],[13,"ReferenceCount","","",22,null],[13,"Context","","",22,null],[13,"NormalizedCoords","","",22,null],[13,"AddressingMode","","",22,null],[13,"FilterMode","","",22,null],[4,"ProgramInfo","","cl_program_info",null,null],[13,"ReferenceCount","","",23,null],[13,"Context","","",23,null],[13,"NumDevices","","",23,null],[13,"Devices","","",23,null],[13,"Source","","",23,null],[13,"BinarySizes","","",23,null],[13,"Binaries","","",23,null],[13,"NumKernels","","",23,null],[13,"KernelNames","","",23,null],[4,"ProgramBuildInfo","","cl_program_build_info",null,null],[13,"BuildStatus","","",24,null],[13,"BuildOptions","","",24,null],[13,"BuildLog","","",24,null],[13,"BinaryType","","",24,null],[4,"ProgramBuildStatus","","cl_build_status",null,null],[13,"Success","","",25,null],[13,"None","","",25,null],[13,"Error","","",25,null],[13,"InProgress","","",25,null],[4,"KernelInfo","","cl_kernel_info",null,null],[13,"FunctionName","","",26,null],[13,"NumArgs","","",26,null],[13,"ReferenceCount","","",26,null],[13,"Context","","",26,null],[13,"Program","","",26,null],[13,"Attributes","","",26,null],[4,"KernelArgInfo","","cl_kernel_arg_info",null,null],[13,"AddressQualifier","","",27,null],[13,"AccessQualifier","","",27,null],[13,"TypeName","","",27,null],[13,"TypeQualifier","","",27,null],[13,"Name","","",27,null],[4,"KernelArgAddressQualifier","","cl_kernel_arg_address_qualifier",null,null],[13,"Global","","",28,null],[13,"Local","","",28,null],[13,"Constant","","",28,null],[13,"Private","","",28,null],[4,"KernelArgAccessQualifier","","cl_kernel_arg_access_qualifier",null,null],[13,"ReadOnly","","",29,null],[13,"WriteOnly","","",29,null],[13,"ReadWrite","","",29,null],[13,"None","","",29,null],[4,"KernelWorkGroupInfo","","cl_kernel_work_group_info",null,null],[13,"WorkGroupSize","","",30,null],[13,"CompileWorkGroupSize","","",30,null],[13,"LocalMemSize","","",30,null],[13,"PreferredWorkGroupSizeMultiple","","",30,null],[13,"PrivateMemSize","","",30,null],[13,"GlobalWorkSize","","",30,null],[4,"EventInfo","","cl_event_info",null,null],[13,"CommandQueue","","",31,null],[13,"CommandType","","",31,null],[13,"ReferenceCount","","",31,null],[13,"CommandExecutionStatus","","",31,null],[13,"Context","","",31,null],[4,"CommandType","","cl_command_type",null,null],[13,"NdrangeKernel","","",32,null],[13,"Task","","",32,null],[13,"NativeKernel","","",32,null],[13,"ReadBuffer","","",32,null],[13,"WriteBuffer","","",32,null],[13,"CopyBuffer","","",32,null],[13,"ReadImage","","",32,null],[13,"WriteImage","","",32,null],[13,"CopyImage","","",32,null],[13,"CopyImageToBuffer","","",32,null],[13,"CopyBufferToImage","","",32,null],[13,"MapBuffer","","",32,null],[13,"MapImage","","",32,null],[13,"UnmapMemObject","","",32,null],[13,"Marker","","",32,null],[13,"AcquireGlObjects","","",32,null],[13,"ReleaseGlObjects","","",32,null],[13,"ReadBufferRect","","",32,null],[13,"WriteBufferRect","","",32,null],[13,"CopyBufferRect","","",32,null],[13,"User","","",32,null],[13,"Barrier","","",32,null],[13,"MigrateMemObjects","","",32,null],[13,"FillBuffer","","",32,null],[13,"FillImage","","",32,null],[4,"CommandExecutionStatus","","command execution status",null,null],[13,"Complete","","",33,null],[13,"Running","","",33,null],[13,"Submitted","","",33,null],[13,"Queued","","",33,null],[4,"BufferCreateType","","cl_buffer_create_type",null,null],[13,"Region","","",34,null],[13,"__DUMMY","","",34,null],[4,"ProfilingInfo","","cl_profiling_info",null,null],[13,"Queued","","",35,null],[13,"Submit","","",35,null],[13,"Start","","",35,null],[13,"End","","",35,null],[5,"get_platform_ids","","Returns a list of available platforms as &#39;core&#39; objects.",null,{"inputs":[],"output":{"name":"oclresult"}}],[5,"get_platform_info","","Returns platform information of the requested type.",null,{"inputs":[{"name":"p"},{"name":"platforminfo"}],"output":{"name":"platforminforesult"}}],[5,"get_device_ids","","Returns a list of available devices for a particular platform.",null,{"inputs":[{"name":"platformid"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"get_device_info","","Returns information about a device.",null,{"inputs":[{"name":"d"},{"name":"deviceinfo"}],"output":{"name":"deviceinforesult"}}],[5,"create_sub_devices","","[UNIMPLEMENTED]",null,{"inputs":[{"name":"option"}],"output":{"name":"oclresult"}}],[5,"retain_device","","Increments the reference count of a device.",null,{"inputs":[{"name":"deviceid"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"release_device","","Decrements the reference count of a device.",null,{"inputs":[{"name":"deviceid"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"create_context","","Creates a new context pointer valid for all devices in `device_ids`.",null,null],[5,"create_context_from_type","","Creates a new context pointer for all devices of a specific type.",null,{"inputs":[{"name":"option"},{"name":"devicetype"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"retain_context","","Increments the reference count of a context.",null,{"inputs":[{"name":"context"}],"output":{"name":"oclresult"}}],[5,"release_context","","Decrements reference count of a context.",null,{"inputs":[{"name":"context"}],"output":{"name":"oclresult"}}],[5,"get_context_info","","Returns various kinds of context information.",null,{"inputs":[{"name":"context"},{"name":"contextinfo"}],"output":{"name":"contextinforesult"}}],[5,"create_command_queue","","Returns a new command queue pointer.",null,{"inputs":[{"name":"context"},{"name":"d"}],"output":{"name":"oclresult"}}],[5,"retain_command_queue","","Increments the reference count of a command queue.",null,{"inputs":[{"name":"commandqueue"}],"output":{"name":"oclresult"}}],[5,"release_command_queue","","Decrements the reference count of a command queue.",null,{"inputs":[{"name":"commandqueue"}],"output":{"name":"oclresult"}}],[5,"get_command_queue_info","","Returns information about a command queue",null,{"inputs":[{"name":"commandqueue"},{"name":"commandqueueinfo"}],"output":{"name":"commandqueueinforesult"}}],[5,"create_buffer","","Returns a new buffer pointer with size (bytes): `len` * sizeof(T).",null,{"inputs":[{"name":"context"},{"name":"memflags"},{"name":"usize"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"create_sub_buffer","","[UNTESTED]\nCreates a new buffer object (referred to as a sub-buffer object) from an\nexisting buffer object.",null,{"inputs":[{"name":"mem"},{"name":"memflags"},{"name":"bufferregion"}],"output":{"name":"oclresult"}}],[5,"create_image","","Returns a new image (mem) pointer.",null,{"inputs":[{"name":"context"},{"name":"memflags"},{"name":"imageformat"},{"name":"imagedescriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"retain_mem_object","","Increments the reference counter of a mem object.",null,{"inputs":[{"name":"mem"}],"output":{"name":"oclresult"}}],[5,"release_mem_object","","Decrements the reference counter of a mem object.",null,{"inputs":[{"name":"mem"}],"output":{"name":"oclresult"}}],[5,"get_supported_image_formats","","Returns a list of supported image formats.",null,{"inputs":[{"name":"context"},{"name":"memflags"},{"name":"memobjecttype"}],"output":{"name":"oclresult"}}],[5,"get_mem_object_info","","Get mem object info.",null,{"inputs":[{"name":"mem"},{"name":"meminfo"}],"output":{"name":"meminforesult"}}],[5,"get_image_info","","Get image info.",null,{"inputs":[{"name":"mem"},{"name":"imageinfo"}],"output":{"name":"imageinforesult"}}],[5,"set_mem_object_destructor_callback","","[UNIMPLEMENTED]",null,{"inputs":[],"output":{"name":"oclresult"}}],[5,"create_sampler","","Creates and returns a new sampler object.",null,{"inputs":[{"name":"context"},{"name":"bool"},{"name":"addressingmode"},{"name":"filtermode"}],"output":{"name":"oclresult"}}],[5,"retain_sampler","","Increments a sampler reference counter.",null,{"inputs":[{"name":"sampler"}],"output":{"name":"oclresult"}}],[5,"release_sampler","","Decrements a sampler reference counter.",null,{"inputs":[{"name":"sampler"}],"output":{"name":"oclresult"}}],[5,"get_sampler_info","","Returns information about the sampler object.",null,{"inputs":[{"name":"sampler"},{"name":"samplerinfo"}],"output":{"name":"samplerinforesult"}}],[5,"create_program_with_source","","Creates a new program.",null,null],[5,"create_program_with_binary","","[UNTESTED]\nCreates a program object for a context, and loads the binary bits\nspecified by binary into the program object.",null,null],[5,"create_program_with_built_in_kernels","","[UNIMPLEMENTED]",null,{"inputs":[{"name":"option"}],"output":{"name":"oclresult"}}],[5,"retain_program","","Increments a program reference counter.",null,{"inputs":[{"name":"program"}],"output":{"name":"oclresult"}}],[5,"release_program","","Decrements a program reference counter.",null,{"inputs":[{"name":"program"}],"output":{"name":"oclresult"}}],[5,"build_program","","Builds a program.",null,null],[5,"compile_program","","[UNIMPLEMENTED]",null,{"inputs":[{"name":"option"}],"output":{"name":"oclresult"}}],[5,"link_program","","[UNIMPLEMENTED]",null,{"inputs":[{"name":"option"}],"output":{"name":"oclresult"}}],[5,"create_build_program","","Creates, builds, and returns a new program pointer from `src_strings`.",null,null],[5,"get_program_info","","Get program info.",null,{"inputs":[{"name":"program"},{"name":"programinfo"}],"output":{"name":"programinforesult"}}],[5,"get_program_build_info","","Get program build info.",null,{"inputs":[{"name":"program"},{"name":"d"},{"name":"programbuildinfo"}],"output":{"name":"programbuildinforesult"}}],[5,"create_kernel","","Returns a new kernel pointer.",null,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"oclresult"}}],[5,"create_kernels_in_program","","[UNIMPLEMENTED]",null,{"inputs":[],"output":{"name":"oclresult"}}],[5,"retain_kernel","","Increments a kernel reference counter.",null,{"inputs":[{"name":"kernel"}],"output":{"name":"oclresult"}}],[5,"release_kernel","","Decrements a kernel reference counter.",null,{"inputs":[{"name":"kernel"}],"output":{"name":"oclresult"}}],[5,"set_kernel_arg","","Sets the argument value for a specific argument of a kernel.",null,{"inputs":[{"name":"kernel"},{"name":"u32"},{"name":"kernelarg"}],"output":{"name":"oclresult"}}],[5,"get_kernel_info","","Get kernel info.",null,{"inputs":[{"name":"kernel"},{"name":"kernelinfo"}],"output":{"name":"kernelinforesult"}}],[5,"get_kernel_arg_info","","Get kernel arg info.",null,{"inputs":[{"name":"kernel"},{"name":"u32"},{"name":"kernelarginfo"},{"name":"option"}],"output":{"name":"kernelarginforesult"}}],[5,"get_kernel_work_group_info","","Get kernel work group info.",null,{"inputs":[{"name":"kernel"},{"name":"d"},{"name":"kernelworkgroupinfo"}],"output":{"name":"kernelworkgroupinforesult"}}],[5,"wait_for_events","","Blocks until the first `num_events` events in `event_list` are complete.",null,{"inputs":[{"name":"u32"},{"name":"clwaitlist"}],"output":{"name":"oclresult"}}],[5,"get_event_info","","Get event info.",null,{"inputs":[{"name":"event"},{"name":"eventinfo"}],"output":{"name":"eventinforesult"}}],[5,"create_user_event","","[UNTESTED]\nCreates an event not already associated with any command.",null,{"inputs":[{"name":"context"}],"output":{"name":"oclresult"}}],[5,"retain_event","","Increments an event&#39;s reference counter.",null,{"inputs":[{"name":"e"}],"output":{"name":"oclresult"}}],[5,"release_event","","Decrements an event&#39;s reference counter.",null,{"inputs":[{"name":"e"}],"output":{"name":"oclresult"}}],[5,"set_user_event_status","","[UNTESTED]\nUpdates a user events status.",null,{"inputs":[{"name":"e"},{"name":"commandexecutionstatus"}],"output":{"name":"oclresult"}}],[5,"set_event_callback","","Sets a callback function which is called as soon as the `callback_trigger`\nstatus is reached.",null,null],[5,"get_event_profiling_info","","Get event profiling info (for debugging / benchmarking).",null,{"inputs":[{"name":"event"},{"name":"profilinginfo"}],"output":{"name":"profilinginforesult"}}],[5,"flush","","[UNTESTED]\nFlushes a command queue.",null,{"inputs":[{"name":"commandqueue"}],"output":{"name":"oclresult"}}],[5,"finish","","Waits for a queue to finish.",null,{"inputs":[{"name":"commandqueue"}],"output":{"name":"oclresult"}}],[5,"enqueue_read_buffer","","Enqueues a read from device memory referred to by `buffer` to device memory,\n`data`.",null,null],[5,"enqueue_read_buffer_rect","","Enqueues a command to read from a rectangular region from a buffer object to host memory.",null,null],[5,"enqueue_write_buffer","","Enqueues a write from host memory, `data`, to device memory referred to by\n`buffer`.",null,null],[5,"enqueue_write_buffer_rect","","Enqueues a command to write from a rectangular region from host memory to a buffer object.",null,null],[5,"enqueue_copy_buffer","","[UNTESTED]\nCopies the contents of one buffer to another.",null,{"inputs":[{"name":"commandqueue"},{"name":"mem"},{"name":"mem"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"create_from_gl_buffer","","[UNTESTED]\nReturn a buffer pointer from a `OpenGL` buffer object.",null,{"inputs":[{"name":"context"},{"name":"cl_gluint"},{"name":"memflags"}],"output":{"name":"oclresult"}}],[5,"create_from_gl_renderbuffer","","[UNTESTED]\nReturn a renderbuffer pointer from a `OpenGL` renderbuffer object.",null,{"inputs":[{"name":"context"},{"name":"cl_gluint"},{"name":"memflags"}],"output":{"name":"oclresult"}}],[5,"create_from_gl_texture","","[UNTESTED]\nReturn a texture2D pointer from a `OpenGL` texture2D object.",null,{"inputs":[{"name":"context"},{"name":"cl_glenum"},{"name":"cl_glint"},{"name":"cl_gluint"},{"name":"memflags"}],"output":{"name":"oclresult"}}],[5,"create_from_gl_texture_2d","","[UNTESTED] [DEPRICATED]\nReturn a texture2D pointer from a `OpenGL` texture2D object.",null,{"inputs":[{"name":"context"},{"name":"cl_glenum"},{"name":"cl_glint"},{"name":"cl_gluint"},{"name":"memflags"}],"output":{"name":"oclresult"}}],[5,"create_from_gl_texture_3d","","[UNTESTED] [DEPRICATED]\nReturn a texture3D pointer from a `OpenGL` texture3D object.",null,{"inputs":[{"name":"context"},{"name":"cl_glenum"},{"name":"cl_glint"},{"name":"cl_gluint"},{"name":"memflags"}],"output":{"name":"oclresult"}}],[5,"enqueue_acquire_gl_buffer","","[UNTESTED]\nEnqueue acquire OpenCL memory objects that have been created from `OpenGL` objects.",null,{"inputs":[{"name":"commandqueue"},{"name":"mem"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"enqueue_release_gl_buffer","","[UNTESTED]\nEnqueue release OpenCL memory objects that have been created from `OpenGL` objects.",null,{"inputs":[{"name":"commandqueue"},{"name":"mem"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"enqueue_fill_buffer","","Enqueues a command to fill a buffer object with a pattern of a given pattern size.",null,{"inputs":[{"name":"commandqueue"},{"name":"mem"},{"name":"t"},{"name":"usize"},{"name":"usize"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"enqueue_copy_buffer_rect","","Enqueues a command to copy a rectangular region from a buffer object to\nanother buffer object.",null,null],[5,"enqueue_read_image","","Reads an image from device to host memory.",null,null],[5,"enqueue_write_image","","Enqueues a command to write to an image or image array object from host memory.",null,null],[5,"enqueue_fill_image","","[UNTESTED]\nEnqueues a command to fill an image object with a specified color.",null,null],[5,"enqueue_copy_image","","Enqueues a command to copy image objects.",null,null],[5,"enqueue_copy_image_to_buffer","","[UNTESTED]\nEnqueues a command to copy an image object to a buffer object.",null,null],[5,"enqueue_copy_buffer_to_image","","[UNTESTED]\nEnqueues a command to copy a buffer object to an image object.",null,null],[5,"enqueue_map_buffer","","[UNTESTED]\nEnqueues a command to map a region of the buffer object given\nby `buffer` into the host address space and returns a pointer to this\nmapped region.",null,{"inputs":[{"name":"commandqueue"},{"name":"mem"},{"name":"bool"},{"name":"mapflags"},{"name":"usize"},{"name":"usize"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"enqueue_map_image","","[UNTESTED]\nEnqueues a command to map a region of the image object given by `image` into\nthe host address space and returns a pointer to this mapped region.",null,null],[5,"enqueue_unmap_mem_object","","[UNTESTED]\nEnqueues a command to unmap a previously mapped region of a memory object.",null,null],[5,"enqueue_migrate_mem_objects","","[UNTESTED]\nEnqueues a command to indicate which device a set of memory objects should\nbe associated with.",null,null],[5,"enqueue_kernel","","Enqueues a command to execute a kernel on a device.",null,null],[5,"enqueue_task","","[UNTESTED] Enqueues a command to execute a kernel on a device.",null,{"inputs":[{"name":"commandqueue"},{"name":"kernel"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"enqueue_native_kernel","","[UNIMPLEMENTED]",null,{"inputs":[],"output":{"name":"oclresult"}}],[5,"enqueue_marker_with_wait_list","","[UNTESTED]\nEnqueues a marker command which waits for either a list of events to\ncomplete, or all previously enqueued commands to complete.",null,{"inputs":[{"name":"commandqueue"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"enqueue_barrier_with_wait_list","","[UNTESTED]\nA synchronization point that enqueues a barrier operation.",null,{"inputs":[{"name":"commandqueue"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"get_extension_function_address_for_platform","","[UNTESTED]\nReturns the address of the extension function named by\n`func_name` for a given platform.",null,{"inputs":[{"name":"platformid"},{"name":"str"},{"name":"option"}],"output":{"name":"oclresult"}}],[5,"wait_for_event","","Blocks until an event is complete.",null,{"inputs":[{"name":"event"}],"output":{"name":"oclresult"}}],[5,"get_event_status","","Returns the status of `event`.",null,{"inputs":[{"name":"e"}],"output":{"name":"oclresult"}}],[5,"default_platform_idx","","Returns the default platform if set by an environment variable or config\nfile.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"program_build_err","","If the program pointed to by `cl_program` for any of the devices listed in\n`device_ids` has a build log of any length, it will be returned as an\nerrcode result.",null,null],[5,"verify_context","","Verifies that the `context` is in fact a context object pointer.",null,{"inputs":[{"name":"context"}],"output":{"name":"oclresult"}}],[5,"default_platform","","Returns the default or first platform.",null,{"inputs":[],"output":{"name":"oclresult"}}],[5,"default_device_type","","Returns the default device type bitflags as specified by environment\nvariable or else `DEVICE_TYPE_ALL`.",null,{"inputs":[],"output":{"name":"oclresult"}}],[5,"device_versions","","Returns a list of versions for devices.",null,null],[0,"types","","",null,null],[0,"abs","ocl_core::types","Abstract data type wrappers.",null,null],[3,"EventRefWrapper","ocl_core::types::abs","Wrapper used by `EventList` to send event pointers to core functions\ncheaply.",null,null],[3,"PlatformId","","cl_platform_id",null,null],[3,"DeviceId","","cl_device_id",null,null],[3,"Context","","cl_context",null,null],[3,"CommandQueue","","cl_command_queue",null,null],[3,"Mem","","cl_mem",null,null],[3,"Program","","cl_program",null,null],[3,"Kernel","","cl_kernel",null,null],[3,"Event","","cl_event",null,null],[3,"EventList","","List of `cl_event`s.",null,null],[3,"Sampler","","cl_sampler",null,null],[8,"ClVersions","","Types with a fixed set of associated devices and an associated platform.",null,null],[10,"device_versions","","",36,null],[10,"platform_version","","",36,null],[11,"verify_device_versions","","",36,null],[11,"verify_platform_version","","",36,null],[8,"ClEventPtrNew","","Types with a mutable pointer to a new, null raw event pointer.",null,null],[10,"ptr_mut_ptr_new","","",37,null],[8,"ClEventRef","","Types with a reference to a raw event pointer.",null,null],[10,"as_ptr_ref","","",38,null],[8,"ClWaitList","","Types with a reference to a raw event array and an associated element\ncount.",null,null],[10,"as_ptr_ptr","","",39,null],[10,"count","","",39,null],[8,"ClPlatformIdPtr","","Types with a reference to a raw platform_id pointer.",null,null],[11,"as_ptr","","",40,null],[8,"ClDeviceIdPtr","","Types with a reference to a raw device_id pointer.",null,null],[11,"as_ptr","","",41,null],[11,"as_ptr_ref","","",42,null],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"hash","","",43,null],[11,"from_fresh_ptr","","Only call this when passing a newly created pointer directly from\n`clCreate...`. Do not use this to clone or copy.",43,{"inputs":[{"name":"cl_platform_id"}],"output":{"name":"platformid"}}],[11,"null","","",43,{"inputs":[],"output":{"name":"platformid"}}],[11,"as_ptr","","Returns a pointer.",43,null],[11,"version","","Returns the looked up and parsed OpenCL version for this platform.",43,null],[11,"eq","","",43,null],[11,"device_versions","","",43,null],[11,"platform_version","","",43,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"hash","","",44,null],[11,"from_fresh_ptr","","Only call this when passing a newly created pointer directly from\n`clCreate...`. Do not use this to clone or copy.",44,{"inputs":[{"name":"cl_device_id"}],"output":{"name":"deviceid"}}],[11,"from_copied_ptr","","Only call this when passing a copied pointer such as from an\n`clGet*****Info` function.",44,{"inputs":[{"name":"cl_device_id"}],"output":{"name":"deviceid"}}],[11,"null","","",44,{"inputs":[],"output":{"name":"deviceid"}}],[11,"as_ptr","","Returns a pointer.",44,null],[11,"version","","Returns the looked up and parsed OpenCL version for this device.",44,null],[11,"eq","","",44,null],[11,"device_versions","","",44,null],[11,"platform_version","","",44,null],[11,"fmt","","",45,null],[11,"from_fresh_ptr","","Only call this when passing a newly created pointer directly from\n`clCreate...`. Do not use this to clone or copy.",45,{"inputs":[{"name":"cl_context"}],"output":{"name":"context"}}],[11,"from_copied_ptr","","Only call this when passing a copied pointer such as from an\n`clGet*****Info` function.",45,{"inputs":[{"name":"cl_context"}],"output":{"name":"context"}}],[11,"as_ptr","","Returns a pointer, do not store it.",45,null],[11,"clone","","",45,null],[11,"drop","","Panics in the event of an error of type `Error::Status` except when\nthe status code is `CL_INVALID_CONTEXT` (which is ignored).",45,null],[11,"eq","","",45,null],[11,"device_versions","","",45,null],[11,"platform_version","","",45,null],[11,"fmt","","",46,null],[11,"from_fresh_ptr","","Only call this when passing a newly created pointer directly from\n`clCreate...`. Do not use this to clone or copy.",46,{"inputs":[{"name":"cl_command_queue"}],"output":{"name":"commandqueue"}}],[11,"from_copied_ptr","","Only call this when passing a copied pointer such as from an\n`clGet*****Info` function.",46,{"inputs":[{"name":"cl_command_queue"}],"output":{"name":"commandqueue"}}],[11,"as_ptr","","Returns a pointer, do not store it.",46,null],[11,"device","","Returns the `DeviceId` associated with this command queue.",46,null],[11,"clone","","",46,null],[11,"drop","","",46,null],[11,"as_ref","","",46,null],[11,"device_versions","","",46,null],[11,"platform_version","","",46,null],[11,"fmt","","",47,null],[11,"from_fresh_ptr","","Only call this when passing a newly created pointer directly from\n`clCreate...`. Do not use this to clone or copy.",47,{"inputs":[{"name":"cl_mem"}],"output":{"name":"mem"}}],[11,"from_copied_ptr","","Only call this when passing a copied pointer such as from an\n`clGet*****Info` function.",47,{"inputs":[{"name":"cl_mem"}],"output":{"name":"mem"}}],[11,"as_ptr","","Returns a pointer, do not store it.",47,null],[11,"clone","","",47,null],[11,"drop","","",47,null],[11,"fmt","","",48,null],[11,"from_fresh_ptr","","Only call this when passing a newly created pointer directly from\n`clCreate...`. Do not use this to clone or copy.",48,{"inputs":[{"name":"cl_program"}],"output":{"name":"program"}}],[11,"from_copied_ptr","","Only call this when passing a copied pointer such as from an\n`clGet*****Info` function.",48,{"inputs":[{"name":"cl_program"}],"output":{"name":"program"}}],[11,"as_ptr","","Returns a pointer, do not store it.",48,null],[11,"devices","","Returns the devices associated with this program.",48,null],[11,"clone","","",48,null],[11,"drop","","",48,null],[11,"device_versions","","",48,null],[11,"platform_version","","",48,null],[11,"fmt","","",49,null],[11,"from_fresh_ptr","","Only call this when passing a newly created pointer directly from\n`clCreate...`. Do not use this to clone or copy.",49,{"inputs":[{"name":"cl_kernel"}],"output":{"name":"kernel"}}],[11,"as_ptr","","Returns a pointer, do not store it.",49,null],[11,"program","","Returns the program associated with this kernel.",49,null],[11,"clone","","",49,null],[11,"drop","","",49,null],[11,"device_versions","","",49,null],[11,"platform_version","","",49,null],[11,"fmt","","",50,null],[11,"from_fresh_ptr","","Only call this when passing a newly created pointer directly from\n`clCreate...`. Do not use this to clone or copy.",50,{"inputs":[{"name":"cl_event"}],"output":{"name":"event"}}],[11,"from_cloned_ptr","","Only use when cloning from a pre-existing and valid `cl_event`.",50,{"inputs":[{"name":"cl_event"}],"output":{"name":"oclresult"}}],[11,"null","","For passage directly to an &#39;event creation&#39; function (such as enqueue).",50,{"inputs":[],"output":{"name":"event"}}],[11,"as_ptr_ref","","Returns an immutable reference to a pointer, do not deref and store it unless\nyou will manage its associated reference count carefully.",50,null],[11,"as_ptr_mut","","Returns a mutable reference to a pointer, do not deref then modify or store it\nunless you will manage its associated reference count carefully.",50,null],[11,"is_valid","","[FIXME]: ADD VALIDITY CHECK BY CALLING &#39;_INFO&#39; OR SOMETHING:\nNULL CHECK IS NOT ENOUGH",50,null],[11,"ptr_mut_ptr_new","","",50,null],[11,"as_ptr_ref","","",50,null],[11,"as_ptr_ptr","","",50,null],[11,"count","","",50,null],[11,"clone","","",50,null],[11,"drop","","",50,null],[11,"fmt","","",51,null],[11,"new","","Returns a new, empty, `EventList`.",51,{"inputs":[],"output":{"name":"eventlist"}}],[11,"push","","Pushes a new event onto the list.",51,null],[11,"pop","","Removes the last event from the list and returns it.",51,null],[11,"allot","","Appends a new null element to the end of the list and returns a reference to it.",51,null],[11,"len","","",51,null],[11,"is_empty","","",51,null],[11,"count","","",51,null],[11,"as_ptr_ref","","Returns an immutable reference to a pointer, do not deref and store it unless\nyou will manage its associated reference count carefully.",51,null],[11,"get_clone","","Clones an event by index.",51,null],[11,"last_clone","","Clones the last event.",51,null],[11,"clear_completed","","Clears each completed event from the list.",51,null],[11,"ptr_mut_ptr_new","","",51,null],[11,"as_ptr_ptr","","",51,null],[11,"count","","",51,null],[11,"clone","","Clones this list in a thread safe manner.",51,null],[11,"drop","","",51,null],[11,"as_ref","","",51,null],[11,"fmt","","",52,null],[11,"from_fresh_ptr","","Only call this when passing a newly created pointer directly from\n`clCreate...`. Do not use this to clone or copy.",52,{"inputs":[{"name":"cl_sampler"}],"output":{"name":"sampler"}}],[11,"as_ptr","","Returns a pointer, do not store it.",52,null],[11,"clone","","",52,null],[11,"drop","","",52,null],[0,"enums","ocl_core::types","Custom enumerators not specifically based on OpenCL C-style enums.",null,null],[4,"KernelArg","ocl_core::types::enums","[UNSAFE] Kernel argument option type.",null,null],[13,"Mem","","Type `T` is ignored.",53,null],[13,"MemNull","","Type `T` is ignored.",53,null],[13,"Sampler","","Type `T` is ignored.",53,null],[13,"SamplerNull","","Type `T` is ignored.",53,null],[13,"Scalar","","",53,null],[13,"Vector","","",53,null],[13,"Local","","Length in multiples of T (not bytes).",53,null],[13,"UnsafePointer","","`size`: size in bytes. Type `T` is ignored.",53,null],[12,"size","ocl_core::types::enums::KernelArg","",53,null],[12,"value","","",53,null],[4,"PlatformInfoResult","ocl_core::types::enums","Platform info result.",null,null],[13,"Profile","","",54,null],[13,"Version","","",54,null],[13,"Name","","",54,null],[13,"Vendor","","",54,null],[13,"Extensions","","",54,null],[13,"Error","","",54,null],[4,"DeviceInfoResult","","[UNSTABLE][INCOMPLETE] A device info result.",null,null],[13,"Type","","",55,null],[13,"VendorId","","",55,null],[13,"MaxComputeUnits","","",55,null],[13,"MaxWorkItemDimensions","","",55,null],[13,"MaxWorkGroupSize","","",55,null],[13,"MaxWorkItemSizes","","",55,null],[13,"PreferredVectorWidthChar","","",55,null],[13,"PreferredVectorWidthShort","","",55,null],[13,"PreferredVectorWidthInt","","",55,null],[13,"PreferredVectorWidthLong","","",55,null],[13,"PreferredVectorWidthFloat","","",55,null],[13,"PreferredVectorWidthDouble","","",55,null],[13,"MaxClockFrequency","","",55,null],[13,"AddressBits","","",55,null],[13,"MaxReadImageArgs","","",55,null],[13,"MaxWriteImageArgs","","",55,null],[13,"MaxMemAllocSize","","",55,null],[13,"Image2dMaxWidth","","",55,null],[13,"Image2dMaxHeight","","",55,null],[13,"Image3dMaxWidth","","",55,null],[13,"Image3dMaxHeight","","",55,null],[13,"Image3dMaxDepth","","",55,null],[13,"ImageSupport","","",55,null],[13,"MaxParameterSize","","",55,null],[13,"MaxSamplers","","",55,null],[13,"MemBaseAddrAlign","","",55,null],[13,"MinDataTypeAlignSize","","",55,null],[13,"SingleFpConfig","","",55,null],[13,"GlobalMemCacheType","","",55,null],[13,"GlobalMemCachelineSize","","",55,null],[13,"GlobalMemCacheSize","","",55,null],[13,"GlobalMemSize","","",55,null],[13,"MaxConstantBufferSize","","",55,null],[13,"MaxConstantArgs","","",55,null],[13,"LocalMemType","","",55,null],[13,"LocalMemSize","","",55,null],[13,"ErrorCorrectionSupport","","",55,null],[13,"ProfilingTimerResolution","","",55,null],[13,"EndianLittle","","",55,null],[13,"Available","","",55,null],[13,"CompilerAvailable","","",55,null],[13,"ExecutionCapabilities","","",55,null],[13,"QueueProperties","","",55,null],[13,"Name","","",55,null],[13,"Vendor","","",55,null],[13,"DriverVersion","","",55,null],[13,"Profile","","",55,null],[13,"Version","","",55,null],[13,"Extensions","","",55,null],[13,"Platform","","",55,null],[13,"DoubleFpConfig","","",55,null],[13,"HalfFpConfig","","",55,null],[13,"PreferredVectorWidthHalf","","",55,null],[13,"HostUnifiedMemory","","",55,null],[13,"NativeVectorWidthChar","","",55,null],[13,"NativeVectorWidthShort","","",55,null],[13,"NativeVectorWidthInt","","",55,null],[13,"NativeVectorWidthLong","","",55,null],[13,"NativeVectorWidthFloat","","",55,null],[13,"NativeVectorWidthDouble","","",55,null],[13,"NativeVectorWidthHalf","","",55,null],[13,"OpenclCVersion","","",55,null],[13,"LinkerAvailable","","",55,null],[13,"BuiltInKernels","","",55,null],[13,"ImageMaxBufferSize","","",55,null],[13,"ImageMaxArraySize","","",55,null],[13,"ParentDevice","","",55,null],[13,"PartitionMaxSubDevices","","",55,null],[13,"PartitionProperties","","",55,null],[13,"PartitionAffinityDomain","","",55,null],[13,"PartitionType","","",55,null],[13,"ReferenceCount","","",55,null],[13,"PreferredInteropUserSync","","",55,null],[13,"PrintfBufferSize","","",55,null],[13,"ImagePitchAlignment","","",55,null],[13,"ImageBaseAddressAlignment","","",55,null],[13,"Error","","",55,null],[4,"ContextInfoResult","","[UNSTABLE][INCOMPLETE] A context info result.",null,null],[13,"ReferenceCount","","",56,null],[13,"Devices","","",56,null],[13,"Properties","","",56,null],[13,"NumDevices","","",56,null],[13,"Error","","",56,null],[4,"CommandQueueInfoResult","","A command queue info result.",null,null],[13,"Context","","",57,null],[13,"Device","","",57,null],[13,"ReferenceCount","","",57,null],[13,"Properties","","",57,null],[13,"Error","","",57,null],[4,"MemInfoResult","","[UNSTABLE][INCOMPLETE] A mem info result. /",null,null],[13,"Type","","",58,null],[13,"Flags","","",58,null],[13,"Size","","",58,null],[13,"HostPtr","","",58,null],[13,"MapCount","","",58,null],[13,"ReferenceCount","","",58,null],[13,"Context","","",58,null],[13,"AssociatedMemobject","","",58,null],[13,"Offset","","",58,null],[13,"Error","","",58,null],[4,"ImageInfoResult","","An image info result.",null,null],[13,"Format","","",59,null],[13,"ElementSize","","",59,null],[13,"RowPitch","","",59,null],[13,"SlicePitch","","",59,null],[13,"Width","","",59,null],[13,"Height","","",59,null],[13,"Depth","","",59,null],[13,"ArraySize","","",59,null],[13,"Buffer","","",59,null],[13,"NumMipLevels","","",59,null],[13,"NumSamples","","",59,null],[13,"Error","","",59,null],[4,"SamplerInfoResult","","A sampler info result.",null,null],[13,"ReferenceCount","","",60,null],[13,"Context","","",60,null],[13,"NormalizedCoords","","",60,null],[13,"AddressingMode","","",60,null],[13,"FilterMode","","",60,null],[13,"Error","","",60,null],[4,"ProgramInfoResult","","A program info result.",null,null],[13,"ReferenceCount","","",61,null],[13,"Context","","",61,null],[13,"NumDevices","","",61,null],[13,"Devices","","",61,null],[13,"Source","","",61,null],[13,"BinarySizes","","",61,null],[13,"Binaries","","",61,null],[13,"NumKernels","","",61,null],[13,"KernelNames","","",61,null],[13,"Error","","",61,null],[4,"ProgramBuildInfoResult","","A program build info result.",null,null],[13,"BuildStatus","","",62,null],[13,"BuildOptions","","",62,null],[13,"BuildLog","","",62,null],[13,"BinaryType","","",62,null],[13,"Error","","",62,null],[4,"KernelInfoResult","","A kernel info result.",null,null],[13,"FunctionName","","",63,null],[13,"NumArgs","","",63,null],[13,"ReferenceCount","","",63,null],[13,"Context","","",63,null],[13,"Program","","",63,null],[13,"Attributes","","",63,null],[13,"Error","","",63,null],[4,"KernelArgInfoResult","","A kernel arg info result.",null,null],[13,"AddressQualifier","","",64,null],[13,"AccessQualifier","","",64,null],[13,"TypeName","","",64,null],[13,"TypeQualifier","","",64,null],[13,"Name","","",64,null],[13,"Error","","",64,null],[4,"KernelWorkGroupInfoResult","","A kernel work group info result.",null,null],[13,"WorkGroupSize","","",65,null],[13,"CompileWorkGroupSize","","",65,null],[13,"LocalMemSize","","",65,null],[13,"PreferredWorkGroupSizeMultiple","","",65,null],[13,"PrivateMemSize","","",65,null],[13,"GlobalWorkSize","","",65,null],[13,"Error","","",65,null],[4,"EventInfoResult","","An event info result.",null,null],[13,"CommandQueue","","",66,null],[13,"CommandType","","",66,null],[13,"ReferenceCount","","",66,null],[13,"CommandExecutionStatus","","",66,null],[13,"Context","","",66,null],[13,"Error","","",66,null],[4,"ProfilingInfoResult","","A profiling info result.",null,null],[13,"Queued","","",67,null],[13,"Submit","","",67,null],[13,"Start","","",67,null],[13,"End","","",67,null],[13,"Error","","",67,null],[11,"fmt","","",53,null],[11,"from_bytes","","",54,{"inputs":[{"name":"platforminfo"},{"name":"oclresult"}],"output":{"name":"platforminforesult"}}],[11,"as_opencl_version","","Parse the `Version` string and get a numeric result as `OpenclVersion`.",54,null],[11,"fmt","","",54,null],[11,"fmt","","",54,null],[11,"into","","",54,null],[11,"from","","",54,{"inputs":[{"name":"oclerror"}],"output":{"name":"platforminforesult"}}],[11,"from","","",54,{"inputs":[{"name":"intostringerror"}],"output":{"name":"platforminforesult"}}],[11,"from","","",54,{"inputs":[{"name":"nulerror"}],"output":{"name":"platforminforesult"}}],[11,"description","","",54,null],[11,"from_bytes_max_work_item_sizes","","Returns a new `DeviceInfoResult::MaxWorkItemSizes` variant.",55,{"inputs":[{"name":"deviceinfo"},{"name":"oclresult"},{"name":"u32"}],"output":{"name":"deviceinforesult"}}],[11,"from_bytes","","Returns a new `DeviceInfoResult` for all variants except `MaxWorkItemSizes`.",55,{"inputs":[{"name":"deviceinfo"},{"name":"oclresult"}],"output":{"name":"deviceinforesult"}}],[11,"as_opencl_version","","Parse the `Version` string and get a numeric result as `OpenclVersion`.",55,null],[11,"fmt","","",55,null],[11,"fmt","","",55,null],[11,"into","","",55,null],[11,"from","","",55,{"inputs":[{"name":"oclerror"}],"output":{"name":"deviceinforesult"}}],[11,"description","","",55,null],[11,"from_bytes","","",56,{"inputs":[{"name":"contextinfo"},{"name":"oclresult"}],"output":{"name":"contextinforesult"}}],[11,"fmt","","",56,null],[11,"fmt","","",56,null],[11,"into","","",56,null],[11,"from","","",56,{"inputs":[{"name":"oclerror"}],"output":{"name":"contextinforesult"}}],[11,"description","","",56,null],[11,"from_bytes","","",57,{"inputs":[{"name":"commandqueueinfo"},{"name":"oclresult"}],"output":{"name":"commandqueueinforesult"}}],[11,"fmt","","",57,null],[11,"fmt","","",57,null],[11,"into","","",57,null],[11,"from","","",57,{"inputs":[{"name":"oclerror"}],"output":{"name":"commandqueueinforesult"}}],[11,"description","","",57,null],[11,"from_bytes","","",58,{"inputs":[{"name":"meminfo"},{"name":"oclresult"}],"output":{"name":"meminforesult"}}],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"into","","",58,null],[11,"from","","",58,{"inputs":[{"name":"oclerror"}],"output":{"name":"meminforesult"}}],[11,"description","","",58,null],[11,"from_bytes","","",59,{"inputs":[{"name":"imageinfo"},{"name":"oclresult"}],"output":{"name":"imageinforesult"}}],[11,"fmt","","",59,null],[11,"fmt","","",59,null],[11,"into","","",59,null],[11,"from","","",59,{"inputs":[{"name":"oclerror"}],"output":{"name":"imageinforesult"}}],[11,"description","","",59,null],[11,"from_bytes","","",60,{"inputs":[{"name":"samplerinfo"},{"name":"oclresult"}],"output":{"name":"samplerinforesult"}}],[11,"fmt","","",60,null],[11,"fmt","","",60,null],[11,"into","","",60,null],[11,"from","","",60,{"inputs":[{"name":"oclerror"}],"output":{"name":"samplerinforesult"}}],[11,"description","","",60,null],[11,"from_bytes","","",61,{"inputs":[{"name":"programinfo"},{"name":"oclresult"}],"output":{"name":"programinforesult"}}],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"into","","",61,null],[11,"from","","",61,{"inputs":[{"name":"oclerror"}],"output":{"name":"programinforesult"}}],[11,"description","","",61,null],[11,"from_bytes","","",62,{"inputs":[{"name":"programbuildinfo"},{"name":"oclresult"}],"output":{"name":"programbuildinforesult"}}],[11,"fmt","","",62,null],[11,"fmt","","",62,null],[11,"into","","",62,null],[11,"from","","",62,{"inputs":[{"name":"oclerror"}],"output":{"name":"programbuildinforesult"}}],[11,"description","","",62,null],[11,"from_bytes","","",63,{"inputs":[{"name":"kernelinfo"},{"name":"oclresult"}],"output":{"name":"kernelinforesult"}}],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"into","","",63,null],[11,"from","","",63,{"inputs":[{"name":"oclerror"}],"output":{"name":"kernelinforesult"}}],[11,"description","","",63,null],[11,"from_bytes","","",64,{"inputs":[{"name":"kernelarginfo"},{"name":"oclresult"}],"output":{"name":"kernelarginforesult"}}],[11,"fmt","","",64,null],[11,"fmt","","",64,null],[11,"into","","",64,null],[11,"from","","",64,{"inputs":[{"name":"oclerror"}],"output":{"name":"kernelarginforesult"}}],[11,"description","","",64,null],[11,"from_bytes","","",65,{"inputs":[{"name":"kernelworkgroupinfo"},{"name":"oclresult"}],"output":{"name":"kernelworkgroupinforesult"}}],[11,"fmt","","",65,null],[11,"fmt","","",65,null],[11,"into","","",65,null],[11,"from","","",65,{"inputs":[{"name":"oclerror"}],"output":{"name":"kernelworkgroupinforesult"}}],[11,"description","","",65,null],[11,"from_bytes","","",66,{"inputs":[{"name":"eventinfo"},{"name":"oclresult"}],"output":{"name":"eventinforesult"}}],[11,"fmt","","",66,null],[11,"fmt","","",66,null],[11,"into","","",66,null],[11,"from","","",66,{"inputs":[{"name":"oclerror"}],"output":{"name":"eventinforesult"}}],[11,"description","","",66,null],[11,"from_bytes","","",67,{"inputs":[{"name":"profilinginfo"},{"name":"oclresult"}],"output":{"name":"profilinginforesult"}}],[11,"fmt","","",67,null],[11,"fmt","","",67,null],[11,"into","","",67,null],[11,"from","","",67,{"inputs":[{"name":"oclerror"}],"output":{"name":"profilinginforesult"}}],[11,"description","","",67,null],[0,"structs","ocl_core::types","Rust implementations of various structs used by the OpenCL API.",null,null],[3,"OpenclVersion","ocl_core::types::structs","Parsed OpenCL version in the layout `({major}, {minor})`.",null,null],[3,"ContextProperties","","Context properties list.",null,null],[3,"BufferRegion","","Defines a buffer region for creating a sub-buffer.",null,null],[12,"origin","","",68,null],[12,"size","","",68,null],[3,"ImageFormat","","Image format properties used by `Image`.",null,null],[12,"channel_order","","",69,null],[12,"channel_data_type","","",69,null],[3,"ImageDescriptor","","An image descriptor use in the creation of `Image`.",null,null],[12,"image_type","","",70,null],[12,"image_width","","",70,null],[12,"image_height","","",70,null],[12,"image_depth","","",70,null],[12,"image_array_size","","",70,null],[12,"image_row_pitch","","",70,null],[12,"image_slice_pitch","","",70,null],[12,"buffer","","",70,null],[4,"ContextPropertyValue","","",null,null],[13,"Platform","","",71,null],[13,"InteropUserSync","","",71,null],[13,"D3d10DeviceKhr","","",71,null],[13,"GlContextKhr","","",71,null],[13,"EglDisplayKhr","","",71,null],[13,"GlxDisplayKhr","","",71,null],[13,"CglSharegroupKhr","","",71,null],[13,"WglHdcKhr","","",71,null],[13,"AdapterD3d9Khr","","",71,null],[13,"AdapterD3d9exKhr","","",71,null],[13,"AdapterDxvaKhr","","",71,null],[13,"D3d11DeviceKhr","","",71,null],[6,"TemporaryPlaceholderType","","",null,null],[11,"fmt","","",72,null],[11,"clone","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"partial_cmp","","",72,null],[11,"lt","","",72,null],[11,"le","","",72,null],[11,"gt","","",72,null],[11,"ge","","",72,null],[11,"cmp","","",72,null],[11,"new","","",72,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"openclversion"}}],[11,"max","","",72,null],[11,"from_info_str","","Parse the string `ver` and return a dual-integer result as\n`OpenclVersion`.",72,{"inputs":[{"name":"str"}],"output":{"name":"oclresult"}}],[11,"from","","",72,null],[11,"fmt","","",72,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"new","","Returns an empty new list of context properties",73,{"inputs":[],"output":{"name":"contextproperties"}}],[11,"platform","","Specifies a platform (builder-style).",73,null],[11,"interop_user_sync","","Specifies whether the user is responsible for synchronization between\nOpenCL and other APIs (builder-style).",73,null],[11,"gl_context","","Specifies an OpenGL context handle (builder-style).",73,null],[11,"cgl_sharegroup","","Specifies an OpenGL context CGL share group to\nassociate the OpenCL context with (builder-style).",73,null],[11,"property_value","","Pushes a `ContextPropertyValue` onto this list of properties\n(builder-style).",73,null],[11,"set_platform","","Specifies a platform.",73,null],[11,"set_interop_user_sync","","Specifies whether the user is responsible for synchronization between\nOpenCL and other APIs.",73,null],[11,"set_gl_context","","Specifies an OpenGL context handle.",73,null],[11,"set_cgl_sharegroup","","Specifies an OpenGL context CGL share group to\nassociate the OpenCL context with.",73,null],[11,"set_property_value","","Pushes a `ContextPropertyValue` onto this list of properties.",73,null],[11,"get_platform","","Returns a platform id or none.",73,null],[11,"get_cgl_sharegroup","","Returns a cgl_sharegroup id or none.",73,null],[11,"to_raw","","Converts this list into a packed-word representation as specified\n[here](https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/clCreateContext.html).",73,null],[11,"into","","",73,null],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"new","","",69,{"inputs":[{"name":"imagechannelorder"},{"name":"imagechanneldatatype"}],"output":{"name":"imageformat"}}],[11,"new_rgba","","",69,{"inputs":[],"output":{"name":"imageformat"}}],[11,"from_raw","","",69,{"inputs":[{"name":"cl_image_format"}],"output":{"name":"oclresult"}}],[11,"list_from_raw","","",69,{"inputs":[{"name":"vec"}],"output":{"name":"oclresult"}}],[11,"to_raw","","",69,null],[11,"new_raw","","",69,{"inputs":[],"output":{"name":"cl_image_format"}}],[11,"pixel_bytes","","Returns the size in bytes of a pixel using the format specified by this\n`ImageFormat`.",69,null],[11,"fmt","","",70,null],[11,"clone","","",70,null],[11,"new","","",70,{"inputs":[{"name":"memobjecttype"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"option"}],"output":{"name":"imagedescriptor"}}],[11,"to_raw","","",70,null],[0,"vectors","ocl_core::types","OpenCL vector types.",null,null],[3,"ClChar2","ocl_core::types::vectors","",null,null],[12,"0","","",74,null],[12,"1","","",74,null],[3,"ClChar3","","",null,null],[12,"0","","",75,null],[12,"1","","",75,null],[12,"2","","",75,null],[3,"ClChar4","","",null,null],[12,"0","","",76,null],[12,"1","","",76,null],[12,"2","","",76,null],[12,"3","","",76,null],[3,"ClChar8","","",null,null],[12,"0","","",77,null],[12,"1","","",77,null],[12,"2","","",77,null],[12,"3","","",77,null],[12,"4","","",77,null],[12,"5","","",77,null],[12,"6","","",77,null],[12,"7","","",77,null],[3,"ClChar16","","",null,null],[12,"0","","",78,null],[12,"1","","",78,null],[12,"2","","",78,null],[12,"3","","",78,null],[12,"4","","",78,null],[12,"5","","",78,null],[12,"6","","",78,null],[12,"7","","",78,null],[12,"8","","",78,null],[12,"9","","",78,null],[12,"10","","",78,null],[12,"11","","",78,null],[12,"12","","",78,null],[12,"13","","",78,null],[12,"14","","",78,null],[12,"15","","",78,null],[3,"ClUchar2","","",null,null],[12,"0","","",79,null],[12,"1","","",79,null],[3,"ClUchar3","","",null,null],[12,"0","","",80,null],[12,"1","","",80,null],[12,"2","","",80,null],[3,"ClUchar4","","",null,null],[12,"0","","",81,null],[12,"1","","",81,null],[12,"2","","",81,null],[12,"3","","",81,null],[3,"ClUchar8","","",null,null],[12,"0","","",82,null],[12,"1","","",82,null],[12,"2","","",82,null],[12,"3","","",82,null],[12,"4","","",82,null],[12,"5","","",82,null],[12,"6","","",82,null],[12,"7","","",82,null],[3,"ClUchar16","","",null,null],[12,"0","","",83,null],[12,"1","","",83,null],[12,"2","","",83,null],[12,"3","","",83,null],[12,"4","","",83,null],[12,"5","","",83,null],[12,"6","","",83,null],[12,"7","","",83,null],[12,"8","","",83,null],[12,"9","","",83,null],[12,"10","","",83,null],[12,"11","","",83,null],[12,"12","","",83,null],[12,"13","","",83,null],[12,"14","","",83,null],[12,"15","","",83,null],[3,"ClShort2","","",null,null],[12,"0","","",84,null],[12,"1","","",84,null],[3,"ClShort3","","",null,null],[12,"0","","",85,null],[12,"1","","",85,null],[12,"2","","",85,null],[3,"ClShort4","","",null,null],[12,"0","","",86,null],[12,"1","","",86,null],[12,"2","","",86,null],[12,"3","","",86,null],[3,"ClShort8","","",null,null],[12,"0","","",87,null],[12,"1","","",87,null],[12,"2","","",87,null],[12,"3","","",87,null],[12,"4","","",87,null],[12,"5","","",87,null],[12,"6","","",87,null],[12,"7","","",87,null],[3,"ClShort16","","",null,null],[12,"0","","",88,null],[12,"1","","",88,null],[12,"2","","",88,null],[12,"3","","",88,null],[12,"4","","",88,null],[12,"5","","",88,null],[12,"6","","",88,null],[12,"7","","",88,null],[12,"8","","",88,null],[12,"9","","",88,null],[12,"10","","",88,null],[12,"11","","",88,null],[12,"12","","",88,null],[12,"13","","",88,null],[12,"14","","",88,null],[12,"15","","",88,null],[3,"ClUshort2","","",null,null],[12,"0","","",89,null],[12,"1","","",89,null],[3,"ClUshort3","","",null,null],[12,"0","","",90,null],[12,"1","","",90,null],[12,"2","","",90,null],[3,"ClUshort4","","",null,null],[12,"0","","",91,null],[12,"1","","",91,null],[12,"2","","",91,null],[12,"3","","",91,null],[3,"ClUshort8","","",null,null],[12,"0","","",92,null],[12,"1","","",92,null],[12,"2","","",92,null],[12,"3","","",92,null],[12,"4","","",92,null],[12,"5","","",92,null],[12,"6","","",92,null],[12,"7","","",92,null],[3,"ClUshort16","","",null,null],[12,"0","","",93,null],[12,"1","","",93,null],[12,"2","","",93,null],[12,"3","","",93,null],[12,"4","","",93,null],[12,"5","","",93,null],[12,"6","","",93,null],[12,"7","","",93,null],[12,"8","","",93,null],[12,"9","","",93,null],[12,"10","","",93,null],[12,"11","","",93,null],[12,"12","","",93,null],[12,"13","","",93,null],[12,"14","","",93,null],[12,"15","","",93,null],[3,"ClInt2","","",null,null],[12,"0","","",94,null],[12,"1","","",94,null],[3,"ClInt3","","",null,null],[12,"0","","",95,null],[12,"1","","",95,null],[12,"2","","",95,null],[3,"ClInt4","","",null,null],[12,"0","","",96,null],[12,"1","","",96,null],[12,"2","","",96,null],[12,"3","","",96,null],[3,"ClInt8","","",null,null],[12,"0","","",97,null],[12,"1","","",97,null],[12,"2","","",97,null],[12,"3","","",97,null],[12,"4","","",97,null],[12,"5","","",97,null],[12,"6","","",97,null],[12,"7","","",97,null],[3,"ClInt16","","",null,null],[12,"0","","",98,null],[12,"1","","",98,null],[12,"2","","",98,null],[12,"3","","",98,null],[12,"4","","",98,null],[12,"5","","",98,null],[12,"6","","",98,null],[12,"7","","",98,null],[12,"8","","",98,null],[12,"9","","",98,null],[12,"10","","",98,null],[12,"11","","",98,null],[12,"12","","",98,null],[12,"13","","",98,null],[12,"14","","",98,null],[12,"15","","",98,null],[3,"ClUint2","","",null,null],[12,"0","","",99,null],[12,"1","","",99,null],[3,"ClUint3","","",null,null],[12,"0","","",100,null],[12,"1","","",100,null],[12,"2","","",100,null],[3,"ClUint4","","",null,null],[12,"0","","",101,null],[12,"1","","",101,null],[12,"2","","",101,null],[12,"3","","",101,null],[3,"ClUint8","","",null,null],[12,"0","","",102,null],[12,"1","","",102,null],[12,"2","","",102,null],[12,"3","","",102,null],[12,"4","","",102,null],[12,"5","","",102,null],[12,"6","","",102,null],[12,"7","","",102,null],[3,"ClUint16","","",null,null],[12,"0","","",103,null],[12,"1","","",103,null],[12,"2","","",103,null],[12,"3","","",103,null],[12,"4","","",103,null],[12,"5","","",103,null],[12,"6","","",103,null],[12,"7","","",103,null],[12,"8","","",103,null],[12,"9","","",103,null],[12,"10","","",103,null],[12,"11","","",103,null],[12,"12","","",103,null],[12,"13","","",103,null],[12,"14","","",103,null],[12,"15","","",103,null],[3,"ClLong1","","",null,null],[12,"0","","",104,null],[3,"ClLong2","","",null,null],[12,"0","","",105,null],[12,"1","","",105,null],[3,"ClLong3","","",null,null],[12,"0","","",106,null],[12,"1","","",106,null],[12,"2","","",106,null],[3,"ClLong4","","",null,null],[12,"0","","",107,null],[12,"1","","",107,null],[12,"2","","",107,null],[12,"3","","",107,null],[3,"ClLong8","","",null,null],[12,"0","","",108,null],[12,"1","","",108,null],[12,"2","","",108,null],[12,"3","","",108,null],[12,"4","","",108,null],[12,"5","","",108,null],[12,"6","","",108,null],[12,"7","","",108,null],[3,"ClLong16","","",null,null],[12,"0","","",109,null],[12,"1","","",109,null],[12,"2","","",109,null],[12,"3","","",109,null],[12,"4","","",109,null],[12,"5","","",109,null],[12,"6","","",109,null],[12,"7","","",109,null],[12,"8","","",109,null],[12,"9","","",109,null],[12,"10","","",109,null],[12,"11","","",109,null],[12,"12","","",109,null],[12,"13","","",109,null],[12,"14","","",109,null],[12,"15","","",109,null],[3,"ClUlong1","","",null,null],[12,"0","","",110,null],[3,"ClUlong2","","",null,null],[12,"0","","",111,null],[12,"1","","",111,null],[3,"ClUlong3","","",null,null],[12,"0","","",112,null],[12,"1","","",112,null],[12,"2","","",112,null],[3,"ClUlong4","","",null,null],[12,"0","","",113,null],[12,"1","","",113,null],[12,"2","","",113,null],[12,"3","","",113,null],[3,"ClUlong8","","",null,null],[12,"0","","",114,null],[12,"1","","",114,null],[12,"2","","",114,null],[12,"3","","",114,null],[12,"4","","",114,null],[12,"5","","",114,null],[12,"6","","",114,null],[12,"7","","",114,null],[3,"ClUlong16","","",null,null],[12,"0","","",115,null],[12,"1","","",115,null],[12,"2","","",115,null],[12,"3","","",115,null],[12,"4","","",115,null],[12,"5","","",115,null],[12,"6","","",115,null],[12,"7","","",115,null],[12,"8","","",115,null],[12,"9","","",115,null],[12,"10","","",115,null],[12,"11","","",115,null],[12,"12","","",115,null],[12,"13","","",115,null],[12,"14","","",115,null],[12,"15","","",115,null],[3,"ClFloat2","","",null,null],[12,"0","","",116,null],[12,"1","","",116,null],[3,"ClFloat3","","",null,null],[12,"0","","",117,null],[12,"1","","",117,null],[12,"2","","",117,null],[3,"ClFloat4","","",null,null],[12,"0","","",118,null],[12,"1","","",118,null],[12,"2","","",118,null],[12,"3","","",118,null],[3,"ClFloat8","","",null,null],[12,"0","","",119,null],[12,"1","","",119,null],[12,"2","","",119,null],[12,"3","","",119,null],[12,"4","","",119,null],[12,"5","","",119,null],[12,"6","","",119,null],[12,"7","","",119,null],[3,"ClFloat16","","",null,null],[12,"0","","",120,null],[12,"1","","",120,null],[12,"2","","",120,null],[12,"3","","",120,null],[12,"4","","",120,null],[12,"5","","",120,null],[12,"6","","",120,null],[12,"7","","",120,null],[12,"8","","",120,null],[12,"9","","",120,null],[12,"10","","",120,null],[12,"11","","",120,null],[12,"12","","",120,null],[12,"13","","",120,null],[12,"14","","",120,null],[12,"15","","",120,null],[3,"ClDouble2","","",null,null],[12,"0","","",121,null],[12,"1","","",121,null],[3,"ClDouble3","","",null,null],[12,"0","","",122,null],[12,"1","","",122,null],[12,"2","","",122,null],[3,"ClDouble4","","",null,null],[12,"0","","",123,null],[12,"1","","",123,null],[12,"2","","",123,null],[12,"3","","",123,null],[3,"ClDouble8","","",null,null],[12,"0","","",124,null],[12,"1","","",124,null],[12,"2","","",124,null],[12,"3","","",124,null],[12,"4","","",124,null],[12,"5","","",124,null],[12,"6","","",124,null],[12,"7","","",124,null],[3,"ClDouble16","","",null,null],[12,"0","","",125,null],[12,"1","","",125,null],[12,"2","","",125,null],[12,"3","","",125,null],[12,"4","","",125,null],[12,"5","","",125,null],[12,"6","","",125,null],[12,"7","","",125,null],[12,"8","","",125,null],[12,"9","","",125,null],[12,"10","","",125,null],[12,"11","","",125,null],[12,"12","","",125,null],[12,"13","","",125,null],[12,"14","","",125,null],[12,"15","","",125,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"default","","",74,{"inputs":[],"output":{"name":"clchar2"}}],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"default","","",75,{"inputs":[],"output":{"name":"clchar3"}}],[11,"new","","",75,{"inputs":[{"name":"i8"},{"name":"i8"},{"name":"i8"}],"output":{"name":"clchar3"}}],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"fmt","","",76,null],[11,"clone","","",76,null],[11,"default","","",76,{"inputs":[],"output":{"name":"clchar4"}}],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"fmt","","",77,null],[11,"clone","","",77,null],[11,"default","","",77,{"inputs":[],"output":{"name":"clchar8"}}],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"fmt","","",78,null],[11,"clone","","",78,null],[11,"default","","",78,{"inputs":[],"output":{"name":"clchar16"}}],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"fmt","","",79,null],[11,"clone","","",79,null],[11,"default","","",79,{"inputs":[],"output":{"name":"cluchar2"}}],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"default","","",80,{"inputs":[],"output":{"name":"cluchar3"}}],[11,"new","","",80,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"cluchar3"}}],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"default","","",81,{"inputs":[],"output":{"name":"cluchar4"}}],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"fmt","","",82,null],[11,"clone","","",82,null],[11,"default","","",82,{"inputs":[],"output":{"name":"cluchar8"}}],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"fmt","","",83,null],[11,"clone","","",83,null],[11,"default","","",83,{"inputs":[],"output":{"name":"cluchar16"}}],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"default","","",84,{"inputs":[],"output":{"name":"clshort2"}}],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"default","","",85,{"inputs":[],"output":{"name":"clshort3"}}],[11,"new","","",85,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"clshort3"}}],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"default","","",86,{"inputs":[],"output":{"name":"clshort4"}}],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"default","","",87,{"inputs":[],"output":{"name":"clshort8"}}],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"default","","",88,{"inputs":[],"output":{"name":"clshort16"}}],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"default","","",89,{"inputs":[],"output":{"name":"clushort2"}}],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"default","","",90,{"inputs":[],"output":{"name":"clushort3"}}],[11,"new","","",90,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"clushort3"}}],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"default","","",91,{"inputs":[],"output":{"name":"clushort4"}}],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"default","","",92,{"inputs":[],"output":{"name":"clushort8"}}],[11,"eq","","",93,null],[11,"ne","","",93,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"default","","",93,{"inputs":[],"output":{"name":"clushort16"}}],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"fmt","","",94,null],[11,"clone","","",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"clint2"}}],[11,"eq","","",95,null],[11,"ne","","",95,null],[11,"fmt","","",95,null],[11,"clone","","",95,null],[11,"default","","",95,{"inputs":[],"output":{"name":"clint3"}}],[11,"new","","",95,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"clint3"}}],[11,"eq","","",96,null],[11,"ne","","",96,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"default","","",96,{"inputs":[],"output":{"name":"clint4"}}],[11,"eq","","",97,null],[11,"ne","","",97,null],[11,"fmt","","",97,null],[11,"clone","","",97,null],[11,"default","","",97,{"inputs":[],"output":{"name":"clint8"}}],[11,"eq","","",98,null],[11,"ne","","",98,null],[11,"fmt","","",98,null],[11,"clone","","",98,null],[11,"default","","",98,{"inputs":[],"output":{"name":"clint16"}}],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"fmt","","",99,null],[11,"clone","","",99,null],[11,"default","","",99,{"inputs":[],"output":{"name":"cluint2"}}],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"fmt","","",100,null],[11,"clone","","",100,null],[11,"default","","",100,{"inputs":[],"output":{"name":"cluint3"}}],[11,"new","","",100,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"cluint3"}}],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"fmt","","",101,null],[11,"clone","","",101,null],[11,"default","","",101,{"inputs":[],"output":{"name":"cluint4"}}],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"fmt","","",102,null],[11,"clone","","",102,null],[11,"default","","",102,{"inputs":[],"output":{"name":"cluint8"}}],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"default","","",103,{"inputs":[],"output":{"name":"cluint16"}}],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"default","","",104,{"inputs":[],"output":{"name":"cllong1"}}],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"default","","",105,{"inputs":[],"output":{"name":"cllong2"}}],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"default","","",106,{"inputs":[],"output":{"name":"cllong3"}}],[11,"new","","",106,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"cllong3"}}],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"cllong4"}}],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"cllong8"}}],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"default","","",109,{"inputs":[],"output":{"name":"cllong16"}}],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"default","","",110,{"inputs":[],"output":{"name":"clulong1"}}],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"default","","",111,{"inputs":[],"output":{"name":"clulong2"}}],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"default","","",112,{"inputs":[],"output":{"name":"clulong3"}}],[11,"new","","",112,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"clulong3"}}],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"fmt","","",113,null],[11,"clone","","",113,null],[11,"default","","",113,{"inputs":[],"output":{"name":"clulong4"}}],[11,"eq","","",114,null],[11,"ne","","",114,null],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"default","","",114,{"inputs":[],"output":{"name":"clulong8"}}],[11,"eq","","",115,null],[11,"ne","","",115,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"clulong16"}}],[11,"eq","","",116,null],[11,"ne","","",116,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"default","","",116,{"inputs":[],"output":{"name":"clfloat2"}}],[11,"eq","","",117,null],[11,"ne","","",117,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"default","","",117,{"inputs":[],"output":{"name":"clfloat3"}}],[11,"new","","",117,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"clfloat3"}}],[11,"add","","",117,null],[11,"from","","",117,null],[11,"from","","",117,null],[11,"eq","","",118,null],[11,"ne","","",118,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"default","","",118,{"inputs":[],"output":{"name":"clfloat4"}}],[11,"new","","",118,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"clfloat4"}}],[11,"add","","",118,null],[11,"eq","","",119,null],[11,"ne","","",119,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"default","","",119,{"inputs":[],"output":{"name":"clfloat8"}}],[11,"eq","","",120,null],[11,"ne","","",120,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"default","","",120,{"inputs":[],"output":{"name":"clfloat16"}}],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"default","","",121,{"inputs":[],"output":{"name":"cldouble2"}}],[11,"eq","","",122,null],[11,"ne","","",122,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"default","","",122,{"inputs":[],"output":{"name":"cldouble3"}}],[11,"new","","",122,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"cldouble3"}}],[11,"eq","","",123,null],[11,"ne","","",123,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"default","","",123,{"inputs":[],"output":{"name":"cldouble4"}}],[11,"eq","","",124,null],[11,"ne","","",124,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"default","","",124,{"inputs":[],"output":{"name":"cldouble8"}}],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"fmt","","",125,null],[11,"clone","","",125,null],[11,"default","","",125,{"inputs":[],"output":{"name":"cldouble16"}}],[0,"error","ocl_core","Standard error type for ocl.",null,null],[4,"Error","ocl_core::error","An enum containing either a `String` or one of several other error types.",null,null],[13,"Conversion","","",126,null],[13,"Status","","",126,null],[12,"status","ocl_core::error::Error","",126,null],[12,"status_string","","",126,null],[12,"fn_name","","",126,null],[12,"fn_info","","",126,null],[12,"desc","","",126,null],[13,"String","ocl_core::error","",126,null],[13,"Nul","","",126,null],[13,"Io","","",126,null],[13,"FromUtf8Error","","",126,null],[13,"UnspecifiedDimensions","","",126,null],[13,"IntoStringError","","",126,null],[6,"Result","","`ocl::Error` result type.",null,null],[11,"new","","Returns a new `Error` with the description string: `desc`.",126,{"inputs":[{"name":"s"}],"output":{"name":"error"}}],[11,"err","","Returns a new `ocl::Result::Err` containing an `ocl::Error::String`\nvariant with the given description.",126,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"err_status","","Returns a new `ocl::Result::Err` containing an `ocl::Error` with the\ngiven error code and description.",126,{"inputs":[{"name":"i32"},{"name":"str"},{"name":"s"}],"output":{"name":"result"}}],[11,"err_conversion","","Returns a new `ocl::Result::Err` containing an\n`ocl::Error::Conversion` variant with the given description.",126,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"prepend","","If this is a `String` variant, concatenate `txt` to the front of the\ncontained string. Otherwise, do nothing at all.",126,null],[11,"status","","Returns the error status code for `Status` variants.",126,null],[11,"description","","",126,null],[11,"into","","",126,null],[11,"from","","",126,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[11,"from","","",126,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"from","","",126,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",126,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",126,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",126,{"inputs":[{"name":"intostringerror"}],"output":{"name":"error"}}],[11,"fmt","","",126,null],[11,"fmt","","",126,null],[0,"util","ocl_core","Utility and debugging functions.",null,null],[5,"bytes_to_u32","ocl_core::util","Copies a byte slice to a new `u32`.",null,null],[5,"bytes_to","","Copies a slice of bytes to a new value of arbitrary type.",null,null],[5,"bytes_into","","Converts a vector of bytes into a value of arbitrary type.",null,{"inputs":[{"name":"vec"}],"output":{"name":"oclresult"}}],[5,"bytes_into_vec","","Converts a vector of bytes into a vector of arbitrary type.",null,{"inputs":[{"name":"vec"}],"output":{"name":"oclresult"}}],[5,"bytes_to_vec","","Copies a slice of bytes into a vector of arbitrary type.",null,null],[5,"bytes_into_string","","Converts a byte Vec into a string, removing the trailing null byte if it\nexists.",null,{"inputs":[{"name":"vec"}],"output":{"name":"oclresult"}}],[5,"into_bytes","","[UNTESTED] Copies an arbitrary primitive or struct into core bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"vec"}}],[5,"padded_len","","Pads `len` to make it evenly divisible by `incr`.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"vec_remove_rebuild","","Batch removes elements from a vector using a list of indices to remove.",null,null],[5,"wrap_vals","","Wraps (`%`) each value in the list `vals` if it equals or exceeds `val_n`.",null,null],[5,"scrambled_vec","","Returns a vector with length `size` containing random values in the (half-open)\nrange `[vals.0, vals.1)`.",null,null],[5,"shuffled_vec","","Returns a vector with length `size` which is first filled with each integer value\nin the (inclusive) range `[vals.0, vals.1]`. If `size` is greater than the\nnumber of integers in the aforementioned range, the integers will repeat. After\nbeing filled with `size` values, the vector is shuffled and the order of its\nvalues is randomized.",null,null],[5,"shuffle","","Shuffles the values in a vector using a single pass of Fisher-Yates with a\nweak (not cryptographically secure) random number generator.",null,null],[5,"print_bytes_as_hex","","Does what is says it&#39;s gonna.",null,null],[5,"print_slice","","[UNSTABLE]: MAY BE REMOVED AT ANY TIME\nPrints a vector to stdout. Used for debugging.",null,null],[5,"print_simple","","",null,null],[5,"print_val_range","","",null,null],[0,"colors","","ASCII Color Palette",null,null],[7,"TAB","ocl_core::util::colors","",null,null],[7,"C_DEFAULT","","",null,null],[7,"C_UNDER","","",null,null],[7,"C_RED","","",null,null],[7,"C_BRED","","",null,null],[7,"C_GRN","","",null,null],[7,"C_BGRN","","",null,null],[7,"C_ORA","","",null,null],[7,"C_DBL","","",null,null],[7,"C_PUR","","",null,null],[7,"C_CYA","","",null,null],[7,"C_LGR","","",null,null],[7,"C_DFLT","","",null,null],[7,"C_DGR","","",null,null],[7,"C_LRD","","",null,null],[7,"C_YEL","","",null,null],[7,"C_BLU","","",null,null],[7,"C_LBL","","",null,null],[7,"C_MAG","","",null,null],[7,"BGC_DEFAULT","","",null,null],[7,"BGC_GRN","","",null,null],[7,"BGC_PUR","","",null,null],[7,"BGC_LGR","","",null,null],[7,"BGC_DGR","","",null,null],[6,"EventCallbackFn","ocl_core","",null,null],[6,"CreateContextCallbackFn","","",null,null],[6,"BuildProgramCallbackFn","","",null,null],[6,"UserDataPtr","","",null,null],[17,"DEVICES_MAX","","",null,null],[17,"DEVICE_TYPE_DEFAULT","","",null,null],[17,"DEVICE_TYPE_CPU","","",null,null],[17,"DEVICE_TYPE_GPU","","",null,null],[17,"DEVICE_TYPE_ACCELERATOR","","",null,null],[17,"DEVICE_TYPE_CUSTOM","","",null,null],[17,"DEVICE_TYPE_ALL","","",null,null],[17,"FP_DENORM","","",null,null],[17,"FP_INF_NAN","","",null,null],[17,"FP_ROUND_TO_NEAREST","","",null,null],[17,"FP_ROUND_TO_ZERO","","",null,null],[17,"FP_ROUND_TO_INF","","",null,null],[17,"FP_FMA","","",null,null],[17,"FP_SOFT_FLOAT","","",null,null],[17,"FP_CORRECTLY_ROUNDED_DIVIDE_SQRT","","",null,null],[17,"EXEC_KERNEL","","",null,null],[17,"EXEC_NATIVE_KERNEL","","",null,null],[17,"QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE","","",null,null],[17,"QUEUE_PROFILING_ENABLE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_NUMA","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L4_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L3_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L2_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L1_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE","","",null,null],[17,"MEM_READ_WRITE","","",null,null],[17,"MEM_WRITE_ONLY","","",null,null],[17,"MEM_READ_ONLY","","",null,null],[17,"MEM_USE_HOST_PTR","","",null,null],[17,"MEM_ALLOC_HOST_PTR","","",null,null],[17,"MEM_COPY_HOST_PTR","","",null,null],[17,"MEM_HOST_WRITE_ONLY","","",null,null],[17,"MEM_HOST_READ_ONLY","","",null,null],[17,"MEM_HOST_NO_ACCESS","","",null,null],[17,"MIGRATE_MEM_OBJECT_HOST","","",null,null],[17,"MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED","","",null,null],[17,"MAP_READ","","",null,null],[17,"MAP_WRITE","","",null,null],[17,"MAP_WRITE_INVALIDATE_REGION","","",null,null],[17,"PROGRAM_BINARY_TYPE_NONE","","",null,null],[17,"PROGRAM_BINARY_TYPE_COMPILED_OBJECT","","",null,null],[17,"PROGRAM_BINARY_TYPE_LIBRARY","","",null,null],[17,"PROGRAM_BINARY_TYPE_EXECUTABLE","","",null,null],[17,"KERNEL_ARG_TYPE_NONE","","",null,null],[17,"KERNEL_ARG_TYPE_CONST","","",null,null],[17,"KERNEL_ARG_TYPE_RESTRICT","","",null,null],[17,"KERNEL_ARG_TYPE_VOLATILE","","",null,null],[8,"OclPrm","","A type usable within `OpenCL` kernels.",null,null],[8,"OclScl","","A scalar type usable within `OpenCL` kernels.",null,null],[8,"OclVec","","A vector type usable within `OpenCL` kernels.",null,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"clone","","",127,null],[11,"partial_cmp","","",127,null],[11,"lt","","",127,null],[11,"le","","",127,null],[11,"gt","","",127,null],[11,"ge","","",127,null],[11,"cmp","","",127,null],[11,"hash","","",127,null],[11,"fmt","","",127,null],[11,"empty","","Returns an empty set of flags.",127,{"inputs":[],"output":{"name":"devicetype"}}],[11,"all","","Returns the set containing all flags.",127,{"inputs":[],"output":{"name":"devicetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",127,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",127,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",127,{"inputs":[{"name":"u64"}],"output":{"name":"devicetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",127,null],[11,"is_all","","Returns `true` if all flags are currently set.",127,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",127,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",127,null],[11,"insert","","Inserts the specified flags in-place.",127,null],[11,"remove","","Removes the specified flags in-place.",127,null],[11,"toggle","","Toggles the specified flags in-place.",127,null],[11,"bitor","","Returns the union of the two sets of flags.",127,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",127,null],[11,"bitand","","Returns the intersection between the two sets of flags.",127,null],[11,"sub","","Returns the set difference of the two sets of flags.",127,null],[11,"not","","Returns the complement of this set of flags.",127,null],[11,"from_iter","","",127,{"inputs":[{"name":"t"}],"output":{"name":"devicetype"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"devicetype"}}],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"partial_cmp","","",128,null],[11,"lt","","",128,null],[11,"le","","",128,null],[11,"gt","","",128,null],[11,"ge","","",128,null],[11,"cmp","","",128,null],[11,"hash","","",128,null],[11,"fmt","","",128,null],[11,"empty","","Returns an empty set of flags.",128,{"inputs":[],"output":{"name":"devicefpconfig"}}],[11,"all","","Returns the set containing all flags.",128,{"inputs":[],"output":{"name":"devicefpconfig"}}],[11,"bits","","Returns the raw value of the flags currently stored.",128,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",128,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",128,{"inputs":[{"name":"u64"}],"output":{"name":"devicefpconfig"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",128,null],[11,"is_all","","Returns `true` if all flags are currently set.",128,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",128,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",128,null],[11,"insert","","Inserts the specified flags in-place.",128,null],[11,"remove","","Removes the specified flags in-place.",128,null],[11,"toggle","","Toggles the specified flags in-place.",128,null],[11,"bitor","","Returns the union of the two sets of flags.",128,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",128,null],[11,"bitand","","Returns the intersection between the two sets of flags.",128,null],[11,"sub","","Returns the set difference of the two sets of flags.",128,null],[11,"not","","Returns the complement of this set of flags.",128,null],[11,"from_iter","","",128,{"inputs":[{"name":"t"}],"output":{"name":"devicefpconfig"}}],[11,"eq","","",129,null],[11,"ne","","",129,null],[11,"clone","","",129,null],[11,"partial_cmp","","",129,null],[11,"lt","","",129,null],[11,"le","","",129,null],[11,"gt","","",129,null],[11,"ge","","",129,null],[11,"cmp","","",129,null],[11,"hash","","",129,null],[11,"fmt","","",129,null],[11,"empty","","Returns an empty set of flags.",129,{"inputs":[],"output":{"name":"deviceexeccapabilities"}}],[11,"all","","Returns the set containing all flags.",129,{"inputs":[],"output":{"name":"deviceexeccapabilities"}}],[11,"bits","","Returns the raw value of the flags currently stored.",129,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",129,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",129,{"inputs":[{"name":"u64"}],"output":{"name":"deviceexeccapabilities"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",129,null],[11,"is_all","","Returns `true` if all flags are currently set.",129,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",129,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",129,null],[11,"insert","","Inserts the specified flags in-place.",129,null],[11,"remove","","Removes the specified flags in-place.",129,null],[11,"toggle","","Toggles the specified flags in-place.",129,null],[11,"bitor","","Returns the union of the two sets of flags.",129,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",129,null],[11,"bitand","","Returns the intersection between the two sets of flags.",129,null],[11,"sub","","Returns the set difference of the two sets of flags.",129,null],[11,"not","","Returns the complement of this set of flags.",129,null],[11,"from_iter","","",129,{"inputs":[{"name":"t"}],"output":{"name":"deviceexeccapabilities"}}],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"clone","","",130,null],[11,"partial_cmp","","",130,null],[11,"lt","","",130,null],[11,"le","","",130,null],[11,"gt","","",130,null],[11,"ge","","",130,null],[11,"cmp","","",130,null],[11,"hash","","",130,null],[11,"fmt","","",130,null],[11,"empty","","Returns an empty set of flags.",130,{"inputs":[],"output":{"name":"commandqueueproperties"}}],[11,"all","","Returns the set containing all flags.",130,{"inputs":[],"output":{"name":"commandqueueproperties"}}],[11,"bits","","Returns the raw value of the flags currently stored.",130,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",130,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",130,{"inputs":[{"name":"u64"}],"output":{"name":"commandqueueproperties"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",130,null],[11,"is_all","","Returns `true` if all flags are currently set.",130,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",130,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",130,null],[11,"insert","","Inserts the specified flags in-place.",130,null],[11,"remove","","Removes the specified flags in-place.",130,null],[11,"toggle","","Toggles the specified flags in-place.",130,null],[11,"bitor","","Returns the union of the two sets of flags.",130,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",130,null],[11,"bitand","","Returns the intersection between the two sets of flags.",130,null],[11,"sub","","Returns the set difference of the two sets of flags.",130,null],[11,"not","","Returns the complement of this set of flags.",130,null],[11,"from_iter","","",130,{"inputs":[{"name":"t"}],"output":{"name":"commandqueueproperties"}}],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"clone","","",131,null],[11,"partial_cmp","","",131,null],[11,"lt","","",131,null],[11,"le","","",131,null],[11,"gt","","",131,null],[11,"ge","","",131,null],[11,"cmp","","",131,null],[11,"hash","","",131,null],[11,"fmt","","",131,null],[11,"empty","","Returns an empty set of flags.",131,{"inputs":[],"output":{"name":"deviceaffinitydomain"}}],[11,"all","","Returns the set containing all flags.",131,{"inputs":[],"output":{"name":"deviceaffinitydomain"}}],[11,"bits","","Returns the raw value of the flags currently stored.",131,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",131,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",131,{"inputs":[{"name":"u64"}],"output":{"name":"deviceaffinitydomain"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",131,null],[11,"is_all","","Returns `true` if all flags are currently set.",131,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",131,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",131,null],[11,"insert","","Inserts the specified flags in-place.",131,null],[11,"remove","","Removes the specified flags in-place.",131,null],[11,"toggle","","Toggles the specified flags in-place.",131,null],[11,"bitor","","Returns the union of the two sets of flags.",131,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",131,null],[11,"bitand","","Returns the intersection between the two sets of flags.",131,null],[11,"sub","","Returns the set difference of the two sets of flags.",131,null],[11,"not","","Returns the complement of this set of flags.",131,null],[11,"from_iter","","",131,{"inputs":[{"name":"t"}],"output":{"name":"deviceaffinitydomain"}}],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"clone","","",132,null],[11,"partial_cmp","","",132,null],[11,"lt","","",132,null],[11,"le","","",132,null],[11,"gt","","",132,null],[11,"ge","","",132,null],[11,"cmp","","",132,null],[11,"hash","","",132,null],[11,"fmt","","",132,null],[11,"empty","","Returns an empty set of flags.",132,{"inputs":[],"output":{"name":"memflags"}}],[11,"all","","Returns the set containing all flags.",132,{"inputs":[],"output":{"name":"memflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",132,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",132,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",132,{"inputs":[{"name":"u64"}],"output":{"name":"memflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,null],[11,"is_all","","Returns `true` if all flags are currently set.",132,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,null],[11,"insert","","Inserts the specified flags in-place.",132,null],[11,"remove","","Removes the specified flags in-place.",132,null],[11,"toggle","","Toggles the specified flags in-place.",132,null],[11,"bitor","","Returns the union of the two sets of flags.",132,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",132,null],[11,"bitand","","Returns the intersection between the two sets of flags.",132,null],[11,"sub","","Returns the set difference of the two sets of flags.",132,null],[11,"not","","Returns the complement of this set of flags.",132,null],[11,"from_iter","","",132,{"inputs":[{"name":"t"}],"output":{"name":"memflags"}}],[11,"default","","",132,{"inputs":[],"output":{"name":"memflags"}}],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"clone","","",133,null],[11,"partial_cmp","","",133,null],[11,"lt","","",133,null],[11,"le","","",133,null],[11,"gt","","",133,null],[11,"ge","","",133,null],[11,"cmp","","",133,null],[11,"hash","","",133,null],[11,"fmt","","",133,null],[11,"empty","","Returns an empty set of flags.",133,{"inputs":[],"output":{"name":"memmigrationflags"}}],[11,"all","","Returns the set containing all flags.",133,{"inputs":[],"output":{"name":"memmigrationflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",133,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",133,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",133,{"inputs":[{"name":"u64"}],"output":{"name":"memmigrationflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",133,null],[11,"is_all","","Returns `true` if all flags are currently set.",133,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",133,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",133,null],[11,"insert","","Inserts the specified flags in-place.",133,null],[11,"remove","","Removes the specified flags in-place.",133,null],[11,"toggle","","Toggles the specified flags in-place.",133,null],[11,"bitor","","Returns the union of the two sets of flags.",133,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",133,null],[11,"bitand","","Returns the intersection between the two sets of flags.",133,null],[11,"sub","","Returns the set difference of the two sets of flags.",133,null],[11,"not","","Returns the complement of this set of flags.",133,null],[11,"from_iter","","",133,{"inputs":[{"name":"t"}],"output":{"name":"memmigrationflags"}}],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"clone","","",134,null],[11,"partial_cmp","","",134,null],[11,"lt","","",134,null],[11,"le","","",134,null],[11,"gt","","",134,null],[11,"ge","","",134,null],[11,"cmp","","",134,null],[11,"hash","","",134,null],[11,"fmt","","",134,null],[11,"empty","","Returns an empty set of flags.",134,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",134,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",134,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",134,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",134,{"inputs":[{"name":"u64"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",134,null],[11,"is_all","","Returns `true` if all flags are currently set.",134,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",134,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",134,null],[11,"insert","","Inserts the specified flags in-place.",134,null],[11,"remove","","Removes the specified flags in-place.",134,null],[11,"toggle","","Toggles the specified flags in-place.",134,null],[11,"bitor","","Returns the union of the two sets of flags.",134,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",134,null],[11,"bitand","","Returns the intersection between the two sets of flags.",134,null],[11,"sub","","Returns the set difference of the two sets of flags.",134,null],[11,"not","","Returns the complement of this set of flags.",134,null],[11,"from_iter","","",134,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"eq","","",135,null],[11,"ne","","",135,null],[11,"clone","","",135,null],[11,"partial_cmp","","",135,null],[11,"lt","","",135,null],[11,"le","","",135,null],[11,"gt","","",135,null],[11,"ge","","",135,null],[11,"cmp","","",135,null],[11,"hash","","",135,null],[11,"fmt","","",135,null],[11,"empty","","Returns an empty set of flags.",135,{"inputs":[],"output":{"name":"programbinarytype"}}],[11,"all","","Returns the set containing all flags.",135,{"inputs":[],"output":{"name":"programbinarytype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",135,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",135,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",135,{"inputs":[{"name":"u32"}],"output":{"name":"programbinarytype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",135,null],[11,"is_all","","Returns `true` if all flags are currently set.",135,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",135,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",135,null],[11,"insert","","Inserts the specified flags in-place.",135,null],[11,"remove","","Removes the specified flags in-place.",135,null],[11,"toggle","","Toggles the specified flags in-place.",135,null],[11,"bitor","","Returns the union of the two sets of flags.",135,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",135,null],[11,"bitand","","Returns the intersection between the two sets of flags.",135,null],[11,"sub","","Returns the set difference of the two sets of flags.",135,null],[11,"not","","Returns the complement of this set of flags.",135,null],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"programbinarytype"}}],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"clone","","",136,null],[11,"partial_cmp","","",136,null],[11,"lt","","",136,null],[11,"le","","",136,null],[11,"gt","","",136,null],[11,"ge","","",136,null],[11,"cmp","","",136,null],[11,"hash","","",136,null],[11,"fmt","","",136,null],[11,"empty","","Returns an empty set of flags.",136,{"inputs":[],"output":{"name":"kernelargtypequalifier"}}],[11,"all","","Returns the set containing all flags.",136,{"inputs":[],"output":{"name":"kernelargtypequalifier"}}],[11,"bits","","Returns the raw value of the flags currently stored.",136,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",136,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",136,{"inputs":[{"name":"u64"}],"output":{"name":"kernelargtypequalifier"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",136,null],[11,"is_all","","Returns `true` if all flags are currently set.",136,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",136,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",136,null],[11,"insert","","Inserts the specified flags in-place.",136,null],[11,"remove","","Removes the specified flags in-place.",136,null],[11,"toggle","","Toggles the specified flags in-place.",136,null],[11,"bitor","","Returns the union of the two sets of flags.",136,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",136,null],[11,"bitand","","Returns the intersection between the two sets of flags.",136,null],[11,"sub","","Returns the set difference of the two sets of flags.",136,null],[11,"not","","Returns the complement of this set of flags.",136,null],[11,"from_iter","","",136,{"inputs":[{"name":"t"}],"output":{"name":"kernelargtypequalifier"}}],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"clone","","",0,null],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"from_i64","","",4,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"from_i64","","",7,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"from_i64","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"from_i64","","",9,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"from_i64","","",10,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"from_i64","","",11,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",11,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"hash","","",12,null],[11,"from_i64","","",12,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"from_i64","","",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"from_i64","","",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"from_i64","","",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"from_i64","","",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"eq","","",18,null],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"eq","","",19,null],[11,"from_i64","","",19,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"eq","","",20,null],[11,"from_i64","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",20,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"eq","","",21,null],[11,"from_i64","","",21,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",21,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"from_i64","","",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"eq","","",23,null],[11,"from_i64","","",23,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",23,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"eq","","",24,null],[11,"from_i64","","",24,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",24,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"eq","","",25,null],[11,"from_i64","","",25,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",25,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"eq","","",26,null],[11,"from_i64","","",26,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",26,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"eq","","",27,null],[11,"from_i64","","",27,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",27,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"eq","","",28,null],[11,"from_i64","","",28,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",28,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",29,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"from_i64","","",29,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",29,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"from_i64","","",30,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",30,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",31,null],[11,"fmt","","",31,null],[11,"eq","","",31,null],[11,"from_i64","","",31,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",31,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",32,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"from_i64","","",32,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",32,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"eq","","",33,null],[11,"from_i64","","",33,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",33,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"eq","","",34,null],[11,"from_i64","","",34,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",34,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"eq","","",35,null],[11,"from_i64","","",35,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",35,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}]],"paths":[[4,"Status"],[4,"GlTextureTarget"],[4,"ClGlObjectType"],[4,"ImageChannelOrder"],[4,"ImageChannelDataType"],[4,"Cbool"],[4,"Polling"],[4,"PlatformInfo"],[4,"DeviceInfo"],[4,"DeviceMemCacheType"],[4,"DeviceLocalMemType"],[4,"ContextInfo"],[4,"ContextProperty"],[4,"ContextInfoOrPropertiesPointerType"],[4,"DevicePartitionProperty"],[4,"CommandQueueInfo"],[4,"ChannelType"],[4,"MemObjectType"],[4,"MemInfo"],[4,"ImageInfo"],[4,"AddressingMode"],[4,"FilterMode"],[4,"SamplerInfo"],[4,"ProgramInfo"],[4,"ProgramBuildInfo"],[4,"ProgramBuildStatus"],[4,"KernelInfo"],[4,"KernelArgInfo"],[4,"KernelArgAddressQualifier"],[4,"KernelArgAccessQualifier"],[4,"KernelWorkGroupInfo"],[4,"EventInfo"],[4,"CommandType"],[4,"CommandExecutionStatus"],[4,"BufferCreateType"],[4,"ProfilingInfo"],[8,"ClVersions"],[8,"ClEventPtrNew"],[8,"ClEventRef"],[8,"ClWaitList"],[8,"ClPlatformIdPtr"],[8,"ClDeviceIdPtr"],[3,"EventRefWrapper"],[3,"PlatformId"],[3,"DeviceId"],[3,"Context"],[3,"CommandQueue"],[3,"Mem"],[3,"Program"],[3,"Kernel"],[3,"Event"],[3,"EventList"],[3,"Sampler"],[4,"KernelArg"],[4,"PlatformInfoResult"],[4,"DeviceInfoResult"],[4,"ContextInfoResult"],[4,"CommandQueueInfoResult"],[4,"MemInfoResult"],[4,"ImageInfoResult"],[4,"SamplerInfoResult"],[4,"ProgramInfoResult"],[4,"ProgramBuildInfoResult"],[4,"KernelInfoResult"],[4,"KernelArgInfoResult"],[4,"KernelWorkGroupInfoResult"],[4,"EventInfoResult"],[4,"ProfilingInfoResult"],[3,"BufferRegion"],[3,"ImageFormat"],[3,"ImageDescriptor"],[4,"ContextPropertyValue"],[3,"OpenclVersion"],[3,"ContextProperties"],[3,"ClChar2"],[3,"ClChar3"],[3,"ClChar4"],[3,"ClChar8"],[3,"ClChar16"],[3,"ClUchar2"],[3,"ClUchar3"],[3,"ClUchar4"],[3,"ClUchar8"],[3,"ClUchar16"],[3,"ClShort2"],[3,"ClShort3"],[3,"ClShort4"],[3,"ClShort8"],[3,"ClShort16"],[3,"ClUshort2"],[3,"ClUshort3"],[3,"ClUshort4"],[3,"ClUshort8"],[3,"ClUshort16"],[3,"ClInt2"],[3,"ClInt3"],[3,"ClInt4"],[3,"ClInt8"],[3,"ClInt16"],[3,"ClUint2"],[3,"ClUint3"],[3,"ClUint4"],[3,"ClUint8"],[3,"ClUint16"],[3,"ClLong1"],[3,"ClLong2"],[3,"ClLong3"],[3,"ClLong4"],[3,"ClLong8"],[3,"ClLong16"],[3,"ClUlong1"],[3,"ClUlong2"],[3,"ClUlong3"],[3,"ClUlong4"],[3,"ClUlong8"],[3,"ClUlong16"],[3,"ClFloat2"],[3,"ClFloat3"],[3,"ClFloat4"],[3,"ClFloat8"],[3,"ClFloat16"],[3,"ClDouble2"],[3,"ClDouble3"],[3,"ClDouble4"],[3,"ClDouble8"],[3,"ClDouble16"],[4,"Error"],[3,"DeviceType"],[3,"DeviceFpConfig"],[3,"DeviceExecCapabilities"],[3,"CommandQueueProperties"],[3,"DeviceAffinityDomain"],[3,"MemFlags"],[3,"MemMigrationFlags"],[3,"MapFlags"],[3,"ProgramBinaryType"],[3,"KernelArgTypeQualifier"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,null],[10,"mod_floor","","Floored integer modulo, satisfying:",1,null],[10,"gcd","","Greatest Common Divisor (GCD).",1,null],[10,"lcm","","Lowest Common Multiple (LCM).",1,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,null],[10,"is_even","","Returns `true` if the number is even.",1,null],[10,"is_odd","","Returns `true` if the number is odd.",1,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,null],[10,"abs_sub","","The positive difference of two numbers.",5,null],[10,"signum","","Returns the sign of the number.",5,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",7,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",7,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",8,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",9,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",10,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",11,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",12,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",12,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",12,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",12,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",12,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",12,null],[10,"swap_bytes","","Reverses the byte order of the integer.",12,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",12,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",12,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",13,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",13,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",13,null],[10,"floor","","Returns the largest integer less than or equal to a number.",13,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",13,null],[10,"trunc","","Return the integer part of a number.",13,null],[10,"fract","","Returns the fractional part of a number.",13,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",13,null],[10,"signum","","Returns a number that represents the sign of `self`.",13,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",13,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",13,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",13,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,null],[10,"powi","","Raise a number to an integer power.",13,null],[10,"powf","","Raise a number to a floating point power.",13,null],[10,"sqrt","","Take the square root of a number.",13,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,null],[10,"exp2","","Returns `2^(self)`.",13,null],[10,"ln","","Returns the natural logarithm of the number.",13,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,null],[10,"log2","","Returns the base 2 logarithm of the number.",13,null],[10,"log10","","Returns the base 10 logarithm of the number.",13,null],[11,"to_degrees","","Converts radians to degrees.",13,null],[11,"to_radians","","Converts degrees to radians.",13,null],[10,"max","","Returns the maximum of the two numbers.",13,null],[10,"min","","Returns the minimum of the two numbers.",13,null],[10,"abs_sub","","The positive difference of two numbers.",13,null],[10,"cbrt","","Take the cubic root of a number.",13,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",13,null],[10,"sin","","Computes the sine of a number (in radians).",13,null],[10,"cos","","Computes the cosine of a number (in radians).",13,null],[10,"tan","","Computes the tangent of a number (in radians).",13,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",13,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",13,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",13,null],[10,"sinh","","Hyperbolic sine function.",13,null],[10,"cosh","","Hyperbolic cosine function.",13,null],[10,"tanh","","Hyperbolic tangent function.",13,null],[10,"asinh","","Inverse hyperbolic sine function.",13,null],[10,"acosh","","Inverse hyperbolic cosine function.",13,null],[10,"atanh","","Inverse hyperbolic tangent function.",13,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",17,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",17,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",17,null],[11,"checked_add","","",17,null],[11,"checked_sub","","",17,null],[11,"checked_mul","","",17,null],[11,"checked_div","","",17,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"neg","","",0,null],[11,"clone","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"fmt","","",0,null],[11,"encode","","",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"bitxor","","",18,null],[11,"bitxor","","",18,null],[11,"neg","","",18,null],[11,"neg","","",17,null],[11,"mul","","",18,null],[11,"mul","","",18,null],[11,"mul","","",17,null],[11,"mul","","",17,null],[11,"encode","","",18,null],[11,"encode","","",17,null],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",18,null],[11,"cmp","","",17,null],[11,"add","","",18,null],[11,"add","","",17,null],[11,"add","","",17,null],[11,"add","","",18,null],[11,"eq","","",18,null],[11,"eq","","",17,null],[11,"abs","","",17,null],[11,"abs_sub","","",17,null],[11,"signum","","",17,null],[11,"is_positive","","",17,null],[11,"is_negative","","",17,null],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"rem","","",18,null],[11,"rem","","",18,null],[11,"rem","","",17,null],[11,"rem","","",17,null],[11,"sub","","",18,null],[11,"sub","","",17,null],[11,"sub","","",17,null],[11,"sub","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",17,null],[11,"hash","","",18,null],[11,"hash","","",17,null],[11,"div","","",18,null],[11,"div","","",18,null],[11,"div","","",17,null],[11,"div","","",17,null],[11,"fmt","","",18,null],[11,"fmt","","",17,null],[11,"checked_mul","","",18,null],[11,"checked_mul","","",17,null],[11,"shr","","",18,null],[11,"shr","","",17,null],[11,"clone","","",18,null],[11,"clone","","",17,null],[11,"checked_div","","",18,null],[11,"checked_div","","",17,null],[11,"to_biguint","","",18,null],[11,"to_biguint","","",17,null],[11,"fmt","","",18,null],[11,"fmt","","",17,null],[11,"bitor","","",18,null],[11,"bitor","","",18,null],[11,"checked_add","","",18,null],[11,"checked_add","","",17,null],[11,"fmt","","",18,null],[11,"fmt","","",17,null],[11,"partial_cmp","","",18,null],[11,"partial_cmp","","",17,null],[11,"to_i64","","",18,null],[11,"to_u64","","",18,null],[11,"to_f32","","",18,null],[11,"to_f64","","",18,null],[11,"to_i64","","",17,null],[11,"to_u64","","",17,null],[11,"to_f32","","",17,null],[11,"to_f64","","",17,null],[11,"div_rem","","",18,null],[11,"div_floor","","",18,null],[11,"mod_floor","","",18,null],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,null],[11,"div_rem","","",17,null],[11,"div_floor","","",17,null],[11,"mod_floor","","",17,null],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,null],[11,"checked_sub","","",18,null],[11,"checked_sub","","",17,null],[11,"to_bigint","","",17,null],[11,"to_bigint","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",17,null],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",18,null],[11,"fmt","","",17,null],[11,"shl","","",18,null],[11,"shl","","",17,null],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,null],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,null],[11,"bitand","","",18,null],[11,"bitand","","",18,null],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",18,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",18,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,null],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"powf","","Raises `self` to a floating point power.",0,null],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,null],[11,"powc","","Raises `self` to a complex power.",0,null],[11,"expf","","Raises a floating point number to the complex power `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,null],[11,"numer","","Gets an immutable reference to the numerator.",0,null],[11,"denom","","Gets an immutable reference to the denominator.",0,null],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,null],[11,"reduced","","Returns a reduced copy of self.",0,null],[11,"recip","","Returns the reciprocal.",0,null],[11,"floor","","Rounds towards minus infinity.",0,null],[11,"ceil","","Rounds towards plus infinity.",0,null],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,null],[11,"trunc","","Rounds towards zero.",0,null],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,null],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,null],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"rem","","",0,null],[11,"rem","","",0,null],[11,"neg","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,null],[11,"abs_sub","","",0,null],[11,"signum","","",0,null],[11,"is_positive","","",0,null],[11,"is_negative","","",0,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"hash","","",2,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"cmp","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",2,null],[11,"bitand","","",2,null],[11,"bitor","","",2,null],[11,"bitor","","",2,null],[11,"bitxor","","",2,null],[11,"bitxor","","",2,null],[11,"shl","","",2,null],[11,"shr","","",2,null],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,null],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,null],[11,"add","","",2,null],[11,"sub","","",2,null],[11,"sub","","",2,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"div","","",2,null],[11,"div","","",2,null],[11,"rem","","",2,null],[11,"rem","","",2,null],[11,"neg","","",2,null],[11,"checked_add","","",2,null],[11,"checked_sub","","",2,null],[11,"checked_mul","","",2,null],[11,"checked_div","","",2,null],[11,"div_rem","","",2,null],[11,"div_floor","","",2,null],[11,"mod_floor","","",2,null],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,null],[11,"to_i64","","",2,null],[11,"to_u64","","",2,null],[11,"to_f32","","",2,null],[11,"to_f64","","",2,null],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,null],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",2,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",1,null],[11,"mul","","",1,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"hash","","",3,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,null],[11,"partial_cmp","","",3,null],[11,"cmp","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,null],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,null],[11,"abs_sub","","",3,null],[11,"signum","","",3,null],[11,"is_positive","","",3,null],[11,"is_negative","","",3,null],[11,"add","","",3,null],[11,"add","","",3,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"div","","",3,null],[11,"div","","",3,null],[11,"rem","","",3,null],[11,"rem","","",3,null],[11,"neg","","",3,null],[11,"checked_add","","",3,null],[11,"checked_sub","","",3,null],[11,"checked_mul","","",3,null],[11,"checked_div","","",3,null],[11,"div_rem","","",3,null],[11,"div_floor","","",3,null],[11,"mod_floor","","",3,null],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,null],[11,"to_i64","","",3,null],[11,"to_u64","","",3,null],[11,"to_f32","","",3,null],[11,"to_f64","","",3,null],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,null],[11,"to_bigint","","",2,null],[11,"to_biguint","","",3,null],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",3,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",3,null],[11,"checked_add","","",3,null],[11,"checked_sub","","",3,null],[11,"checked_mul","","",3,null],[11,"checked_div","","",3,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,null],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,null],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",6,null],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",6,null],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",6,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"powf","","Raises `self` to a floating point power.",0,null],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,null],[11,"powc","","Raises `self` to a complex power.",0,null],[11,"expf","","Raises a floating point number to the complex power `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null]],"paths":[[3,"Complex"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",4,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",5,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",7,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",8,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",12,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",10,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",17,null],[11,"emit_nil","","",17,null],[11,"emit_usize","","",17,null],[11,"emit_u64","","",17,null],[11,"emit_u32","","",17,null],[11,"emit_u16","","",17,null],[11,"emit_u8","","",17,null],[11,"emit_isize","","",17,null],[11,"emit_i64","","",17,null],[11,"emit_i32","","",17,null],[11,"emit_i16","","",17,null],[11,"emit_i8","","",17,null],[11,"emit_bool","","",17,null],[11,"emit_f64","","",17,null],[11,"emit_f32","","",17,null],[11,"emit_char","","",17,null],[11,"emit_str","","",17,null],[11,"emit_enum","","",17,null],[11,"emit_enum_variant","","",17,null],[11,"emit_enum_variant_arg","","",17,null],[11,"emit_enum_struct_variant","","",17,null],[11,"emit_enum_struct_variant_field","","",17,null],[11,"emit_struct","","",17,null],[11,"emit_struct_field","","",17,null],[11,"emit_tuple","","",17,null],[11,"emit_tuple_arg","","",17,null],[11,"emit_tuple_struct","","",17,null],[11,"emit_tuple_struct_arg","","",17,null],[11,"emit_option","","",17,null],[11,"emit_option_none","","",17,null],[11,"emit_option_some","","",17,null],[11,"emit_seq","","",17,null],[11,"emit_seq_elt","","",17,null],[11,"emit_map","","",17,null],[11,"emit_map_elt_key","","",17,null],[11,"emit_map_elt_val","","",17,null],[11,"encode","","",9,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",9,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",9,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,null],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,null],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector.\nReturns None otherwise.",9,null],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector.\nReturns None otherwise.",9,null],[11,"into_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",9,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",9,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",9,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",9,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",9,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",9,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,null],[11,"is_empty","","Returns true if the stack is empty.",18,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",18,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,null],[11,"next","","",19,null],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",19,null],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,null],[11,"read_usize","","",21,null],[11,"read_u8","","",21,null],[11,"read_u16","","",21,null],[11,"read_u32","","",21,null],[11,"read_u64","","",21,null],[11,"read_isize","","",21,null],[11,"read_i8","","",21,null],[11,"read_i16","","",21,null],[11,"read_i32","","",21,null],[11,"read_i64","","",21,null],[11,"read_f32","","",21,null],[11,"read_f64","","",21,null],[11,"read_bool","","",21,null],[11,"read_char","","",21,null],[11,"read_str","","",21,null],[11,"read_enum","","",21,null],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,null],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,null],[11,"read_struct","","",21,null],[11,"read_struct_field","","",21,null],[11,"read_tuple","","",21,null],[11,"read_tuple_arg","","",21,null],[11,"read_tuple_struct","","",21,null],[11,"read_tuple_struct_arg","","",21,null],[11,"read_option","","",21,null],[11,"read_seq","","",21,null],[11,"read_seq_elt","","",21,null],[11,"read_map","","",21,null],[11,"read_map_elt_key","","",21,null],[11,"read_map_elt_val","","",21,null],[11,"error","","",21,null],[11,"to_json","","",9,null],[11,"fmt","","Encodes a json value into a string",9,null],[11,"fmt","","Encodes a json value into a string",22,null],[11,"fmt","","Encodes a json value into a string",23,null],[11,"indent","","Set the indentation level for the emitted JSON",24,null],[11,"fmt","","Encodes a json value into a string",24,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,null],[10,"read_usize","","Read a usize value.",25,null],[10,"read_u64","","Read a u64 value.",25,null],[10,"read_u32","","Read a u32 value.",25,null],[10,"read_u16","","Read a u16 value.",25,null],[10,"read_u8","","Read a u8 value.",25,null],[10,"read_isize","","Read a isize value.",25,null],[10,"read_i64","","Read a i64 value.",25,null],[10,"read_i32","","Read a i32 value.",25,null],[10,"read_i16","","Read a i16 value.",25,null],[10,"read_i8","","Read a i8 value.",25,null],[10,"read_bool","","Read a bool value.",25,null],[10,"read_f64","","Read a f64 value.",25,null],[10,"read_f32","","Read a f32 value.",25,null],[10,"read_char","","Read a char value.",25,null],[10,"read_str","","Read a string value.",25,null],[10,"read_enum","","Read an enumeration value.",25,null],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,null],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,null],[10,"read_struct","","Read an struct value.",25,null],[10,"read_struct_field","","Read a field for a struct value.",25,null],[10,"read_tuple","","Read a tuple value.",25,null],[10,"read_tuple_arg","","Read a data item for a tuple.",25,null],[10,"read_tuple_struct","","Read a tuple struct value.",25,null],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,null],[10,"read_option","","Read an optional value.",25,null],[10,"read_seq","","Read a sequence of values.",25,null],[10,"read_seq_elt","","Read an element in the sequence.",25,null],[10,"read_map","","Read an associative container (map).",25,null],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,null],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,null],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,null],[10,"emit_usize","","Emit a usize value.",26,null],[10,"emit_u64","","Emit a u64 value.",26,null],[10,"emit_u32","","Emit a u32 value.",26,null],[10,"emit_u16","","Emit a u16 value.",26,null],[10,"emit_u8","","Emit a u8 value.",26,null],[10,"emit_isize","","Emit a isize value.",26,null],[10,"emit_i64","","Emit a i64 value.",26,null],[10,"emit_i32","","Emit a i32 value.",26,null],[10,"emit_i16","","Emit a i16 value.",26,null],[10,"emit_i8","","Emit a i8 value.",26,null],[10,"emit_bool","","Emit a bool value.",26,null],[10,"emit_f64","","Emit a f64 value.",26,null],[10,"emit_f32","","Emit a f32 value.",26,null],[10,"emit_char","","Emit a char value.",26,null],[10,"emit_str","","Emit a string value.",26,null],[10,"emit_enum","","Emit an enumeration value.",26,null],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,null],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,null],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,null],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,null],[10,"emit_struct","","Emit a struct value.",26,null],[10,"emit_struct_field","","Emit a field item for a struct.",26,null],[10,"emit_tuple","","Emit a tuple value.",26,null],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,null],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,null],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,null],[10,"emit_option","","Emit an optional value.",26,null],[10,"emit_option_none","","Emit the `None` optional value.",26,null],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,null],[10,"emit_seq","","Emit a sequence of values.",26,null],[10,"emit_seq_elt","","Emit an element in a sequence.",26,null],[10,"emit_map","","Emit an associative container (map).",26,null],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,null],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,null],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,null],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,null],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"clone","","",7,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,null],[11,"ind_sample","","",8,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[11,"clone","","",11,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,null],[11,"ind_sample","","",11,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,null],[11,"ind_sample","","",13,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,null],[11,"clone","","",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,null],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,null],[11,"ind_sample","","",17,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,null],[11,"next_u32","","",19,null],[11,"next_u64","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,null],[11,"next_u32","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,null],[11,"next_u32","","",21,null],[11,"next_u64","","",21,null],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,null],[11,"reseed","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,null],[11,"next_u64","","",24,null],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,null],[11,"next_u64","","",25,null],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,null],[11,"next_u64","","Return the next random u64.",27,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",27,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,null],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,null],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,null],[11,"next","","",30,null],[11,"clone","","",31,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,null],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,null],[11,"next_u64","","",32,null],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,null],[11,"next_u32","","",33,null],[11,"next_u64","","",33,null],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["cl_sys"] = {"doc":"FFI bindings for OpenCL.","items":[[3,"cl_image_format","cl_sys","",null,null],[12,"image_channel_order","","",0,null],[12,"image_channel_data_type","","",0,null],[3,"cl_image_desc","","",null,null],[12,"image_type","","",1,null],[12,"image_width","","",1,null],[12,"image_height","","",1,null],[12,"image_depth","","",1,null],[12,"image_array_size","","",1,null],[12,"image_row_pitch","","",1,null],[12,"image_slice_pitch","","",1,null],[12,"num_mip_levels","","",1,null],[12,"num_samples","","",1,null],[12,"buffer","","",1,null],[3,"cl_buffer_region","","",null,null],[12,"origin","","",2,null],[12,"size","","",2,null],[6,"cl_GLuint","","",null,null],[6,"cl_GLint","","",null,null],[6,"cl_GLenum","","",null,null],[6,"cl_gl_object_type","","",null,null],[6,"cl_gl_texture_info","","",null,null],[6,"cl_gl_platform_info","","",null,null],[6,"cl_gl_context_info","","",null,null],[6,"CLeglImageKHR","","",null,null],[6,"CLeglDisplayKHR","","",null,null],[6,"CLeglSyncKHR","","",null,null],[6,"cl_egl_image_properties_khr","","",null,null],[6,"cl_d3d10_device_source_khr","","",null,null],[6,"cl_d3d10_device_set_khr","","",null,null],[6,"cl_platform_id","","",null,null],[6,"cl_device_id","","",null,null],[6,"cl_context","","",null,null],[6,"cl_command_queue","","",null,null],[6,"cl_mem","","",null,null],[6,"cl_program","","",null,null],[6,"cl_kernel","","",null,null],[6,"cl_event","","",null,null],[6,"cl_sampler","","",null,null],[6,"cl_char","","",null,null],[6,"cl_uchar","","",null,null],[6,"cl_short","","",null,null],[6,"cl_ushort","","",null,null],[6,"cl_int","","",null,null],[6,"cl_uint","","",null,null],[6,"cl_long","","",null,null],[6,"cl_ulong","","",null,null],[6,"cl_half","","",null,null],[6,"cl_float","","",null,null],[6,"cl_double","","",null,null],[6,"cl_bool","","",null,null],[6,"cl_bitfield","","",null,null],[6,"cl_device_type","","",null,null],[6,"cl_platform_info","","",null,null],[6,"cl_device_info","","",null,null],[6,"cl_device_fp_config","","",null,null],[6,"cl_device_mem_cache_type","","",null,null],[6,"cl_device_local_mem_type","","",null,null],[6,"cl_device_exec_capabilities","","",null,null],[6,"cl_device_svm_capabilities","","",null,null],[6,"cl_command_queue_properties","","",null,null],[6,"cl_device_partition_property","","",null,null],[6,"cl_device_affinity_domain","","",null,null],[6,"cl_context_properties","","",null,null],[6,"cl_context_info","","",null,null],[6,"cl_queue_properties","","",null,null],[6,"cl_command_queue_info","","",null,null],[6,"cl_channel_order","","",null,null],[6,"cl_channel_type","","",null,null],[6,"cl_mem_flags","","",null,null],[6,"cl_svm_mem_flags","","",null,null],[6,"cl_mem_object_type","","",null,null],[6,"cl_mem_info","","",null,null],[6,"cl_mem_migration_flags","","",null,null],[6,"cl_image_info","","",null,null],[6,"cl_buffer_create_type","","",null,null],[6,"cl_addressing_mode","","",null,null],[6,"cl_filter_mode","","",null,null],[6,"cl_sampler_info","","",null,null],[6,"cl_map_flags","","",null,null],[6,"cl_pipe_properties","","",null,null],[6,"cl_pipe_info","","",null,null],[6,"cl_program_info","","",null,null],[6,"cl_program_build_info","","",null,null],[6,"cl_program_binary_type","","",null,null],[6,"cl_build_status","","",null,null],[6,"cl_kernel_info","","",null,null],[6,"cl_kernel_arg_info","","",null,null],[6,"cl_kernel_arg_address_qualifier","","",null,null],[6,"cl_kernel_arg_access_qualifier","","",null,null],[6,"cl_kernel_arg_type_qualifier","","",null,null],[6,"cl_kernel_work_group_info","","",null,null],[6,"cl_kernel_sub_group_info","","",null,null],[6,"cl_event_info","","",null,null],[6,"cl_command_type","","",null,null],[6,"cl_profiling_info","","",null,null],[6,"cl_sampler_properties","","",null,null],[6,"cl_kernel_exec_info","","",null,null],[17,"GL_TEXTURE_1D","","",null,null],[17,"GL_TEXTURE_1D_ARRAY","","",null,null],[17,"GL_TEXTURE_BUFFER","","",null,null],[17,"GL_TEXTURE_2D","","",null,null],[17,"GL_TEXTURE_2D_ARRAY","","",null,null],[17,"GL_TEXTURE_3D","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_POSITIVE_X","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_NEGATIVE_X","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_POSITIVE_Y","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_POSITIVE_Z","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","","",null,null],[17,"GL_TEXTURE_RECTANGLE","","",null,null],[17,"CL_GL_OBJECT_BUFFER","","",null,null],[17,"CL_GL_OBJECT_TEXTURE2D","","",null,null],[17,"CL_GL_OBJECT_TEXTURE3D","","",null,null],[17,"CL_GL_OBJECT_RENDERBUFFER","","",null,null],[17,"CL_GL_OBJECT_TEXTURE2D_ARRAY","","",null,null],[17,"CL_GL_OBJECT_TEXTURE1D","","",null,null],[17,"CL_GL_OBJECT_TEXTURE1D_ARRAY","","",null,null],[17,"CL_GL_OBJECT_TEXTURE_BUFFER","","",null,null],[17,"CL_GL_TEXTURE_TARGET","","",null,null],[17,"CL_GL_MIPMAP_LEVEL","","",null,null],[17,"CL_GL_NUM_SAMPLES","","",null,null],[17,"CL_KHR_GL_SHARING","","",null,null],[17,"CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR","","",null,null],[17,"CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR","","",null,null],[17,"CL_DEVICES_FOR_GL_CONTEXT_KHR","","",null,null],[17,"CL_GL_CONTEXT_KHR","","",null,null],[17,"CL_EGL_DISPLAY_KHR","","",null,null],[17,"CL_GLX_DISPLAY_KHR","","",null,null],[17,"CL_WGL_HDC_KHR","","",null,null],[17,"CL_CGL_SHAREGROUP_KHR","","",null,null],[17,"CL_CONTEXT_PROPERTY_USE_CGL_SHAREGROUP_APPLE","","",null,null],[17,"CL_CONTEXT_D3D10_DEVICE_KHR","","",null,null],[17,"CL_CONTEXT_ADAPTER_D3D9_KHR","","",null,null],[17,"CL_CONTEXT_ADAPTER_D3D9EX_KHR","","",null,null],[17,"CL_CONTEXT_ADAPTER_DXVA_KHR","","",null,null],[17,"CL_CONTEXT_D3D11_DEVICE_KHR","","",null,null],[17,"CL_SUCCESS","","",null,null],[17,"CL_DEVICE_NOT_FOUND","","",null,null],[17,"CL_DEVICE_NOT_AVAILABLE","","",null,null],[17,"CL_COMPILER_NOT_AVAILABLE","","",null,null],[17,"CL_MEM_OBJECT_ALLOCATION_FAILURE","","",null,null],[17,"CL_OUT_OF_RESOURCES","","",null,null],[17,"CL_OUT_OF_HOST_MEMORY","","",null,null],[17,"CL_PROFILING_INFO_NOT_AVAILABLE","","",null,null],[17,"CL_MEM_COPY_OVERLAP","","",null,null],[17,"CL_IMAGE_FORMAT_MISMATCH","","",null,null],[17,"CL_IMAGE_FORMAT_NOT_SUPPORTED","","",null,null],[17,"CL_BUILD_PROGRAM_FAILURE","","",null,null],[17,"CL_MAP_FAILURE","","",null,null],[17,"CL_MISALIGNED_SUB_BUFFER_OFFSET","","",null,null],[17,"CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST","","",null,null],[17,"CL_COMPILE_PROGRAM_FAILURE","","",null,null],[17,"CL_LINKER_NOT_AVAILABLE","","",null,null],[17,"CL_LINK_PROGRAM_FAILURE","","",null,null],[17,"CL_DEVICE_PARTITION_FAILED","","",null,null],[17,"CL_KERNEL_ARG_INFO_NOT_AVAILABLE","","",null,null],[17,"CL_INVALID_VALUE","","",null,null],[17,"CL_INVALID_DEVICE_TYPE","","",null,null],[17,"CL_INVALID_PLATFORM","","",null,null],[17,"CL_INVALID_DEVICE","","",null,null],[17,"CL_INVALID_CONTEXT","","",null,null],[17,"CL_INVALID_QUEUE_PROPERTIES","","",null,null],[17,"CL_INVALID_COMMAND_QUEUE","","",null,null],[17,"CL_INVALID_HOST_PTR","","",null,null],[17,"CL_INVALID_MEM_OBJECT","","",null,null],[17,"CL_INVALID_IMAGE_FORMAT_DESCRIPTOR","","",null,null],[17,"CL_INVALID_IMAGE_SIZE","","",null,null],[17,"CL_INVALID_SAMPLER","","",null,null],[17,"CL_INVALID_BINARY","","",null,null],[17,"CL_INVALID_BUILD_OPTIONS","","",null,null],[17,"CL_INVALID_PROGRAM","","",null,null],[17,"CL_INVALID_PROGRAM_EXECUTABLE","","",null,null],[17,"CL_INVALID_KERNEL_NAME","","",null,null],[17,"CL_INVALID_KERNEL_DEFINITION","","",null,null],[17,"CL_INVALID_KERNEL","","",null,null],[17,"CL_INVALID_ARG_INDEX","","",null,null],[17,"CL_INVALID_ARG_VALUE","","",null,null],[17,"CL_INVALID_ARG_SIZE","","",null,null],[17,"CL_INVALID_KERNEL_ARGS","","",null,null],[17,"CL_INVALID_WORK_DIMENSION","","",null,null],[17,"CL_INVALID_WORK_GROUP_SIZE","","",null,null],[17,"CL_INVALID_WORK_ITEM_SIZE","","",null,null],[17,"CL_INVALID_GLOBAL_OFFSET","","",null,null],[17,"CL_INVALID_EVENT_WAIT_LIST","","",null,null],[17,"CL_INVALID_EVENT","","",null,null],[17,"CL_INVALID_OPERATION","","",null,null],[17,"CL_INVALID_GL_OBJECT","","",null,null],[17,"CL_INVALID_BUFFER_SIZE","","",null,null],[17,"CL_INVALID_MIP_LEVEL","","",null,null],[17,"CL_INVALID_GLOBAL_WORK_SIZE","","",null,null],[17,"CL_INVALID_PROPERTY","","",null,null],[17,"CL_INVALID_IMAGE_DESCRIPTOR","","",null,null],[17,"CL_INVALID_COMPILER_OPTIONS","","",null,null],[17,"CL_INVALID_LINKER_OPTIONS","","",null,null],[17,"CL_INVALID_DEVICE_PARTITION_COUNT","","",null,null],[17,"CL_INVALID_PIPE_SIZE","","",null,null],[17,"CL_INVALID_DEVICE_QUEUE","","",null,null],[17,"CL_PLATFORM_NOT_FOUND_KHR","","",null,null],[17,"CL_VERSION_1_0","","",null,null],[17,"CL_VERSION_1_1","","",null,null],[17,"CL_VERSION_1_2","","",null,null],[17,"CL_VERSION_2_0","","",null,null],[17,"CL_VERSION_2_1","","",null,null],[17,"CL_FALSE","","",null,null],[17,"CL_TRUE","","",null,null],[17,"CL_BLOCKING","","",null,null],[17,"CL_NON_BLOCKING","","",null,null],[17,"CL_PLATFORM_PROFILE","","",null,null],[17,"CL_PLATFORM_VERSION","","",null,null],[17,"CL_PLATFORM_NAME","","",null,null],[17,"CL_PLATFORM_VENDOR","","",null,null],[17,"CL_PLATFORM_EXTENSIONS","","",null,null],[17,"CL_PLATFORM_HOST_TIMER_RESOLUTION","","",null,null],[17,"CL_DEVICE_TYPE_DEFAULT","","",null,null],[17,"CL_DEVICE_TYPE_CPU","","",null,null],[17,"CL_DEVICE_TYPE_GPU","","",null,null],[17,"CL_DEVICE_TYPE_ACCELERATOR","","",null,null],[17,"CL_DEVICE_TYPE_CUSTOM","","",null,null],[17,"CL_DEVICE_TYPE_ALL","","",null,null],[17,"CL_DEVICE_TYPE","","",null,null],[17,"CL_DEVICE_VENDOR_ID","","",null,null],[17,"CL_DEVICE_MAX_COMPUTE_UNITS","","",null,null],[17,"CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS","","",null,null],[17,"CL_DEVICE_MAX_WORK_GROUP_SIZE","","",null,null],[17,"CL_DEVICE_MAX_WORK_ITEM_SIZES","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE","","",null,null],[17,"CL_DEVICE_MAX_CLOCK_FREQUENCY","","",null,null],[17,"CL_DEVICE_ADDRESS_BITS","","",null,null],[17,"CL_DEVICE_MAX_READ_IMAGE_ARGS","","",null,null],[17,"CL_DEVICE_MAX_WRITE_IMAGE_ARGS","","",null,null],[17,"CL_DEVICE_MAX_MEM_ALLOC_SIZE","","",null,null],[17,"CL_DEVICE_IMAGE2D_MAX_WIDTH","","",null,null],[17,"CL_DEVICE_IMAGE2D_MAX_HEIGHT","","",null,null],[17,"CL_DEVICE_IMAGE3D_MAX_WIDTH","","",null,null],[17,"CL_DEVICE_IMAGE3D_MAX_HEIGHT","","",null,null],[17,"CL_DEVICE_IMAGE3D_MAX_DEPTH","","",null,null],[17,"CL_DEVICE_IMAGE_SUPPORT","","",null,null],[17,"CL_DEVICE_MAX_PARAMETER_SIZE","","",null,null],[17,"CL_DEVICE_MAX_SAMPLERS","","",null,null],[17,"CL_DEVICE_MEM_BASE_ADDR_ALIGN","","",null,null],[17,"CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE","","",null,null],[17,"CL_DEVICE_SINGLE_FP_CONFIG","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_CACHE_TYPE","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_CACHE_SIZE","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_SIZE","","",null,null],[17,"CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE","","",null,null],[17,"CL_DEVICE_MAX_CONSTANT_ARGS","","",null,null],[17,"CL_DEVICE_LOCAL_MEM_TYPE","","",null,null],[17,"CL_DEVICE_LOCAL_MEM_SIZE","","",null,null],[17,"CL_DEVICE_ERROR_CORRECTION_SUPPORT","","",null,null],[17,"CL_DEVICE_PROFILING_TIMER_RESOLUTION","","",null,null],[17,"CL_DEVICE_ENDIAN_LITTLE","","",null,null],[17,"CL_DEVICE_AVAILABLE","","",null,null],[17,"CL_DEVICE_COMPILER_AVAILABLE","","",null,null],[17,"CL_DEVICE_EXECUTION_CAPABILITIES","","",null,null],[17,"CL_DEVICE_QUEUE_PROPERTIES","","",null,null],[17,"CL_DEVICE_QUEUE_ON_HOST_PROPERTIES","","",null,null],[17,"CL_DEVICE_NAME","","",null,null],[17,"CL_DEVICE_VENDOR","","",null,null],[17,"CL_DRIVER_VERSION","","",null,null],[17,"CL_DEVICE_PROFILE","","",null,null],[17,"CL_DEVICE_VERSION","","",null,null],[17,"CL_DEVICE_EXTENSIONS","","",null,null],[17,"CL_DEVICE_PLATFORM","","",null,null],[17,"CL_DEVICE_DOUBLE_FP_CONFIG","","",null,null],[17,"CL_DEVICE_HALF_FP_CONFIG","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF","","",null,null],[17,"CL_DEVICE_HOST_UNIFIED_MEMORY","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_INT","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF","","",null,null],[17,"CL_DEVICE_OPENCL_C_VERSION","","",null,null],[17,"CL_DEVICE_LINKER_AVAILABLE","","",null,null],[17,"CL_DEVICE_BUILT_IN_KERNELS","","",null,null],[17,"CL_DEVICE_IMAGE_MAX_BUFFER_SIZE","","",null,null],[17,"CL_DEVICE_IMAGE_MAX_ARRAY_SIZE","","",null,null],[17,"CL_DEVICE_PARENT_DEVICE","","",null,null],[17,"CL_DEVICE_PARTITION_MAX_SUB_DEVICES","","",null,null],[17,"CL_DEVICE_PARTITION_PROPERTIES","","",null,null],[17,"CL_DEVICE_PARTITION_AFFINITY_DOMAIN","","",null,null],[17,"CL_DEVICE_PARTITION_TYPE","","",null,null],[17,"CL_DEVICE_REFERENCE_COUNT","","",null,null],[17,"CL_DEVICE_PREFERRED_INTEROP_USER_SYNC","","",null,null],[17,"CL_DEVICE_PRINTF_BUFFER_SIZE","","",null,null],[17,"CL_DEVICE_IMAGE_PITCH_ALIGNMENT","","",null,null],[17,"CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT","","",null,null],[17,"CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS","","",null,null],[17,"CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE","","",null,null],[17,"CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES","","",null,null],[17,"CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE","","",null,null],[17,"CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE","","",null,null],[17,"CL_DEVICE_MAX_ON_DEVICE_QUEUES","","",null,null],[17,"CL_DEVICE_MAX_ON_DEVICE_EVENTS","","",null,null],[17,"CL_DEVICE_SVM_CAPABILITIES","","",null,null],[17,"CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE","","",null,null],[17,"CL_DEVICE_MAX_PIPE_ARGS","","",null,null],[17,"CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS","","",null,null],[17,"CL_DEVICE_PIPE_MAX_PACKET_SIZE","","",null,null],[17,"CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT","","",null,null],[17,"CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT","","",null,null],[17,"CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT","","",null,null],[17,"CL_DEVICE_IL_VERSION","","",null,null],[17,"CL_DEVICE_MAX_NUM_SUB_GROUPS","","",null,null],[17,"CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS","","",null,null],[17,"CL_FP_DENORM","","",null,null],[17,"CL_FP_INF_NAN","","",null,null],[17,"CL_FP_ROUND_TO_NEAREST","","",null,null],[17,"CL_FP_ROUND_TO_ZERO","","",null,null],[17,"CL_FP_ROUND_TO_INF","","",null,null],[17,"CL_FP_FMA","","",null,null],[17,"CL_FP_SOFT_FLOAT","","",null,null],[17,"CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT","","",null,null],[17,"CL_NONE","","",null,null],[17,"CL_READ_ONLY_CACHE","","",null,null],[17,"CL_READ_WRITE_CACHE","","",null,null],[17,"CL_LOCAL","","",null,null],[17,"CL_GLOBAL","","",null,null],[17,"CL_EXEC_KERNEL","","",null,null],[17,"CL_EXEC_NATIVE_KERNEL","","",null,null],[17,"CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE","","",null,null],[17,"CL_QUEUE_PROFILING_ENABLE","","",null,null],[17,"CL_QUEUE_ON_DEVICE","","",null,null],[17,"CL_QUEUE_ON_DEVICE_DEFAULT","","",null,null],[17,"CL_CONTEXT_REFERENCE_COUNT","","",null,null],[17,"CL_CONTEXT_DEVICES","","",null,null],[17,"CL_CONTEXT_PROPERTIES","","",null,null],[17,"CL_CONTEXT_NUM_DEVICES","","",null,null],[17,"CL_CONTEXT_PLATFORM","","",null,null],[17,"CL_CONTEXT_INTEROP_USER_SYNC","","",null,null],[17,"CL_DEVICE_PARTITION_EQUALLY","","",null,null],[17,"CL_DEVICE_PARTITION_BY_COUNTS","","",null,null],[17,"CL_DEVICE_PARTITION_BY_COUNTS_LIST_END","","",null,null],[17,"CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_NUMA","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE","","",null,null],[17,"CL_DEVICE_SVM_COARSE_GRAIN_BUFFER","","",null,null],[17,"CL_DEVICE_SVM_FINE_GRAIN_BUFFER","","",null,null],[17,"CL_DEVICE_SVM_FINE_GRAIN_SYSTEM","","",null,null],[17,"CL_DEVICE_SVM_ATOMICS","","",null,null],[17,"CL_QUEUE_CONTEXT","","",null,null],[17,"CL_QUEUE_DEVICE","","",null,null],[17,"CL_QUEUE_REFERENCE_COUNT","","",null,null],[17,"CL_QUEUE_PROPERTIES","","",null,null],[17,"CL_QUEUE_SIZE","","",null,null],[17,"CL_QUEUE_DEVICE_DEFAULT","","",null,null],[17,"CL_MEM_READ_WRITE","","",null,null],[17,"CL_MEM_WRITE_ONLY","","",null,null],[17,"CL_MEM_READ_ONLY","","",null,null],[17,"CL_MEM_USE_HOST_PTR","","",null,null],[17,"CL_MEM_ALLOC_HOST_PTR","","",null,null],[17,"CL_MEM_COPY_HOST_PTR","","",null,null],[17,"CL_MEM_HOST_WRITE_ONLY","","",null,null],[17,"CL_MEM_HOST_READ_ONLY","","",null,null],[17,"CL_MEM_HOST_NO_ACCESS","","",null,null],[17,"CL_MEM_SVM_FINE_GRAIN_BUFFER","","",null,null],[17,"CL_MEM_SVM_ATOMICS","","",null,null],[17,"CL_MEM_KERNEL_READ_AND_WRITE","","",null,null],[17,"CL_MIGRATE_MEM_OBJECT_HOST","","",null,null],[17,"CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED","","",null,null],[17,"CL_R","","",null,null],[17,"CL_A","","",null,null],[17,"CL_RG","","",null,null],[17,"CL_RA","","",null,null],[17,"CL_RGB","","",null,null],[17,"CL_RGBA","","",null,null],[17,"CL_BGRA","","",null,null],[17,"CL_ARGB","","",null,null],[17,"CL_INTENSITY","","",null,null],[17,"CL_LUMINANCE","","",null,null],[17,"CL_Rx","","",null,null],[17,"CL_RGx","","",null,null],[17,"CL_RGBx","","",null,null],[17,"CL_DEPTH","","",null,null],[17,"CL_DEPTH_STENCIL","","",null,null],[17,"CL_sRGB","","",null,null],[17,"CL_sRGBx","","",null,null],[17,"CL_sRGBA","","",null,null],[17,"CL_sBGRA","","",null,null],[17,"CL_ABGR","","",null,null],[17,"CL_SNORM_INT8","","",null,null],[17,"CL_SNORM_INT16","","",null,null],[17,"CL_UNORM_INT8","","",null,null],[17,"CL_UNORM_INT16","","",null,null],[17,"CL_UNORM_SHORT_565","","",null,null],[17,"CL_UNORM_SHORT_555","","",null,null],[17,"CL_UNORM_INT_101010","","",null,null],[17,"CL_SIGNED_INT8","","",null,null],[17,"CL_SIGNED_INT16","","",null,null],[17,"CL_SIGNED_INT32","","",null,null],[17,"CL_UNSIGNED_INT8","","",null,null],[17,"CL_UNSIGNED_INT16","","",null,null],[17,"CL_UNSIGNED_INT32","","",null,null],[17,"CL_HALF_FLOAT","","",null,null],[17,"CL_FLOAT","","",null,null],[17,"CL_UNORM_INT24","","",null,null],[17,"CL_UNORM_INT_101010_2","","",null,null],[17,"CL_MEM_OBJECT_BUFFER","","",null,null],[17,"CL_MEM_OBJECT_IMAGE2D","","",null,null],[17,"CL_MEM_OBJECT_IMAGE3D","","",null,null],[17,"CL_MEM_OBJECT_IMAGE2D_ARRAY","","",null,null],[17,"CL_MEM_OBJECT_IMAGE1D","","",null,null],[17,"CL_MEM_OBJECT_IMAGE1D_ARRAY","","",null,null],[17,"CL_MEM_OBJECT_IMAGE1D_BUFFER","","",null,null],[17,"CL_MEM_OBJECT_PIPE","","",null,null],[17,"CL_MEM_TYPE","","",null,null],[17,"CL_MEM_FLAGS","","",null,null],[17,"CL_MEM_SIZE","","",null,null],[17,"CL_MEM_HOST_PTR","","",null,null],[17,"CL_MEM_MAP_COUNT","","",null,null],[17,"CL_MEM_REFERENCE_COUNT","","",null,null],[17,"CL_MEM_CONTEXT","","",null,null],[17,"CL_MEM_ASSOCIATED_MEMOBJECT","","",null,null],[17,"CL_MEM_OFFSET","","",null,null],[17,"CL_MEM_USES_SVM_POINTER","","",null,null],[17,"CL_IMAGE_FORMAT","","",null,null],[17,"CL_IMAGE_ELEMENT_SIZE","","",null,null],[17,"CL_IMAGE_ROW_PITCH","","",null,null],[17,"CL_IMAGE_SLICE_PITCH","","",null,null],[17,"CL_IMAGE_WIDTH","","",null,null],[17,"CL_IMAGE_HEIGHT","","",null,null],[17,"CL_IMAGE_DEPTH","","",null,null],[17,"CL_IMAGE_ARRAY_SIZE","","",null,null],[17,"CL_IMAGE_BUFFER","","",null,null],[17,"CL_IMAGE_NUM_MIP_LEVELS","","",null,null],[17,"CL_IMAGE_NUM_SAMPLES","","",null,null],[17,"CL_PIPE_PACKET_SIZE","","",null,null],[17,"CL_PIPE_MAX_PACKETS","","",null,null],[17,"CL_ADDRESS_NONE","","",null,null],[17,"CL_ADDRESS_CLAMP_TO_EDGE","","",null,null],[17,"CL_ADDRESS_CLAMP","","",null,null],[17,"CL_ADDRESS_REPEAT","","",null,null],[17,"CL_ADDRESS_MIRRORED_REPEAT","","",null,null],[17,"CL_FILTER_NEAREST","","",null,null],[17,"CL_FILTER_LINEAR","","",null,null],[17,"CL_SAMPLER_REFERENCE_COUNT","","",null,null],[17,"CL_SAMPLER_CONTEXT","","",null,null],[17,"CL_SAMPLER_NORMALIZED_COORDS","","",null,null],[17,"CL_SAMPLER_ADDRESSING_MODE","","",null,null],[17,"CL_SAMPLER_FILTER_MODE","","",null,null],[17,"CL_SAMPLER_MIP_FILTER_MODE","","",null,null],[17,"CL_SAMPLER_LOD_MIN","","",null,null],[17,"CL_SAMPLER_LOD_MAX","","",null,null],[17,"CL_MAP_READ","","",null,null],[17,"CL_MAP_WRITE","","",null,null],[17,"CL_MAP_WRITE_INVALIDATE_REGION","","",null,null],[17,"CL_PROGRAM_REFERENCE_COUNT","","",null,null],[17,"CL_PROGRAM_CONTEXT","","",null,null],[17,"CL_PROGRAM_NUM_DEVICES","","",null,null],[17,"CL_PROGRAM_DEVICES","","",null,null],[17,"CL_PROGRAM_SOURCE","","",null,null],[17,"CL_PROGRAM_BINARY_SIZES","","",null,null],[17,"CL_PROGRAM_BINARIES","","",null,null],[17,"CL_PROGRAM_NUM_KERNELS","","",null,null],[17,"CL_PROGRAM_KERNEL_NAMES","","",null,null],[17,"CL_PROGRAM_IL","","",null,null],[17,"CL_PROGRAM_BUILD_STATUS","","",null,null],[17,"CL_PROGRAM_BUILD_OPTIONS","","",null,null],[17,"CL_PROGRAM_BUILD_LOG","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE","","",null,null],[17,"CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_NONE","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_LIBRARY","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_EXECUTABLE","","",null,null],[17,"CL_BUILD_SUCCESS","","",null,null],[17,"CL_BUILD_NONE","","",null,null],[17,"CL_BUILD_ERROR","","",null,null],[17,"CL_BUILD_IN_PROGRESS","","",null,null],[17,"CL_KERNEL_FUNCTION_NAME","","",null,null],[17,"CL_KERNEL_NUM_ARGS","","",null,null],[17,"CL_KERNEL_REFERENCE_COUNT","","",null,null],[17,"CL_KERNEL_CONTEXT","","",null,null],[17,"CL_KERNEL_PROGRAM","","",null,null],[17,"CL_KERNEL_ATTRIBUTES","","",null,null],[17,"CL_KERNEL_MAX_NUM_SUB_GROUPS","","",null,null],[17,"CL_KERNEL_COMPILE_NUM_SUB_GROUPS","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_QUALIFIER","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_QUALIFIER","","",null,null],[17,"CL_KERNEL_ARG_TYPE_NAME","","",null,null],[17,"CL_KERNEL_ARG_TYPE_QUALIFIER","","",null,null],[17,"CL_KERNEL_ARG_NAME","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_GLOBAL","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_LOCAL","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_CONSTANT","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_PRIVATE","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_READ_ONLY","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_WRITE_ONLY","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_READ_WRITE","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_NONE","","",null,null],[17,"CL_KERNEL_ARG_TYPE_NONE","","",null,null],[17,"CL_KERNEL_ARG_TYPE_CONST","","",null,null],[17,"CL_KERNEL_ARG_TYPE_RESTRICT","","",null,null],[17,"CL_KERNEL_ARG_TYPE_VOLATILE","","",null,null],[17,"CL_KERNEL_ARG_TYPE_PIPE","","",null,null],[17,"CL_KERNEL_WORK_GROUP_SIZE","","",null,null],[17,"CL_KERNEL_COMPILE_WORK_GROUP_SIZE","","",null,null],[17,"CL_KERNEL_LOCAL_MEM_SIZE","","",null,null],[17,"CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE","","",null,null],[17,"CL_KERNEL_PRIVATE_MEM_SIZE","","",null,null],[17,"CL_KERNEL_GLOBAL_WORK_SIZE","","",null,null],[17,"CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE","","",null,null],[17,"CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE","","",null,null],[17,"CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT","","",null,null],[17,"CL_KERNEL_EXEC_INFO_SVM_PTRS","","",null,null],[17,"CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM","","",null,null],[17,"CL_EVENT_COMMAND_QUEUE","","",null,null],[17,"CL_EVENT_COMMAND_TYPE","","",null,null],[17,"CL_EVENT_REFERENCE_COUNT","","",null,null],[17,"CL_EVENT_COMMAND_EXECUTION_STATUS","","",null,null],[17,"CL_EVENT_CONTEXT","","",null,null],[17,"CL_COMMAND_NDRANGE_KERNEL","","",null,null],[17,"CL_COMMAND_TASK","","",null,null],[17,"CL_COMMAND_NATIVE_KERNEL","","",null,null],[17,"CL_COMMAND_READ_BUFFER","","",null,null],[17,"CL_COMMAND_WRITE_BUFFER","","",null,null],[17,"CL_COMMAND_COPY_BUFFER","","",null,null],[17,"CL_COMMAND_READ_IMAGE","","",null,null],[17,"CL_COMMAND_WRITE_IMAGE","","",null,null],[17,"CL_COMMAND_COPY_IMAGE","","",null,null],[17,"CL_COMMAND_COPY_IMAGE_TO_BUFFER","","",null,null],[17,"CL_COMMAND_COPY_BUFFER_TO_IMAGE","","",null,null],[17,"CL_COMMAND_MAP_BUFFER","","",null,null],[17,"CL_COMMAND_MAP_IMAGE","","",null,null],[17,"CL_COMMAND_UNMAP_MEM_OBJECT","","",null,null],[17,"CL_COMMAND_MARKER","","",null,null],[17,"CL_COMMAND_ACQUIRE_GL_OBJECTS","","",null,null],[17,"CL_COMMAND_RELEASE_GL_OBJECTS","","",null,null],[17,"CL_COMMAND_READ_BUFFER_RECT","","",null,null],[17,"CL_COMMAND_WRITE_BUFFER_RECT","","",null,null],[17,"CL_COMMAND_COPY_BUFFER_RECT","","",null,null],[17,"CL_COMMAND_USER","","",null,null],[17,"CL_COMMAND_BARRIER","","",null,null],[17,"CL_COMMAND_MIGRATE_MEM_OBJECTS","","",null,null],[17,"CL_COMMAND_FILL_BUFFER","","",null,null],[17,"CL_COMMAND_FILL_IMAGE","","",null,null],[17,"CL_COMMAND_SVM_FREE","","",null,null],[17,"CL_COMMAND_SVM_MEMCPY","","",null,null],[17,"CL_COMMAND_SVM_MEMFILL","","",null,null],[17,"CL_COMMAND_SVM_MAP","","",null,null],[17,"CL_COMMAND_SVM_UNMAP","","",null,null],[17,"CL_COMPLETE","","",null,null],[17,"CL_RUNNING","","",null,null],[17,"CL_SUBMITTED","","",null,null],[17,"CL_QUEUED","","",null,null],[17,"CL_BUFFER_CREATE_TYPE_REGION","","",null,null],[17,"CL_PROFILING_COMMAND_QUEUED","","",null,null],[17,"CL_PROFILING_COMMAND_SUBMIT","","",null,null],[17,"CL_PROFILING_COMMAND_START","","",null,null],[17,"CL_PROFILING_COMMAND_END","","",null,null],[17,"CL_PROFILING_COMMAND_COMPLETE","","",null,null]],"paths":[[3,"cl_image_format"],[3,"cl_image_desc"],[3,"cl_buffer_region"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an\n`enum` declaration and automatically adds an implementation of\n`num::FromPrimitive` (reexported here), to allow conversion from\nprimitive integers to the enum.  It therefore provides an\nalternative to the built-in `#[derive(FromPrimitive)]`, which\nrequires the unstable `std::num::FromPrimitive` and is disabled in\nRust 1.0.","items":[[4,"Option","enum_primitive","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null],[11,"is_some","","Returns `true` if the option is a `Some` value.",0,null],[11,"is_none","","Returns `true` if the option is a `None` value.",0,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`.",0,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`.",0,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",0,null],[11,"unwrap_or","","Returns the contained value or a default.",0,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value.",0,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",0,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",0,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a [`Result&lt;T, E&gt;`], mapping `Some(v)` to\n[`Ok(v)`] and `None` to [`Err(err)`][Err].",0,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a [`Result&lt;T, E&gt;`], mapping `Some(v)` to\n[`Ok(v)`] and `None` to [`Err(err())`][Err].",0,null],[11,"iter","","Returns an iterator over the possibly contained value.",0,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",0,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",0,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",0,null],[11,"unwrap_or_default","","Returns the contained value or a default",0,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",0,null],[11,"default","","Returns None.",0,{"inputs":[],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",0,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null]],"paths":[[4,"Option"],[8,"FromPrimitive"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",16,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",16,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",16,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",16,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",16,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",16,null],[10,"swap_bytes","","Reverses the byte order of the integer.",16,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",16,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",16,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"stat","libc","",null,null],[12,"st_dev","","",0,null],[12,"st_ino","","",0,null],[12,"st_mode","","",0,null],[12,"st_nlink","","",0,null],[12,"st_uid","","",0,null],[12,"st_gid","","",0,null],[12,"st_rdev","","",0,null],[12,"st_size","","",0,null],[12,"st_atime","","",0,null],[12,"st_mtime","","",0,null],[12,"st_ctime","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"timezone","","",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"chmod","","",null,null],[5,"wchmod","","",null,null],[5,"mkdir","","",null,null],[5,"wrmdir","","",null,null],[5,"fstat","","",null,null],[5,"stat","","",null,null],[5,"wstat","","",null,null],[5,"wutime","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"wopen","","",null,null],[5,"creat","","",null,null],[5,"access","","",null,null],[5,"chdir","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"execvpe","","",null,null],[5,"getcwd","","",null,null],[5,"getpid","","",null,null],[5,"isatty","","",null,null],[5,"lseek","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"unlink","","",null,null],[5,"write","","",null,null],[5,"commit","","",null,null],[5,"get_osfhandle","","",null,null],[5,"open_osfhandle","","",null,null],[5,"setlocale","","",null,null],[5,"wsetlocale","","",null,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"c_char","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"wchar_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"off_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"time64_t","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_TEXT","","",null,null],[17,"O_BINARY","","",null,null],[17,"O_NOINHERIT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EILSEQ","","",null,null],[17,"STRUNCATE","","",null,null]],"paths":[[3,"stat"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"get","","",1,null],[14,"__lazy_static_create","lazy_static","",null,null],[14,"lazy_static","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
