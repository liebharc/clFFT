initSidebarItems({"struct":[["CommandQueue","cl_command_queue"],["Context","cl_context"],["DeviceId","cl_device_id"],["Event","cl_event"],["EventRefWrapper","Wrapper used by `EventList` to send event pointers to core functions cheaply."],["Kernel","cl_kernel"],["Mem","cl_mem"],["MemMap","A pointer to a region of mapped (pinned) memory."],["PlatformId","cl_platform_id"],["Program","cl_program"],["Sampler","cl_sampler"]],"trait":[["AsMem","`AsRef` with a type being carried along for convenience."],["ClContextPtr","Types with a copy of a context pointer."],["ClDeviceIdPtr","Types with a reference to a raw device_id pointer."],["ClEventPtrRef","Types with a reference to a raw event pointer."],["ClNullEventPtr","Types with a mutable pointer to a new, null raw event pointer."],["ClPlatformIdPtr","Types with a reference to a raw platform_id pointer."],["ClVersions","Types with a fixed set of associated devices and an associated platform."],["ClWaitListPtr","Types with a reference to a raw event array and an associated element count."],["MemCmdAll","Types which can be passed to any and all `::enqueue_...` functions as the primary (`ptr`) argument and can also be passed as kernel `cl_mem` arguments."],["MemCmdRw","Types which can be passed as the primary (`ptr`) argument value to `::enqueue_read_buffer`, `::enqueue_write_buffer`, `::enqueue_read_buffer_rect`, `::enqueue_write_buffer_rect`, `::enqueue_read_image`, or `::enqueue_write_image`."]]});